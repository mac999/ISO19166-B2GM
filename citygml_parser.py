"""
CityGML parser for B2GM

Author:
    Taewook Kang (laputa99999@gmail.com)

Date:
    2025-01-02
"""
from dataclasses import dataclass, field
from decimal import Decimal
from enum import Enum
from typing import Any, Optional, Union

from xsdata.models.datatype import (
    XmlDate,
    XmlDateTime,
    XmlDuration,
    XmlPeriod,
    XmlTime,
)


@dataclass
class AbstractObjectType:
    class Meta:
        name = "AbstractObject_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    uuid: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BinaryType:
    class Meta:
        name = "Binary_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    src: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Boolean2:
    class Meta:
        name = "Boolean"
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[bool] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class CharacterString:
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class CodeListValueType:
    class Meta:
        name = "CodeListValue_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    code_list: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeList",
            "type": "Attribute",
            "required": True,
        },
    )
    code_list_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeListValue",
            "type": "Attribute",
            "required": True,
        },
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )


@dataclass
class Date:
    class Meta:
        nillable = True
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[Union[XmlDate, XmlPeriod]] = field(
        default=None,
        metadata={
            "nillable": True,
        },
    )


@dataclass
class DateTime:
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class DecimalType:
    class Meta:
        name = "Decimal"
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[Decimal] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Integer:
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Real:
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[float] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Record:
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


@dataclass
class UnlimitedIntegerType:
    class Meta:
        name = "UnlimitedInteger_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )
    is_infinite: Optional[bool] = field(
        default=None,
        metadata={
            "name": "isInfinite",
            "type": "Attribute",
        },
    )


@dataclass
class LocalisedCharacterStringType:
    class Meta:
        name = "LocalisedCharacterString_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    locale: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


class MdObligationCodeType(Enum):
    MANDATORY = "mandatory"
    OPTIONAL = "optional"
    CONDITIONAL = "conditional"


class MdPixelOrientationCodeType(Enum):
    CENTER = "center"
    LOWER_LEFT = "lowerLeft"
    LOWER_RIGHT = "lowerRight"
    UPPER_RIGHT = "upperRight"
    UPPER_LEFT = "upperLeft"


class MdTopicCategoryCodeType(Enum):
    """
    High-level geospatial data thematic classification to assist in the grouping
    and search of available geospatial datasets.
    """

    FARMING = "farming"
    BIOTA = "biota"
    BOUNDARIES = "boundaries"
    CLIMATOLOGY_METEOROLOGY_ATMOSPHERE = "climatologyMeteorologyAtmosphere"
    ECONOMY = "economy"
    ELEVATION = "elevation"
    ENVIRONMENT = "environment"
    GEOSCIENTIFIC_INFORMATION = "geoscientificInformation"
    HEALTH = "health"
    IMAGERY_BASE_MAPS_EARTH_COVER = "imageryBaseMapsEarthCover"
    INTELLIGENCE_MILITARY = "intelligenceMilitary"
    INLAND_WATERS = "inlandWaters"
    LOCATION = "location"
    OCEANS = "oceans"
    PLANNING_CADASTRE = "planningCadastre"
    SOCIETY = "society"
    STRUCTURE = "structure"
    TRANSPORTATION = "transportation"
    UTILITIES_COMMUNICATION = "utilitiesCommunication"


@dataclass
class Url:
    class Meta:
        name = "URL"
        namespace = "http://www.isotc211.org/2005/gmd"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class TmPeriodDuration:
    class Meta:
        name = "TM_PeriodDuration"
        namespace = "http://www.isotc211.org/2005/gts"

    value: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class AdeofAbstractAppearancePropertyType:
    class Meta:
        name = "ADEOfAbstractAppearancePropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractAppearanceType:
    class Meta:
        name = "ADEOfAbstractAppearanceType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractCityObjectPropertyType:
    class Meta:
        name = "ADEOfAbstractCityObjectPropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractCityObjectType:
    class Meta:
        name = "ADEOfAbstractCityObjectType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractDynamizerPropertyType:
    class Meta:
        name = "ADEOfAbstractDynamizerPropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractDynamizerType:
    class Meta:
        name = "ADEOfAbstractDynamizerType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractFeaturePropertyType:
    class Meta:
        name = "ADEOfAbstractFeaturePropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractFeatureType:
    class Meta:
        name = "ADEOfAbstractFeatureType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractFeatureWithLifespanPropertyType:
    class Meta:
        name = "ADEOfAbstractFeatureWithLifespanPropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractFeatureWithLifespanType:
    class Meta:
        name = "ADEOfAbstractFeatureWithLifespanType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractLogicalSpacePropertyType:
    class Meta:
        name = "ADEOfAbstractLogicalSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractLogicalSpaceType:
    class Meta:
        name = "ADEOfAbstractLogicalSpaceType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractOccupiedSpacePropertyType:
    class Meta:
        name = "ADEOfAbstractOccupiedSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractOccupiedSpaceType:
    class Meta:
        name = "ADEOfAbstractOccupiedSpaceType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractPhysicalSpacePropertyType:
    class Meta:
        name = "ADEOfAbstractPhysicalSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractPhysicalSpaceType:
    class Meta:
        name = "ADEOfAbstractPhysicalSpaceType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractPointCloudPropertyType:
    class Meta:
        name = "ADEOfAbstractPointCloudPropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractPointCloudType:
    class Meta:
        name = "ADEOfAbstractPointCloudType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractSpaceBoundaryPropertyType:
    class Meta:
        name = "ADEOfAbstractSpaceBoundaryPropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractSpaceBoundaryType:
    class Meta:
        name = "ADEOfAbstractSpaceBoundaryType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractSpacePropertyType:
    class Meta:
        name = "ADEOfAbstractSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractSpaceType:
    class Meta:
        name = "ADEOfAbstractSpaceType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractThematicSurfacePropertyType:
    class Meta:
        name = "ADEOfAbstractThematicSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractThematicSurfaceType:
    class Meta:
        name = "ADEOfAbstractThematicSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractUnoccupiedSpacePropertyType:
    class Meta:
        name = "ADEOfAbstractUnoccupiedSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractUnoccupiedSpaceType:
    class Meta:
        name = "ADEOfAbstractUnoccupiedSpaceType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractVersionPropertyType:
    class Meta:
        name = "ADEOfAbstractVersionPropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractVersionTransitionPropertyType:
    class Meta:
        name = "ADEOfAbstractVersionTransitionPropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractVersionTransitionType:
    class Meta:
        name = "ADEOfAbstractVersionTransitionType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractVersionType:
    class Meta:
        name = "ADEOfAbstractVersionType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAddressPropertyType:
    class Meta:
        name = "ADEOfAddressPropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAddressType:
    class Meta:
        name = "ADEOfAddressType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofCityModelPropertyType:
    class Meta:
        name = "ADEOfCityModelPropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofCityModelType:
    class Meta:
        name = "ADEOfCityModelType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofClosureSurfacePropertyType:
    class Meta:
        name = "ADEOfClosureSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofClosureSurfaceType:
    class Meta:
        name = "ADEOfClosureSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractGenericAttributeType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class ExternalReferenceType:
    """
    :ivar target_resource: Specifies the URI that points to the object
        in the external information system.
    :ivar information_system: Specifies the URI that points to the
        external information system.
    :ivar relation_type: Specifies a URI that additionally qualifies the
        ExternalReference. The URI can point to a definition from an
        external ontology (e.g. the sameAs relation from OWL) and allows
        for mapping the ExternalReference to RDF triples.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    target_resource: Optional[str] = field(
        default=None,
        metadata={
            "name": "targetResource",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )
    information_system: Optional[str] = field(
        default=None,
        metadata={
            "name": "informationSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    relation_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "relationType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


class RelativeToTerrainType(Enum):
    """
    RelativeToTerrain enumerates the spatial relations of a city object relative to
    terrain in a qualitative way.

    :cvar ENTIRELY_ABOVE_TERRAIN: Indicates that the city object is
        located entirely above the terrain.
    :cvar SUBSTANTIALLY_ABOVE_TERRAIN: Indicates that the city object is
        for the most part located above the terrain.
    :cvar SUBSTANTIALLY_ABOVE_AND_BELOW_TERRAIN: Indicates that the city
        object is located half above the terrain and half below the
        terrain.
    :cvar SUBSTANTIALLY_BELOW_TERRAIN: Indicates that the city object is
        for the most part located below the terrain.
    :cvar ENTIRELY_BELOW_TERRAIN: Indicates that the city object is
        located entirely below the terrain.
    """

    ENTIRELY_ABOVE_TERRAIN = "entirelyAboveTerrain"
    SUBSTANTIALLY_ABOVE_TERRAIN = "substantiallyAboveTerrain"
    SUBSTANTIALLY_ABOVE_AND_BELOW_TERRAIN = "substantiallyAboveAndBelowTerrain"
    SUBSTANTIALLY_BELOW_TERRAIN = "substantiallyBelowTerrain"
    ENTIRELY_BELOW_TERRAIN = "entirelyBelowTerrain"


class RelativeToWaterType(Enum):
    """
    RelativeToWater enumerates the spatial relations of a city object relative to
    the water surface in a qualitative way.

    :cvar ENTIRELY_ABOVE_WATER_SURFACE: Indicates that the city object
        is located entirely above the water surface.
    :cvar SUBSTANTIALLY_ABOVE_WATER_SURFACE: Indicates that the city
        object is for the most part located above the water surface.
    :cvar SUBSTANTIALLY_ABOVE_AND_BELOW_WATER_SURFACE: Indicates that
        the city object is located half above the water surface and half
        below the water surface.
    :cvar SUBSTANTIALLY_BELOW_WATER_SURFACE: Indicates that the city
        object is for the most part located below the water surface.
    :cvar ENTIRELY_BELOW_WATER_SURFACE: Indicates that the city object
        is located entirely below the water surface.
    :cvar TEMPORARILY_ABOVE_AND_BELOW_WATER_SURFACE: Indicates that the
        city object is temporarily located above or below the water
        level, because the height of the water surface is varying.
    """

    ENTIRELY_ABOVE_WATER_SURFACE = "entirelyAboveWaterSurface"
    SUBSTANTIALLY_ABOVE_WATER_SURFACE = "substantiallyAboveWaterSurface"
    SUBSTANTIALLY_ABOVE_AND_BELOW_WATER_SURFACE = (
        "substantiallyAboveAndBelowWaterSurface"
    )
    SUBSTANTIALLY_BELOW_WATER_SURFACE = "substantiallyBelowWaterSurface"
    ENTIRELY_BELOW_WATER_SURFACE = "entirelyBelowWaterSurface"
    TEMPORARILY_ABOVE_AND_BELOW_WATER_SURFACE = (
        "temporarilyAboveAndBelowWaterSurface"
    )


class SpaceTypeType(Enum):
    """
    SpaceType is an enumeration that characterises a space according to its closure
    properties.

    :cvar CLOSED: Indicates that the space has boundaries at the bottom,
        at the top, and on all sides.
    :cvar OPEN: Indicates that the space has at maximum a boundary at
        the bottom.
    :cvar SEMI_OPEN: Indicates that the space has a boundary at the
        bottom and on at least one side.
    """

    CLOSED = "closed"
    OPEN = "open"
    SEMI_OPEN = "semiOpen"


@dataclass
class AdeofAbstractSurfaceDataPropertyType:
    class Meta:
        name = "ADEOfAbstractSurfaceDataPropertyType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofAbstractSurfaceDataType:
    class Meta:
        name = "ADEOfAbstractSurfaceDataType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofAbstractTexturePropertyType:
    class Meta:
        name = "ADEOfAbstractTexturePropertyType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofAbstractTextureType:
    class Meta:
        name = "ADEOfAbstractTextureType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofAppearancePropertyType:
    class Meta:
        name = "ADEOfAppearancePropertyType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofAppearanceType:
    class Meta:
        name = "ADEOfAppearanceType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofGeoreferencedTexturePropertyType:
    class Meta:
        name = "ADEOfGeoreferencedTexturePropertyType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofGeoreferencedTextureType:
    class Meta:
        name = "ADEOfGeoreferencedTextureType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofParameterizedTexturePropertyType:
    class Meta:
        name = "ADEOfParameterizedTexturePropertyType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofParameterizedTextureType:
    class Meta:
        name = "ADEOfParameterizedTextureType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofX3DmaterialPropertyType:
    class Meta:
        name = "ADEOfX3DMaterialPropertyType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofX3DmaterialType:
    class Meta:
        name = "ADEOfX3DMaterialType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AbstractTextureParameterizationType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"


class TextureTypeType(Enum):
    """
    TextureType enumerates the different texture types.

    :cvar SPECIFIC: Indicates that the texture is specific to a single
        surface.
    :cvar TYPICAL: Indicates that the texture is characteristic of a
        surface and can be used repeatedly.
    :cvar UNKNOWN: Indicates that the texture type is not known.
    """

    SPECIFIC = "specific"
    TYPICAL = "typical"
    UNKNOWN = "unknown"


class WrapModeType(Enum):
    """
    WrapMode enumerates the different fill modes for textures.

    :cvar NONE: Indicates that the texture is applied to the surface "as
        is". The part of the surface that is not covered by the texture
        is shown fully transparent. [cf. COLLADA]
    :cvar WRAP: Indicates that the texture is repeated until the surface
        is fully covered. [cf. COLLADA]
    :cvar MIRROR: Indicates that the texture is repeated and mirrored.
        [cf. COLLADA]
    :cvar CLAMP: Indicates that the texture is stretched to the edges of
        the surface. [cf. COLLADA]
    :cvar BORDER: Indicates that the texture is applied to the surface
        "as is". The part of the surface that is not covered by the
        texture is filled with the RGBA color that is specified in the
        attribute borderColor.  [cf. COLLADA]
    """

    NONE = "none"
    WRAP = "wrap"
    MIRROR = "mirror"
    CLAMP = "clamp"
    BORDER = "border"


@dataclass
class AdeofAbstractBridgePropertyType:
    class Meta:
        name = "ADEOfAbstractBridgePropertyType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofAbstractBridgeType:
    class Meta:
        name = "ADEOfAbstractBridgeType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeConstructiveElementPropertyType:
    class Meta:
        name = "ADEOfBridgeConstructiveElementPropertyType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeConstructiveElementType:
    class Meta:
        name = "ADEOfBridgeConstructiveElementType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeFurniturePropertyType:
    class Meta:
        name = "ADEOfBridgeFurniturePropertyType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeFurnitureType:
    class Meta:
        name = "ADEOfBridgeFurnitureType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeInstallationPropertyType:
    class Meta:
        name = "ADEOfBridgeInstallationPropertyType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeInstallationType:
    class Meta:
        name = "ADEOfBridgeInstallationType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgePartPropertyType:
    class Meta:
        name = "ADEOfBridgePartPropertyType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgePartType:
    class Meta:
        name = "ADEOfBridgePartType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgePropertyType:
    class Meta:
        name = "ADEOfBridgePropertyType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeRoomPropertyType:
    class Meta:
        name = "ADEOfBridgeRoomPropertyType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeRoomType:
    class Meta:
        name = "ADEOfBridgeRoomType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeType:
    class Meta:
        name = "ADEOfBridgeType"
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofAbstractBuildingPropertyType:
    class Meta:
        name = "ADEOfAbstractBuildingPropertyType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofAbstractBuildingSubdivisionPropertyType:
    class Meta:
        name = "ADEOfAbstractBuildingSubdivisionPropertyType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofAbstractBuildingSubdivisionType:
    class Meta:
        name = "ADEOfAbstractBuildingSubdivisionType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofAbstractBuildingType:
    class Meta:
        name = "ADEOfAbstractBuildingType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingConstructiveElementPropertyType:
    class Meta:
        name = "ADEOfBuildingConstructiveElementPropertyType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingConstructiveElementType:
    class Meta:
        name = "ADEOfBuildingConstructiveElementType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingFurniturePropertyType:
    class Meta:
        name = "ADEOfBuildingFurniturePropertyType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingFurnitureType:
    class Meta:
        name = "ADEOfBuildingFurnitureType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingInstallationPropertyType:
    class Meta:
        name = "ADEOfBuildingInstallationPropertyType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingInstallationType:
    class Meta:
        name = "ADEOfBuildingInstallationType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingPartPropertyType:
    class Meta:
        name = "ADEOfBuildingPartPropertyType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingPartType:
    class Meta:
        name = "ADEOfBuildingPartType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingPropertyType:
    class Meta:
        name = "ADEOfBuildingPropertyType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingRoomPropertyType:
    class Meta:
        name = "ADEOfBuildingRoomPropertyType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingRoomType:
    class Meta:
        name = "ADEOfBuildingRoomType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingType:
    class Meta:
        name = "ADEOfBuildingType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingUnitPropertyType:
    class Meta:
        name = "ADEOfBuildingUnitPropertyType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingUnitType:
    class Meta:
        name = "ADEOfBuildingUnitType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofStoreyPropertyType:
    class Meta:
        name = "ADEOfStoreyPropertyType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofStoreyType:
    class Meta:
        name = "ADEOfStoreyType"
        target_namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofCityFurniturePropertyType:
    class Meta:
        name = "ADEOfCityFurniturePropertyType"
        target_namespace = "http://www.opengis.net/citygml/cityfurniture/3.0"


@dataclass
class AdeofCityFurnitureType:
    class Meta:
        name = "ADEOfCityFurnitureType"
        target_namespace = "http://www.opengis.net/citygml/cityfurniture/3.0"


@dataclass
class AdeofCityObjectGroupPropertyType:
    class Meta:
        name = "ADEOfCityObjectGroupPropertyType"
        target_namespace = "http://www.opengis.net/citygml/cityobjectgroup/3.0"


@dataclass
class AdeofCityObjectGroupType:
    class Meta:
        name = "ADEOfCityObjectGroupType"
        target_namespace = "http://www.opengis.net/citygml/cityobjectgroup/3.0"


@dataclass
class AdeofAbstractConstructionPropertyType:
    class Meta:
        name = "ADEOfAbstractConstructionPropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractConstructionSurfacePropertyType:
    class Meta:
        name = "ADEOfAbstractConstructionSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractConstructionSurfaceType:
    class Meta:
        name = "ADEOfAbstractConstructionSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractConstructionType:
    class Meta:
        name = "ADEOfAbstractConstructionType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractConstructiveElementPropertyType:
    class Meta:
        name = "ADEOfAbstractConstructiveElementPropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractConstructiveElementType:
    class Meta:
        name = "ADEOfAbstractConstructiveElementType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractFillingElementPropertyType:
    class Meta:
        name = "ADEOfAbstractFillingElementPropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractFillingElementType:
    class Meta:
        name = "ADEOfAbstractFillingElementType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractFillingSurfacePropertyType:
    class Meta:
        name = "ADEOfAbstractFillingSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractFillingSurfaceType:
    class Meta:
        name = "ADEOfAbstractFillingSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractFurniturePropertyType:
    class Meta:
        name = "ADEOfAbstractFurniturePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractFurnitureType:
    class Meta:
        name = "ADEOfAbstractFurnitureType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractInstallationPropertyType:
    class Meta:
        name = "ADEOfAbstractInstallationPropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractInstallationType:
    class Meta:
        name = "ADEOfAbstractInstallationType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofCeilingSurfacePropertyType:
    class Meta:
        name = "ADEOfCeilingSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofCeilingSurfaceType:
    class Meta:
        name = "ADEOfCeilingSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofDoorPropertyType:
    class Meta:
        name = "ADEOfDoorPropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofDoorSurfacePropertyType:
    class Meta:
        name = "ADEOfDoorSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofDoorSurfaceType:
    class Meta:
        name = "ADEOfDoorSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofDoorType:
    class Meta:
        name = "ADEOfDoorType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofFloorSurfacePropertyType:
    class Meta:
        name = "ADEOfFloorSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofFloorSurfaceType:
    class Meta:
        name = "ADEOfFloorSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofGroundSurfacePropertyType:
    class Meta:
        name = "ADEOfGroundSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofGroundSurfaceType:
    class Meta:
        name = "ADEOfGroundSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofInteriorWallSurfacePropertyType:
    class Meta:
        name = "ADEOfInteriorWallSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofInteriorWallSurfaceType:
    class Meta:
        name = "ADEOfInteriorWallSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofOtherConstructionPropertyType:
    class Meta:
        name = "ADEOfOtherConstructionPropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofOtherConstructionType:
    class Meta:
        name = "ADEOfOtherConstructionType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofOuterCeilingSurfacePropertyType:
    class Meta:
        name = "ADEOfOuterCeilingSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofOuterCeilingSurfaceType:
    class Meta:
        name = "ADEOfOuterCeilingSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofOuterFloorSurfacePropertyType:
    class Meta:
        name = "ADEOfOuterFloorSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofOuterFloorSurfaceType:
    class Meta:
        name = "ADEOfOuterFloorSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofRoofSurfacePropertyType:
    class Meta:
        name = "ADEOfRoofSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofRoofSurfaceType:
    class Meta:
        name = "ADEOfRoofSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofWallSurfacePropertyType:
    class Meta:
        name = "ADEOfWallSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofWallSurfaceType:
    class Meta:
        name = "ADEOfWallSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofWindowPropertyType:
    class Meta:
        name = "ADEOfWindowPropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofWindowSurfacePropertyType:
    class Meta:
        name = "ADEOfWindowSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofWindowSurfaceType:
    class Meta:
        name = "ADEOfWindowSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofWindowType:
    class Meta:
        name = "ADEOfWindowType"
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"


class ConditionOfConstructionValueType(Enum):
    """ConditionOfConstructionValue enumerates different conditions of a
    construction.

    [cf. INSPIRE]

    :cvar DECLINED: Indicates that the construction cannot be used under
        normal conditions, though its main elements (walls, roof) are
        still present. [cf. INSPIRE]
    :cvar DEMOLISHED: Indicates that the construction has been
        demolished. There are no more visible remains. [cf. INSPIRE]
    :cvar FUNCTIONAL: Indicates that the construction is functional.
        [cf. INSPIRE]
    :cvar PROJECTED: Indicates that the construction is being designed.
        Construction works have not yet started. [cf. INSPIRE]
    :cvar RUIN: Indicates that the construction has been partly
        demolished and some main elements (roof, walls) have been
        destroyed. There are some visible remains of the construction.
        [cf. INSPIRE]
    :cvar UNDER_CONSTRUCTION: Indicates that the construction is under
        construction and not yet functional. This applies only to the
        initial construction works of the construction and not to
        maintenance work. [cf. INSPIRE]
    """

    DECLINED = "declined"
    DEMOLISHED = "demolished"
    FUNCTIONAL = "functional"
    PROJECTED = "projected"
    RUIN = "ruin"
    UNDER_CONSTRUCTION = "underConstruction"


class HeightStatusValueType(Enum):
    """HeightStatusValue enumerates the different methods used to capture a height.

    [cf. INSPIRE]

    :cvar ESTIMATED: Indicates that the height has been estimated and
        not measured. [cf. INSPIRE]
    :cvar MEASURED: Indicates that the height has been (directly or
        indirectly) measured. [cf. INSPIRE]
    """

    ESTIMATED = "estimated"
    MEASURED = "measured"


class RelationToConstructionType(Enum):
    """
    RelationToConstruction is an enumeration used to describe whether an
    installation is positioned inside and/or outside of a construction.

    :cvar INSIDE: Indicates that the installation is positioned inside
        of the construction.
    :cvar OUTSIDE: Indicates that the installation is positioned outside
        of the construction.
    :cvar BOTH_INSIDE_AND_OUTSIDE: Indicates that the installation is
        positioned inside as well as outside of the construction.
    """

    INSIDE = "inside"
    OUTSIDE = "outside"
    BOTH_INSIDE_AND_OUTSIDE = "bothInsideAndOutside"


@dataclass
class AdeofAbstractAtomicTimeseriesPropertyType:
    class Meta:
        name = "ADEOfAbstractAtomicTimeseriesPropertyType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofAbstractAtomicTimeseriesType:
    class Meta:
        name = "ADEOfAbstractAtomicTimeseriesType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofAbstractTimeseriesPropertyType:
    class Meta:
        name = "ADEOfAbstractTimeseriesPropertyType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofAbstractTimeseriesType:
    class Meta:
        name = "ADEOfAbstractTimeseriesType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofCompositeTimeseriesPropertyType:
    class Meta:
        name = "ADEOfCompositeTimeseriesPropertyType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofCompositeTimeseriesType:
    class Meta:
        name = "ADEOfCompositeTimeseriesType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofDynamizerPropertyType:
    class Meta:
        name = "ADEOfDynamizerPropertyType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofDynamizerType:
    class Meta:
        name = "ADEOfDynamizerType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofGenericTimeseriesPropertyType:
    class Meta:
        name = "ADEOfGenericTimeseriesPropertyType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofGenericTimeseriesType:
    class Meta:
        name = "ADEOfGenericTimeseriesType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofStandardFileTimeseriesPropertyType:
    class Meta:
        name = "ADEOfStandardFileTimeseriesPropertyType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofStandardFileTimeseriesType:
    class Meta:
        name = "ADEOfStandardFileTimeseriesType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofTabulatedFileTimeseriesPropertyType:
    class Meta:
        name = "ADEOfTabulatedFileTimeseriesPropertyType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofTabulatedFileTimeseriesType:
    class Meta:
        name = "ADEOfTabulatedFileTimeseriesType"
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


class TimeseriesTypeValueType(Enum):
    """
    TimeseriesTypeValue enumerates the possible value types for GenericTimeseries
    and TimeValuePair.

    :cvar INT: Indicates that the values of the GenericTimeseries are of
        type "Integer".
    :cvar DOUBLE: Indicates that the values of the GenericTimeseries
        are of type "Double".
    :cvar STRING: Indicates that the values of the GenericTimeseries are
        of type "String".
    :cvar GEOMETRY: Indicates that the values of the GenericTimeseries
        are geometries.
    :cvar URI: Indicates that the values of the GenericTimeseries are of
        type "URI".
    :cvar BOOL: Indicates that the values of the GenericTimeseries are
        of type "Boolean".
    :cvar IMPLICIT_GEOMETRY: Indicates that the values of the
        GenericTimeseries are of type "ImplicitGeometry".
    :cvar APPEARANCE: Indicates that the values of the GenericTimeseries
        are of type "Appearance".
    """

    INT = "int"
    DOUBLE = "double"
    STRING = "string"
    GEOMETRY = "geometry"
    URI = "uri"
    BOOL = "bool"
    IMPLICIT_GEOMETRY = "implicitGeometry"
    APPEARANCE = "appearance"


@dataclass
class AdeofGenericLogicalSpacePropertyType:
    class Meta:
        name = "ADEOfGenericLogicalSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AdeofGenericLogicalSpaceType:
    class Meta:
        name = "ADEOfGenericLogicalSpaceType"
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AdeofGenericOccupiedSpacePropertyType:
    class Meta:
        name = "ADEOfGenericOccupiedSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AdeofGenericOccupiedSpaceType:
    class Meta:
        name = "ADEOfGenericOccupiedSpaceType"
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AdeofGenericThematicSurfacePropertyType:
    class Meta:
        name = "ADEOfGenericThematicSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AdeofGenericThematicSurfaceType:
    class Meta:
        name = "ADEOfGenericThematicSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AdeofGenericUnoccupiedSpacePropertyType:
    class Meta:
        name = "ADEOfGenericUnoccupiedSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AdeofGenericUnoccupiedSpaceType:
    class Meta:
        name = "ADEOfGenericUnoccupiedSpaceType"
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AdeofLandUsePropertyType:
    class Meta:
        name = "ADEOfLandUsePropertyType"
        target_namespace = "http://www.opengis.net/citygml/landuse/3.0"


@dataclass
class AdeofLandUseType:
    class Meta:
        name = "ADEOfLandUseType"
        target_namespace = "http://www.opengis.net/citygml/landuse/3.0"


@dataclass
class AdeofPointCloudPropertyType:
    class Meta:
        name = "ADEOfPointCloudPropertyType"
        target_namespace = "http://www.opengis.net/citygml/pointcloud/3.0"


@dataclass
class AdeofPointCloudType:
    class Meta:
        name = "ADEOfPointCloudType"
        target_namespace = "http://www.opengis.net/citygml/pointcloud/3.0"


@dataclass
class AdeofAbstractReliefComponentPropertyType:
    class Meta:
        name = "ADEOfAbstractReliefComponentPropertyType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofAbstractReliefComponentType:
    class Meta:
        name = "ADEOfAbstractReliefComponentType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofBreaklineReliefPropertyType:
    class Meta:
        name = "ADEOfBreaklineReliefPropertyType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofBreaklineReliefType:
    class Meta:
        name = "ADEOfBreaklineReliefType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofMassPointReliefPropertyType:
    class Meta:
        name = "ADEOfMassPointReliefPropertyType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofMassPointReliefType:
    class Meta:
        name = "ADEOfMassPointReliefType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofRasterReliefPropertyType:
    class Meta:
        name = "ADEOfRasterReliefPropertyType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofRasterReliefType:
    class Meta:
        name = "ADEOfRasterReliefType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofReliefFeaturePropertyType:
    class Meta:
        name = "ADEOfReliefFeaturePropertyType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofReliefFeatureType:
    class Meta:
        name = "ADEOfReliefFeatureType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofTinreliefPropertyType:
    class Meta:
        name = "ADEOfTINReliefPropertyType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofTinreliefType:
    class Meta:
        name = "ADEOfTINReliefType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofAbstractTransportationSpacePropertyType:
    class Meta:
        name = "ADEOfAbstractTransportationSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofAbstractTransportationSpaceType:
    class Meta:
        name = "ADEOfAbstractTransportationSpaceType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofAuxiliaryTrafficAreaPropertyType:
    class Meta:
        name = "ADEOfAuxiliaryTrafficAreaPropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofAuxiliaryTrafficAreaType:
    class Meta:
        name = "ADEOfAuxiliaryTrafficAreaType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofAuxiliaryTrafficSpacePropertyType:
    class Meta:
        name = "ADEOfAuxiliaryTrafficSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofAuxiliaryTrafficSpaceType:
    class Meta:
        name = "ADEOfAuxiliaryTrafficSpaceType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofClearanceSpacePropertyType:
    class Meta:
        name = "ADEOfClearanceSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofClearanceSpaceType:
    class Meta:
        name = "ADEOfClearanceSpaceType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofHolePropertyType:
    class Meta:
        name = "ADEOfHolePropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofHoleSurfacePropertyType:
    class Meta:
        name = "ADEOfHoleSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofHoleSurfaceType:
    class Meta:
        name = "ADEOfHoleSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofHoleType:
    class Meta:
        name = "ADEOfHoleType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofIntersectionPropertyType:
    class Meta:
        name = "ADEOfIntersectionPropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofIntersectionType:
    class Meta:
        name = "ADEOfIntersectionType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofMarkingPropertyType:
    class Meta:
        name = "ADEOfMarkingPropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofMarkingType:
    class Meta:
        name = "ADEOfMarkingType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofRailwayPropertyType:
    class Meta:
        name = "ADEOfRailwayPropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofRailwayType:
    class Meta:
        name = "ADEOfRailwayType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofRoadPropertyType:
    class Meta:
        name = "ADEOfRoadPropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofRoadType:
    class Meta:
        name = "ADEOfRoadType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofSectionPropertyType:
    class Meta:
        name = "ADEOfSectionPropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofSectionType:
    class Meta:
        name = "ADEOfSectionType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofSquarePropertyType:
    class Meta:
        name = "ADEOfSquarePropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofSquareType:
    class Meta:
        name = "ADEOfSquareType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofTrackPropertyType:
    class Meta:
        name = "ADEOfTrackPropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofTrackType:
    class Meta:
        name = "ADEOfTrackType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofTrafficAreaPropertyType:
    class Meta:
        name = "ADEOfTrafficAreaPropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofTrafficAreaType:
    class Meta:
        name = "ADEOfTrafficAreaType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofTrafficSpacePropertyType:
    class Meta:
        name = "ADEOfTrafficSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofTrafficSpaceType:
    class Meta:
        name = "ADEOfTrafficSpaceType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofWaterwayPropertyType:
    class Meta:
        name = "ADEOfWaterwayPropertyType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofWaterwayType:
    class Meta:
        name = "ADEOfWaterwayType"
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"


class GranularityValueType(Enum):
    """
    GranularityValue enumerates the different levels of granularity in which
    transportation objects are represented.

    :cvar LANE: Indicates that the individual lanes of the
        transportation object are represented.
    :cvar WAY: Indicates that the individual (carriage)ways of the
        transportation object are represented.
    """

    LANE = "lane"
    WAY = "way"


class TrafficDirectionValueType(Enum):
    """
    TrafficDirectionValue enumerates the allowed directions of travel of a mobile
    object.

    :cvar FORWARDS: Indicates that traffic flows in the direction of the
        corresponding linear geometry.
    :cvar BACKWARDS: Indicates that traffic flows in the opposite
        direction of the corresponding linear geometry.
    :cvar BOTH: Indicates that traffic flows in both directions.
    """

    FORWARDS = "forwards"
    BACKWARDS = "backwards"
    BOTH = "both"


@dataclass
class AdeofAbstractTunnelPropertyType:
    class Meta:
        name = "ADEOfAbstractTunnelPropertyType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofAbstractTunnelType:
    class Meta:
        name = "ADEOfAbstractTunnelType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofHollowSpacePropertyType:
    class Meta:
        name = "ADEOfHollowSpacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofHollowSpaceType:
    class Meta:
        name = "ADEOfHollowSpaceType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelConstructiveElementPropertyType:
    class Meta:
        name = "ADEOfTunnelConstructiveElementPropertyType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelConstructiveElementType:
    class Meta:
        name = "ADEOfTunnelConstructiveElementType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelFurniturePropertyType:
    class Meta:
        name = "ADEOfTunnelFurniturePropertyType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelFurnitureType:
    class Meta:
        name = "ADEOfTunnelFurnitureType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelInstallationPropertyType:
    class Meta:
        name = "ADEOfTunnelInstallationPropertyType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelInstallationType:
    class Meta:
        name = "ADEOfTunnelInstallationType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelPartPropertyType:
    class Meta:
        name = "ADEOfTunnelPartPropertyType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelPartType:
    class Meta:
        name = "ADEOfTunnelPartType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelPropertyType:
    class Meta:
        name = "ADEOfTunnelPropertyType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelType:
    class Meta:
        name = "ADEOfTunnelType"
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofAbstractVegetationObjectPropertyType:
    class Meta:
        name = "ADEOfAbstractVegetationObjectPropertyType"
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class AdeofAbstractVegetationObjectType:
    class Meta:
        name = "ADEOfAbstractVegetationObjectType"
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class AdeofPlantCoverPropertyType:
    class Meta:
        name = "ADEOfPlantCoverPropertyType"
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class AdeofPlantCoverType:
    class Meta:
        name = "ADEOfPlantCoverType"
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class AdeofSolitaryVegetationObjectPropertyType:
    class Meta:
        name = "ADEOfSolitaryVegetationObjectPropertyType"
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class AdeofSolitaryVegetationObjectType:
    class Meta:
        name = "ADEOfSolitaryVegetationObjectType"
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class AdeofVersionPropertyType:
    class Meta:
        name = "ADEOfVersionPropertyType"
        target_namespace = "http://www.opengis.net/citygml/versioning/3.0"


@dataclass
class AdeofVersionTransitionPropertyType:
    class Meta:
        name = "ADEOfVersionTransitionPropertyType"
        target_namespace = "http://www.opengis.net/citygml/versioning/3.0"


@dataclass
class AdeofVersionTransitionType:
    class Meta:
        name = "ADEOfVersionTransitionType"
        target_namespace = "http://www.opengis.net/citygml/versioning/3.0"


@dataclass
class AdeofVersionType:
    class Meta:
        name = "ADEOfVersionType"
        target_namespace = "http://www.opengis.net/citygml/versioning/3.0"


class TransactionTypeValueType(Enum):
    """TransactionTypeValue enumerates the three possible types of transactions: insert, delete, or replace.

    :cvar INSERT: Indicates that the feature referenced from the
        Transaction via the "newFeature" association has been newly
        created; the association "oldFeature" is empty in this case.
    :cvar DELETE: Indicates that the feature referenced from the
        Transaction via the "oldFeature" association ceases to exist;
        the association "newFeature" is empty in this case.
    :cvar REPLACE: Indicates that the feature referenced from the
        Transaction via the "oldFeature" association has been replaced
        by the feature referenced via the "newFeature" association.
    """

    INSERT = "insert"
    DELETE = "delete"
    REPLACE = "replace"


class TransitionTypeValueType(Enum):
    """TransitionTypeValue enumerates the different kinds of version transitions.

    “planned” and “fork” should be used in cases when from one city
    model version multiple successor versions are being created.
    “realized” and “merge” should be used when different city model
    versions are converging into a common successor version.

    :cvar PLANNED: Indicates that the successor version of the city
        model represents a planning state for a possible future of the
        city.
    :cvar REALIZED: Indicates that the predecessor version is the chosen
        one from a number of possible planning versions.
    :cvar HISTORICAL_SUCCESSION: Indicates that the successor version
        reflects updates on the city model over time (historical
        timeline). It shall only be used for at most one version
        transition outgoing from a city model version.
    :cvar FORK: Indicates other reasons to create alternative city model
        versions, for example, when different parties are updating parts
        of the city model or to reflect the results of different
        simulation runs.
    :cvar MERGE: Indicates other reasons to converge multiple versions
        back into a common city model version.
    """

    PLANNED = "planned"
    REALIZED = "realized"
    HISTORICAL_SUCCESSION = "historicalSuccession"
    FORK = "fork"
    MERGE = "merge"


@dataclass
class AdeofAbstractWaterBoundarySurfacePropertyType:
    class Meta:
        name = "ADEOfAbstractWaterBoundarySurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AdeofAbstractWaterBoundarySurfaceType:
    class Meta:
        name = "ADEOfAbstractWaterBoundarySurfaceType"
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AdeofWaterBodyPropertyType:
    class Meta:
        name = "ADEOfWaterBodyPropertyType"
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AdeofWaterBodyType:
    class Meta:
        name = "ADEOfWaterBodyType"
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AdeofWaterGroundSurfacePropertyType:
    class Meta:
        name = "ADEOfWaterGroundSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AdeofWaterGroundSurfaceType:
    class Meta:
        name = "ADEOfWaterGroundSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AdeofWaterSurfacePropertyType:
    class Meta:
        name = "ADEOfWaterSurfacePropertyType"
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AdeofWaterSurfaceType:
    class Meta:
        name = "ADEOfWaterSurfaceType"
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AbstractCurveSegmentType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    num_derivatives_at_start: int = field(
        default=0,
        metadata={
            "name": "numDerivativesAtStart",
            "type": "Attribute",
        },
    )
    num_derivatives_at_end: int = field(
        default=0,
        metadata={
            "name": "numDerivativesAtEnd",
            "type": "Attribute",
        },
    )
    num_derivative_interior: int = field(
        default=0,
        metadata={
            "name": "numDerivativeInterior",
            "type": "Attribute",
        },
    )


@dataclass
class AbstractFeatureMemberType:
    """To create a collection of GML features, a property type shall be derived by
    extension from gml:AbstractFeatureMemberType.

    By default, this abstract property type does not imply any ownership
    of the features in the collection. The owns attribute of
    gml:OwnershipAttributeGroup may be used on a property element
    instance to assert ownership of a feature in the collection. A
    collection shall not own a feature already owned by another object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractGeneralParameterValueType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractMemberType:
    """To create a collection of GML Objects that are not all features, a property
    type shall be derived by extension from gml:AbstractMemberType.

    This abstract property type is intended to be used only in object
    types where software shall be able to identify that an instance of
    such an object type is to be interpreted as a collection of objects.
    By default, this abstract property type does not imply any ownership
    of the objects in the collection. The owns attribute of
    gml:OwnershipAttributeGroup may be used on a property element
    instance to assert ownership of an object in the collection. A
    collection shall not own an object already owned by another object.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractMetaDataType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    content: list[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


@dataclass
class AbstractMetadataPropertyType:
    """To associate metadata described by any XML Schema with a GML object, a
    property element shall be defined whose content model is derived by extension
    from gml:AbstractMetadataPropertyType.

    The value of such a property shall be metadata. The content model of
    such a property type, i.e. the metadata application schema shall be
    specified by the GML Application Schema. By default, this abstract
    property type does not imply any ownership of the metadata. The owns
    attribute of gml:OwnershipAttributeGroup may be used on a metadata
    property element instance to assert ownership of the metadata. If
    metadata following the conceptual model of ISO 19115 is to be
    encoded in a GML document, the corresponding Implementation
    Specification specified in ISO/TS 19139 shall be used to encode the
    metadata information.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractObject1:
    """This element has no type defined, and is therefore implicitly (according to
    the rules of W3C XML Schema) an XML Schema anyType.

    It is used as the head of an XML Schema substitution group which
    unifies complex content and certain simple content elements used for
    datatypes in GML, including the gml:AbstractGML substitution group.
    """

    class Meta:
        name = "AbstractObject"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractScalarValue:
    """
    Gml:AbstractScalarValue is an abstract element which acts as the head of a
    substitution group which contains gml:Boolean, gml:Category, gml:Count and
    gml:Quantity, and (transitively) the elements in their substitution groups.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


@dataclass
class AbstractScalarValueList:
    """
    Gml:AbstractScalarValueList is an abstract element which acts as the head of a
    substitution group which contains gml:BooleanList, gml:CategoryList,
    gml:CountList and gml:QuantityList, and (transitively) the elements in their
    substitution groups.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


@dataclass
class AbstractSurfacePatchType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractValue:
    """Gml:AbstractValue is an abstract element which acts as the head of a
    substitution group which contains gml:AbstractScalarValue,
    gml:AbstractScalarValueList, gml:CompositeValue and gml:ValueExtent, and
    (transitively) the elements in their substitution groups.

    These elements may be used in an application schema as variables, so
    that in an XML instance document any member of its substitution
    group may occur.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )


class AggregationType(Enum):
    SET = "set"
    BAG = "bag"
    SEQUENCE = "sequence"
    ARRAY = "array"
    RECORD = "record"
    TABLE = "table"


@dataclass
class CodeListType:
    """Gml:CodeListType provides for lists of terms.

    The values in an instance element shall all be valid according to
    the rules of the dictionary, classification scheme, or authority
    identified by the value of its codeSpace attribute.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: list[str] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        },
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )


@dataclass
class CodeType:
    """Gml:CodeType is a generalized type to be used for a term, keyword or name.

    It adds a XML attribute codeSpace to a term, where the value of the
    codeSpace attribute (if present) shall indicate a dictionary,
    thesaurus, classification scheme, authority, or pattern for the
    term.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )


class CompassPointEnumeration(Enum):
    """These directions are necessarily approximate, giving direction with a
    precision of 22.5°.

    It is thus generally unnecessary to specify the reference frame,
    though this may be detailed in the definition of a GML application
    language.
    """

    N = "N"
    NNE = "NNE"
    NE = "NE"
    ENE = "ENE"
    E = "E"
    ESE = "ESE"
    SE = "SE"
    SSE = "SSE"
    S = "S"
    SSW = "SSW"
    SW = "SW"
    WSW = "WSW"
    W = "W"
    WNW = "WNW"
    NW = "NW"
    NNW = "NNW"


@dataclass
class CoordinatesType:
    """This type is deprecated for tuples with ordinate values that are numbers.

    CoordinatesType is a text string, intended to be used to record an
    array of tuples or coordinates. While it is not possible to enforce
    the internal structure of the string through schema validation, some
    optional attributes have been provided in previous versions of GML
    to support a description of the internal structure. These attributes
    are deprecated. The attributes were intended to be used as follows:
    Decimal symbol used for a decimal point (default="." a stop or
    period) cs              symbol used to separate components within a
    tuple or coordinate string (default="," a comma) ts
    symbol used to separate tuples or coordinate strings (default=" " a
    space) Since it is based on the XML Schema string type,
    CoordinatesType may be used in the construction of tables of tuples
    or arrays of tuples, including ones that contain mixed text and
    numeric values.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    decimal: str = field(
        default=".",
        metadata={
            "type": "Attribute",
        },
    )
    cs: str = field(
        default=",",
        metadata={
            "type": "Attribute",
        },
    )
    ts: str = field(
        default=" ",
        metadata={
            "type": "Attribute",
        },
    )


class CurveInterpolationType(Enum):
    """
    Gml:CurveInterpolationType is a list of codes that may be used to identify the
    interpolation mechanisms specified by an application schema.
    """

    LINEAR = "linear"
    GEODESIC = "geodesic"
    CIRCULAR_ARC3_POINTS = "circularArc3Points"
    CIRCULAR_ARC2_POINT_WITH_BULGE = "circularArc2PointWithBulge"
    CIRCULAR_ARC_CENTER_POINT_WITH_RADIUS = "circularArcCenterPointWithRadius"
    ELLIPTICAL = "elliptical"
    CLOTHOID = "clothoid"
    CONIC = "conic"
    POLYNOMIAL_SPLINE = "polynomialSpline"
    CUBIC_SPLINE = "cubicSpline"
    RATIONAL_SPLINE = "rationalSpline"


class DegreesTypeDirection(Enum):
    N = "N"
    E = "E"
    S = "S"
    W = "W"
    PLUS_SIGN = "+"
    HYPHEN_MINUS = "-"


@dataclass
class DirectPositionListType:
    """PosList instances (and other instances with the content model specified by
    DirectPositionListType) hold the coordinates for a sequence of direct positions
    within the same coordinate reference system (CRS).

    if no srsName attribute is given, the CRS shall be specified as part
    of the larger context this geometry element is part of, typically a
    geometric object like a point, curve, etc. The optional attribute
    count specifies the number of direct positions in the list. If the
    attribute count is present then the attribute srsDimension shall be
    present, too. The number of entries in the list is equal to the
    product of the dimensionality of the coordinate reference system
    (i.e. it is a derived value of the coordinate reference system
    definition) and the number of direct positions.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: list[float] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        },
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        },
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        },
    )
    axis_labels: list[str] = field(
        default_factory=list,
        metadata={
            "name": "axisLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )
    uom_labels: list[str] = field(
        default_factory=list,
        metadata={
            "name": "uomLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )
    count: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DirectPositionType:
    """Direct position instances hold the coordinates for a position within some
    coordinate reference system (CRS).

    Since direct positions, as data types, will often be included in
    larger objects (such as geometry elements) that have references to
    CRS, the srsName attribute will in general be missing, if this
    particular direct position is included in a larger element with such
    a reference to a CRS. In this case, the CRS is implicitly assumed to
    take on the value of the containing object's CRS. if no srsName
    attribute is given, the CRS shall be specified as part of the larger
    context this geometry element is part of, typically a geometric
    object like a point, curve, etc.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: list[float] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        },
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        },
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        },
    )
    axis_labels: list[str] = field(
        default_factory=list,
        metadata={
            "name": "axisLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )
    uom_labels: list[str] = field(
        default_factory=list,
        metadata={
            "name": "uomLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )


@dataclass
class FormulaType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    a: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    b: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    c: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    d: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GridEnvelopeType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    low: list[int] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "tokens": True,
        },
    )
    high: list[int] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "tokens": True,
        },
    )


class IncrementOrder(Enum):
    X_Y = "+x+y"
    Y_X = "+y+x"
    X_Y_1 = "+x-y"
    X_Y_2 = "-x-y"


@dataclass
class InlinePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class KnotType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    multiplicity: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    weight: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


class KnotTypesType(Enum):
    """
    This enumeration type specifies values for the knots' type (see ISO 19107:2003,
    6.4.25).
    """

    UNIFORM = "uniform"
    QUASI_UNIFORM = "quasiUniform"
    PIECEWISE_BEZIER = "piecewiseBezier"


@dataclass
class MeasureListType:
    """
    Gml:MeasureListType provides for a list of quantities.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: list[float] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        },
    )


@dataclass
class MeasureType:
    """Gml:MeasureType supports recording an amount encoded as a value of XML
    Schema double, together with a units of measure indicated by an attribute uom,
    short for "units Of measure".

    The value of the uom attribute identifies a reference system for the
    amount, usually a ratio or interval scale.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[float] = field(
        default=None,
        metadata={
            "required": True,
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        },
    )


class NilReasonEnumerationValue(Enum):
    INAPPLICABLE = "inapplicable"
    MISSING = "missing"
    TEMPLATE = "template"
    UNKNOWN = "unknown"
    WITHHELD = "withheld"


class RelatedTimeTypeRelativePosition(Enum):
    BEFORE = "Before"
    AFTER = "After"
    BEGINS = "Begins"
    ENDS = "Ends"
    DURING = "During"
    EQUALS = "Equals"
    CONTAINS = "Contains"
    OVERLAPS = "Overlaps"
    MEETS = "Meets"
    OVERLAPPED_BY = "OverlappedBy"
    MET_BY = "MetBy"
    BEGUN_BY = "BegunBy"
    ENDED_BY = "EndedBy"


class SequenceRuleEnumeration(Enum):
    LINEAR = "Linear"
    BOUSTROPHEDONIC = "Boustrophedonic"
    CANTOR_DIAGONAL = "Cantor-diagonal"
    SPIRAL = "Spiral"
    MORTON = "Morton"
    HILBERT = "Hilbert"


class SignType(Enum):
    """
    Gml:SignType is a convenience type with values "+" (plus) and "-" (minus).
    """

    HYPHEN_MINUS = "-"
    PLUS_SIGN = "+"


class SurfaceInterpolationType(Enum):
    """
    Gml:SurfaceInterpolationType is a list of codes that may be used to identify
    the interpolation mechanisms specified by an application schema.
    """

    NONE = "none"
    PLANAR = "planar"
    SPHERICAL = "spherical"
    ELLIPTICAL = "elliptical"
    CONIC = "conic"
    TIN = "tin"
    PARAMETRIC_CURVE = "parametricCurve"
    POLYNOMIAL_SPLINE = "polynomialSpline"
    RATIONAL_SPLINE = "rationalSpline"
    TRIANGULATED_SPLINE = "triangulatedSpline"


class TimeIndeterminateValueType(Enum):
    """These values are interpreted as follows:
    -	"unknown" indicates that no specific value for temporal position is provided.
    -	"now" indicates that the specified value shall be replaced with the current temporal position whenever the value is accessed.
    -	"before" indicates that the actual temporal position is unknown, but it is known to be before the specified value.
    -	"after" indicates that the actual temporal position is unknown, but it is known to be after the specified value.
    A value for indeterminatePosition may
    -	be used either alone, or
    -	qualify a specific value for temporal position."""

    AFTER = "after"
    BEFORE = "before"
    NOW = "now"
    UNKNOWN = "unknown"


class TimeUnitTypeValue(Enum):
    YEAR = "year"
    MONTH = "month"
    DAY = "day"
    HOUR = "hour"
    MINUTE = "minute"
    SECOND = "second"


@dataclass
class UnitOfMeasureType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        },
    )


@dataclass
class AssociationName:
    class Meta:
        name = "associationName"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class BooleanValue:
    """Gml:booleanValue is a boolean value of an operation parameter.

    A Boolean value does not have an associated unit of measure.
    """

    class Meta:
        name = "booleanValue"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[bool] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class DecimalMinutes:
    class Meta:
        name = "decimalMinutes"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[Decimal] = field(
        default=None,
        metadata={
            "required": True,
            "min_inclusive": Decimal("0.00"),
            "max_exclusive": Decimal("60.00"),
        },
    )


@dataclass
class DefaultCodeSpace:
    class Meta:
        name = "defaultCodeSpace"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class Duration:
    """
    Gml:duration conforms to the ISO 8601 syntax for temporal length as implemented
    by the XML Schema duration type.
    """

    class Meta:
        name = "duration"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class GmlProfileSchema:
    class Meta:
        name = "gmlProfileSchema"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class IntegerValue:
    """Gml:integerValue is a positive integer value of an operation parameter,
    usually used for a count.

    An integer value does not have an associated unit of measure.
    """

    class Meta:
        name = "integerValue"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class IntegerValueList:
    """Gml:integerValueList is an ordered sequence of two or more integer values of
    an operation parameter list, usually used for counts.

    These integer values do not have an associated unit of measure. An
    element of this type contains a space-separated sequence of integer
    values.
    """

    class Meta:
        name = "integerValueList"
        namespace = "http://www.opengis.net/gml/3.2"

    value: list[int] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        },
    )


@dataclass
class MaximumOccurs:
    """Gml:maximumOccurs is the maximum number of times that values for this
    parameter group may be included.

    If this attribute is omitted, the maximum number shall be one.
    """

    class Meta:
        name = "maximumOccurs"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MaximumValue:
    """The gml:minimumValue and gml:maximumValue properties allow the specification
    of minimum and maximum value normally allowed for this axis, in the unit of
    measure for the axis.

    For a continuous angular axis such as longitude, the values wrap-
    around at this value. Also, values beyond this minimum/maximum can
    be used for specified purposes, such as in a bounding box. A value
    of minus infinity shall be allowed for the gml:minimumValue element,
    a value of plus infiniy for the gml:maximumValue element. If these
    elements are omitted, the value is unspecified.
    """

    class Meta:
        name = "maximumValue"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[float] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MinimumOccurs:
    """Gml:minimumOccurs is the minimum number of times that values for this
    parameter group or parameter are required.

    If this attribute is omitted, the minimum number shall be one.
    """

    class Meta:
        name = "minimumOccurs"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MinimumValue:
    """The gml:minimumValue and gml:maximumValue properties allow the specification
    of minimum and maximum value normally allowed for this axis, in the unit of
    measure for the axis.

    For a continuous angular axis such as longitude, the values wrap-
    around at this value. Also, values beyond this minimum/maximum can
    be used for specified purposes, such as in a bounding box. A value
    of minus infinity shall be allowed for the gml:minimumValue element,
    a value of plus infiniy for the gml:maximumValue element. If these
    elements are omitted, the value is unspecified.
    """

    class Meta:
        name = "minimumValue"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[float] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Minutes:
    class Meta:
        name = "minutes"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
            "max_inclusive": 59,
        },
    )


@dataclass
class ModifiedCoordinate:
    """
    Gml:modifiedCoordinate is a positive integer defining a position in a
    coordinate tuple.
    """

    class Meta:
        name = "modifiedCoordinate"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class OperationVersion:
    """Gml:operationVersion is the version of the coordinate transformation (i.e.,
    instantiation due to the stochastic nature of the parameters).

    Mandatory when describing a transformation, and should not be
    supplied for a conversion.
    """

    class Meta:
        name = "operationVersion"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class Origin:
    """
    Gml:origin is the date and time origin of this temporal datum.
    """

    class Meta:
        name = "origin"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class RealizationEpoch:
    """Gml:realizationEpoch is the time after which this datum definition is valid.

    See ISO 19111 Table 32 for details.
    """

    class Meta:
        name = "realizationEpoch"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[XmlDate] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class Remarks:
    class Meta:
        name = "remarks"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class ReversePropertyName:
    """If the value of an object property is another object and that object
    contains also a property for the association between the two objects, then this
    name of the reverse property may be encoded in a gml:reversePropertyName
    element in an appinfo annotation of the property element to document the
    constraint between the two properties.

    The value of the element shall contain the qualified name of the
    property element.
    """

    class Meta:
        name = "reversePropertyName"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class Scope:
    """The gml:scope property provides a description of the usage, or limitations
    of usage, for which this CRS-related object is valid.

    If unknown, enter "not known".
    """

    class Meta:
        name = "scope"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class Seconds:
    class Meta:
        name = "seconds"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[Decimal] = field(
        default=None,
        metadata={
            "required": True,
            "min_inclusive": Decimal("0.00"),
            "max_exclusive": Decimal("60.00"),
        },
    )


@dataclass
class SourceDimensions:
    """
    Gml:sourceDimensions is the number of dimensions in the source CRS of this
    operation method.
    """

    class Meta:
        name = "sourceDimensions"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class StringValue:
    """Gml:stringValue is a character string value of an operation parameter.

    A string value does not have an associated unit of measure.
    """

    class Meta:
        name = "stringValue"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class TargetDimensions:
    """
    Gml:targetDimensions is the number of dimensions in the target CRS of this
    operation method.
    """

    class Meta:
        name = "targetDimensions"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class TargetElement:
    class Meta:
        name = "targetElement"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


@dataclass
class ValueFile:
    """Gml:valueFile is a reference to a file or a part of a file containing one or
    more parameter values, each numeric value with its associated unit of measure.

    When referencing a part of a file, that file shall contain multiple
    identified parts, such as an XML encoded document. Furthermore, the
    referenced file or part of a file may reference another part of the
    same or different files, as allowed in XML documents.
    """

    class Meta:
        name = "valueFile"
        namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )


class ActuateValue(Enum):
    """
    Enumeration of values for the actuate attribute.
    """

    ON_LOAD = "onLoad"
    ON_REQUEST = "onRequest"
    OTHER = "other"
    NONE = "none"


class ShowValue(Enum):
    """
    Enumeration of values for the show attribute.
    """

    NEW = "new"
    REPLACE = "replace"
    EMBED = "embed"
    OTHER = "other"
    NONE = "none"


class TypeValue(Enum):
    """
    Enumeration of values for the type attribute.
    """

    SIMPLE = "simple"
    EXTENDED = "extended"
    LOCATOR = "locator"
    ARC = "arc"
    RESOURCE = "resource"
    TITLE = "title"


class LangValue(Enum):
    VALUE = ""


class DataQualityTypeList(Enum):
    """
    A list of values to indicate the level of reliability of the data.

    :cvar VALID: The data was validated and is considered to be true and
        correct.
    :cvar INVALID: Indicates that at least some part of the content is
        known to be incorrect.
    """

    VALID = "Valid"
    INVALID = "Invalid"


class AddressTypeList(Enum):
    """
    A list of types of addresses.
    """

    AIRPORT = "Airport"
    BUSINESS = "Business"
    CARAVAN_PARK = "CaravanPark"
    COMMERCIAL_PARK = "CommercialPark"
    COMMUNITY_DEVELOPMENT = "CommunityDevelopment"
    EDUCATIONAL_INSTITUTION = "EducationalInstitution"
    ENTERTAINMENT = "Entertainment"
    HOSPITAL = "Hospital"
    LOCATION = "Location"
    MARINA = "Marina"
    MILITARY_BASE = "MilitaryBase"
    OVERSEAS_MILITARY = "OverseasMilitary"
    PORT = "Port"
    PRIMARY = "Primary"
    RECREATIONAL_PARK = "RecreationalPark"
    RESORT = "Resort"
    RETIREMENT_VILLAGE = "RetirementVillage"
    RURAL = "Rural"
    SECONDARY = "Secondary"
    SHOPPING_CENTRE = "ShoppingCentre"
    SPORTING_CENTRE = "SportingCentre"
    URBAN = "Urban"


class AddressUsageList(Enum):
    """
    A list of types of usage of the address.
    """

    BUSINESS = "Business"
    BILLING = "Billing"
    COMMUNICATION = "Communication"
    CONTACT = "Contact"
    MAILING = "Mailing"
    PERSONAL = "Personal"
    POSTAL = "Postal"
    RESIDENTIAL = "Residential"


class AdministrativeAreaNameTypeList(Enum):
    """
    A list of administrative area name element types.

    :cvar NAME: Name of the administrative area
    :cvar NUMBER:
    :cvar REFERENCE_LOCATION: Reference location information in support
        of the administrative area. e.g. Territory of France
    :cvar TYPE: Other supporting information
    """

    NAME = "Name"
    NUMBER = "Number"
    REFERENCE_LOCATION = "ReferenceLocation"
    TYPE = "Type"


class AdministrativeAreaTypeList(Enum):
    """
    A list of administrative area types.

    :cvar CITY: Only name of the administrative area without its type,
        e.g. NSW, CA, Quebec
    :cvar STATE: The type of the area, e.g. state, district, province,
        etc.
    :cvar TERRITORY:
    :cvar PROVINCE:
    """

    CITY = "City"
    STATE = "State"
    TERRITORY = "Territory"
    PROVINCE = "Province"


class CountryNameTypeList(Enum):
    """
    A list of country name element types.

    :cvar NAME: Name of the country  e.g. AUSTRALIA
    :cvar TYPE: Although a Country, could be classified as a territory
        of a country. For example, "NOUVELLE CALEDONIE" is a territory
        of "FRANCE".
    """

    NAME = "Name"
    TYPE = "Type"


class DirectionTypeList(Enum):
    """
    A list of directions for geo-coordinates.
    """

    EAST = "East"
    WEST = "West"
    NORTH = "North"
    SOUTH = "South"


class IdentifierElementTypeList(Enum):
    """
    A list of name types for commonly used Number type.

    :cvar NAME: Applicable to mail box office names such as PO BOX, GPO
        BOX, MAIL BAG NO., etc.
    :cvar RANGE_FROM: Indicates that the element contains the lower
        value of a range, e.g. 25 in 25-37
    :cvar RANGE: Indicates that the value is a range, e.g. 25-37
    :cvar RANGE_TO: Indicates that the element contains the top value of
        a range, e.g. 25 in 25-37
    :cvar PREFIX: Indocates that the element contains some value that is
        important, but not exactly the number itself. E.g. PoBox can be
        a prefix in PoBox 2020, street no. A-15, where A is the prefix
        and 15 is the number
    :cvar SUFFIX: Indicates that the element contains some value that is
        important, but not exactly the number itself. E.g. 'bis' in '45
        bis'
    :cvar NUMBER: Indicates that the value is number, e.g. 2020 in PoBox
        2020. The actual value can be alpha-numeric.
    :cvar SEPARATOR: Indicates that the value is a separator that is
        expected to be preserved. Examples are / - #, as in 15-A where
        "-" is the separator
    :cvar EXTENSION: Indicates that the value is an extension number of
        some identifier, e.g. 01 in Private Bag 2330-01, where the main
        number of the private bag is 2330, 12345-1223 in post code where
        1223 is the extension
    """

    NAME = "Name"
    RANGE_FROM = "RangeFrom"
    RANGE = "Range"
    RANGE_TO = "RangeTo"
    PREFIX = "Prefix"
    SUFFIX = "Suffix"
    NUMBER = "Number"
    SEPARATOR = "Separator"
    EXTENSION = "Extension"


class LocalityNameTypeList(Enum):
    """
    A list of locality name element types such as name of locality, reference data
    in support of locality.

    :cvar NAME: Name of the locality
    :cvar NUMBER:
    :cvar REFERENCE_LOCATION: Any reference locality data in support of
        the locality. e.g. Next town north of Town A, via-town name
    :cvar TYPE: Other supporting information
    """

    NAME = "Name"
    NUMBER = "Number"
    REFERENCE_LOCATION = "ReferenceLocation"
    TYPE = "Type"


class LocalityTypeList(Enum):
    """
    A list of locality name types such as Municipality, Village, Area, etc.
    """

    MUNICIPALITY = "Municipality"
    POST_TOWN = "PostTown"
    PLACE = "Place"
    SUBURB = "Suburb"
    TOWN = "Town"
    VILLAGE = "Village"
    AREA = "Area"
    ZONE = "Zone"


class PostalDeliveryPointTypeList(Enum):
    """
    A list of postal delivery point types.
    """

    GPOBOX = "GPOBox"
    POBOX = "POBox"
    LOCKED_BAG = "LockedBag"
    MAIL_STOP = "MailStop"
    PIGEON_HOLE = "PigeonHole"
    PRIVATE_BAG = "PrivateBag"


class PremisesElementTypeList(Enum):
    """
    A list of name types for premises.

    :cvar NAME: Names of Premises such as airport, hospital, university,
        military base, etc. Can also be the name of the building or
        house or apartment
    :cvar LOCATION: Where in the building/landmark the premises is
        located, e.g. lobby, ground floor, penthouse, or where in a
        larger complex (e.g. airport) the address is located.
    :cvar SUB_PREMISES_CONNECTOR: Free text description that is required
        to logically connect the 2 premises
    :cvar INTERNAL_THOROUGHFARE: Roads and streets within boundaries of
        larger complexes/premises such as hospitals, airports, etc.
    :cvar REFERENCE_LOCATION: Free text description of some other
        location and how this premises relates to it, e.g. 300m from
        water station, new the police station, etc.
    :cvar TYPE: additional supporting information
    """

    NAME = "Name"
    LOCATION = "Location"
    SUB_PREMISES_CONNECTOR = "SubPremisesConnector"
    INTERNAL_THOROUGHFARE = "InternalThoroughfare"
    REFERENCE_LOCATION = "ReferenceLocation"
    TYPE = "Type"


class PremisesTypeList(Enum):
    """
    A list of premises type.
    """

    AIRPORT = "Airport"
    AREA = "Area"
    BUILDING = "Building"
    FARM = "Farm"
    HOSPITAL = "Hospital"
    HOUSE = "House"
    LAND_MARK = "LandMark"
    LARGE_MAIL_USER = "LargeMailUser"
    LOT = "Lot"
    RAILWAY_STATION = "RailwayStation"
    SHOPPING_COMPLEX = "ShoppingComplex"
    UNIVERSITY = "University"
    UNIT = "Unit"


class SubAdministrativeAreaNameTypeList(Enum):
    """
    A list of sub administrative area name element types.

    :cvar NAME: Name of the sub administrative area
    :cvar NUMBER:
    :cvar REFERENCE_LOCATION: Reference location information in support
        of the sub administrative area.
    :cvar TYPE: Other supporting information
    """

    NAME = "Name"
    NUMBER = "Number"
    REFERENCE_LOCATION = "ReferenceLocation"
    TYPE = "Type"


class SubAdministrativeAreaTypeList(Enum):
    """
    A list of sub administrative area name types.
    """

    COUNTY = "County"
    DISTRICT = "District"
    PROVINCE = "Province"
    REGION = "Region"


class SubLocalityNameTypeList(Enum):
    """
    A list of sub locality name element types.

    :cvar NAME:
    :cvar NUMBER:
    :cvar REFERENCE_LOCATION:
    :cvar TYPE: Other supporting information
    """

    NAME = "Name"
    NUMBER = "Number"
    REFERENCE_LOCATION = "ReferenceLocation"
    TYPE = "Type"


class SubLocalityTypeList(Enum):
    """
    A ist of sublocality types.
    """

    MUNICIPALITY = "Municipality"
    VILLAGE = "Village"


class SubPremisesTypeList(Enum):
    """
    A list of sub premises types.
    """

    ROOM = "Room"
    SUITE = "Suite"
    APARTMENT = "Apartment"
    SHOP = "Shop"
    OFFICE = "Office"
    UNIT = "Unit"


class ThoroughfareNameTypeList(Enum):
    """
    A list of name element types for thoroughfare.

    :cvar NAME_ONLY: Just the name part, such as Baker in Baker Street.
    :cvar PRE_DIRECTION: North Archer Street, where "North" is
        PreDirection
    :cvar POST_DIRECTION: Archer Street North, where "North" is
        PostDirection
    :cvar NAME_AND_NUMBER: This value indicates that the element
        contains the street name and street number. E.g. 39 Baker
        Street. Use this when you do not want to break the thoroughfare
        into atomic types
    :cvar NAME_AND_TYPE: Baker Street, where Baker is Name and Street is
        Type
    :cvar NAME_NUMBER_AND_TYPE: 21 Archer Street (Full thoroughfare
        details)
    :cvar UNSTRUCTURED: Full details of a thorughfare in a single line
        (unstructured) e.g. 39 Baker Street North
    :cvar SUB_THOROUGHFARE_CONNECTOR: When more than one street name is
        required to identify the location this type can be used to
        connect them with values such as CORNER OF or VIA.
    :cvar REFERENCE_LOCATION: Free text description of some other
        location and how this thoroughfare relates to it, e.g. 300m from
        water station, new the police station, etc.
    :cvar TYPE: Additional description like intersection, cross streets,
        etc
    """

    NAME_ONLY = "NameOnly"
    PRE_DIRECTION = "PreDirection"
    POST_DIRECTION = "PostDirection"
    NAME_AND_NUMBER = "NameAndNumber"
    NAME_AND_TYPE = "NameAndType"
    NAME_NUMBER_AND_TYPE = "NameNumberAndType"
    UNSTRUCTURED = "Unstructured"
    SUB_THOROUGHFARE_CONNECTOR = "SubThoroughfareConnector"
    REFERENCE_LOCATION = "ReferenceLocation"
    TYPE = "Type"


@dataclass
class AbstractGenericName(CodeType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class AbstractObject2(AbstractObjectType):
    class Meta:
        name = "AbstractObject"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class Binary(BinaryType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class BooleanPropertyType2:
    class Meta:
        name = "Boolean_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    boolean: Optional[Boolean2] = field(
        default=None,
        metadata={
            "name": "Boolean",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DateTimePropertyType:
    class Meta:
        name = "DateTime_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    date_time: Optional[DateTime] = field(
        default=None,
        metadata={
            "name": "DateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DatePropertyType:
    class Meta:
        name = "Date_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    date: Optional[Date] = field(
        default=None,
        metadata={
            "name": "Date",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "nillable": True,
        },
    )
    date_time: Optional[DateTime] = field(
        default=None,
        metadata={
            "name": "DateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DecimalPropertyType:
    class Meta:
        name = "Decimal_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    decimal: Optional[DecimalType] = field(
        default=None,
        metadata={
            "name": "Decimal",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class IntegerPropertyType:
    class Meta:
        name = "Integer_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    integer: Optional[Integer] = field(
        default=None,
        metadata={
            "name": "Integer",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LocalName(CodeType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class Measure1(MeasureType):
    class Meta:
        name = "Measure"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class NumberPropertyType:
    class Meta:
        name = "Number_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    real: Optional[Real] = field(
        default=None,
        metadata={
            "name": "Real",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    decimal: Optional[DecimalType] = field(
        default=None,
        metadata={
            "name": "Decimal",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    integer: Optional[Integer] = field(
        default=None,
        metadata={
            "name": "Integer",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ObjectReferencePropertyType:
    """
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "ObjectReference_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RealPropertyType:
    class Meta:
        name = "Real_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    real: Optional[Real] = field(
        default=None,
        metadata={
            "name": "Real",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RecordTypeType:
    """
    :ivar value:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    """

    class Meta:
        name = "RecordType_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


@dataclass
class RecordPropertyType:
    """
    :ivar record:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "Record_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    record: Optional[Record] = field(
        default=None,
        metadata={
            "name": "Record",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ScopedName(CodeType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class UnlimitedInteger(UnlimitedIntegerType):
    class Meta:
        nillable = True
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class AbstractDqResultType(AbstractObjectType):
    class Meta:
        name = "AbstractDQ_Result_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractMdContentInformationType(AbstractObjectType):
    class Meta:
        name = "AbstractMD_ContentInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractMdSpatialRepresentationType(AbstractObjectType):
    """
    Digital mechanism used to represent spatial information.
    """

    class Meta:
        name = "AbstractMD_SpatialRepresentation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiDateTypeCode(CodeListValueType):
    class Meta:
        name = "CI_DateTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiOnLineFunctionCode(CodeListValueType):
    class Meta:
        name = "CI_OnLineFunctionCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiPresentationFormCode(CodeListValueType):
    class Meta:
        name = "CI_PresentationFormCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiRoleCode(CodeListValueType):
    class Meta:
        name = "CI_RoleCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class Country(CodeListValueType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqEvaluationMethodTypeCode(CodeListValueType):
    class Meta:
        name = "DQ_EvaluationMethodTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsAssociationTypeCode(CodeListValueType):
    class Meta:
        name = "DS_AssociationTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsAssociationType(AbstractObjectType):
    class Meta:
        name = "DS_Association_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsInitiativeTypeCode(CodeListValueType):
    class Meta:
        name = "DS_InitiativeTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class LanguageCode(CodeListValueType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class LocalisedCharacterString(LocalisedCharacterStringType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdCellGeometryCode(CodeListValueType):
    class Meta:
        name = "MD_CellGeometryCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdCharacterSetCode(CodeListValueType):
    class Meta:
        name = "MD_CharacterSetCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdClassificationCode(CodeListValueType):
    class Meta:
        name = "MD_ClassificationCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdCoverageContentTypeCode(CodeListValueType):
    class Meta:
        name = "MD_CoverageContentTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDatatypeCode(CodeListValueType):
    class Meta:
        name = "MD_DatatypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDimensionNameTypeCode(CodeListValueType):
    class Meta:
        name = "MD_DimensionNameTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDistributionUnits(CodeListValueType):
    class Meta:
        name = "MD_DistributionUnits"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdGeometricObjectTypeCode(CodeListValueType):
    class Meta:
        name = "MD_GeometricObjectTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdImagingConditionCode(CodeListValueType):
    class Meta:
        name = "MD_ImagingConditionCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdKeywordTypeCode(CodeListValueType):
    class Meta:
        name = "MD_KeywordTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMaintenanceFrequencyCode(CodeListValueType):
    class Meta:
        name = "MD_MaintenanceFrequencyCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMediumFormatCode(CodeListValueType):
    class Meta:
        name = "MD_MediumFormatCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMediumNameCode(CodeListValueType):
    class Meta:
        name = "MD_MediumNameCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdObligationCode:
    class Meta:
        name = "MD_ObligationCode"
        namespace = "http://www.isotc211.org/2005/gmd"

    value: Optional[MdObligationCodeType] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MdPixelOrientationCode:
    class Meta:
        name = "MD_PixelOrientationCode"
        namespace = "http://www.isotc211.org/2005/gmd"

    value: Optional[MdPixelOrientationCodeType] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MdProgressCode(CodeListValueType):
    class Meta:
        name = "MD_ProgressCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdRestrictionCode(CodeListValueType):
    class Meta:
        name = "MD_RestrictionCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdScopeCode(CodeListValueType):
    class Meta:
        name = "MD_ScopeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdSpatialRepresentationTypeCode(CodeListValueType):
    class Meta:
        name = "MD_SpatialRepresentationTypeCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdTopicCategoryCode:
    class Meta:
        name = "MD_TopicCategoryCode"
        namespace = "http://www.isotc211.org/2005/gmd"

    value: Optional[MdTopicCategoryCodeType] = field(
        default=None,
        metadata={
            "required": True,
        },
    )


@dataclass
class MdTopologyLevelCode(CodeListValueType):
    class Meta:
        name = "MD_TopologyLevelCode"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class RsReferenceSystemPropertyType:
    """
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "RS_ReferenceSystem_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UrlPropertyType:
    class Meta:
        name = "URL_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    url: Optional[Url] = field(
        default=None,
        metadata={
            "name": "URL",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ScCrsPropertyType:
    """
    :ivar compound_crs:
    :ivar geocentric_crs:
    :ivar geographic_crs:
    :ivar temporal_crs:
    :ivar image_crs:
    :ivar engineering_crs:
    :ivar vertical_crs:
    :ivar geodetic_crs:
    :ivar derived_crs:
    :ivar projected_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "SC_CRS_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gsr"

    compound_crs: Optional["CompoundCrs"] = field(
        default=None,
        metadata={
            "name": "CompoundCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geocentric_crs: Optional["GeocentricCrs"] = field(
        default=None,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geographic_crs: Optional["GeographicCrs"] = field(
        default=None,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_crs: Optional["TemporalCrs"] = field(
        default=None,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_crs: Optional["ImageCrs"] = field(
        default=None,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_crs: Optional["EngineeringCrs"] = field(
        default=None,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_crs: Optional["VerticalCrs"] = field(
        default=None,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_crs: Optional["GeodeticCrs"] = field(
        default=None,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_crs: Optional["DerivedCrs"] = field(
        default=None,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    projected_crs: Optional["ProjectedCrs"] = field(
        default=None,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class TmPeriodDurationPropertyType:
    class Meta:
        name = "TM_PeriodDuration_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gts"

    tm_period_duration: Optional[TmPeriodDuration] = field(
        default=None,
        metadata={
            "name": "TM_PeriodDuration",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gts",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AdeofAbstractAppearance(AdeofAbstractAppearanceType):
    """
    ADEOfAbstractAppearance acts as a hook to define properties within an ADE that
    are to be added to AbstractAppearance.
    """

    class Meta:
        name = "ADEOfAbstractAppearance"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractCityObject(AdeofAbstractCityObjectType):
    """
    ADEOfAbstractCityObject acts as a hook to define properties within an ADE that
    are to be added to AbstractCityObject.
    """

    class Meta:
        name = "ADEOfAbstractCityObject"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractDynamizer(AdeofAbstractDynamizerType):
    """
    ADEOfAbstractDynamizer acts as a hook to define properties within an ADE that
    are to be added to AbstractDynamizer.
    """

    class Meta:
        name = "ADEOfAbstractDynamizer"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractFeature(AdeofAbstractFeatureType):
    """
    ADEOfAbstractFeature acts as a hook to define properties within an ADE that are
    to be added to AbstractFeature.
    """

    class Meta:
        name = "ADEOfAbstractFeature"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractFeatureWithLifespan(AdeofAbstractFeatureWithLifespanType):
    """
    ADEOfAbstractFeatureWithLifespan acts as a hook to define properties within an
    ADE that are to be added to AbstractFeatureWithLifespan.
    """

    class Meta:
        name = "ADEOfAbstractFeatureWithLifespan"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractLogicalSpace(AdeofAbstractLogicalSpaceType):
    """
    ADEOfAbstractLogicalSpace acts as a hook to define properties within an ADE
    that are to be added to AbstractLogicalSpace.
    """

    class Meta:
        name = "ADEOfAbstractLogicalSpace"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractOccupiedSpace(AdeofAbstractOccupiedSpaceType):
    """
    ADEOfAbstractOccupiedSpace acts as a hook to define properties within an ADE
    that are to be added to AbstractOccupiedSpace.
    """

    class Meta:
        name = "ADEOfAbstractOccupiedSpace"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractPhysicalSpace(AdeofAbstractPhysicalSpaceType):
    """
    ADEOfAbstractPhysicalSpace acts as a hook to define properties within an ADE
    that are to be added to AbstractPhysicalSpace.
    """

    class Meta:
        name = "ADEOfAbstractPhysicalSpace"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractPointCloud(AdeofAbstractPointCloudType):
    """
    ADEOfAbstractPointCloud acts as a hook to define properties within an ADE that
    are to be added to AbstractPointCloud.
    """

    class Meta:
        name = "ADEOfAbstractPointCloud"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractSpace(AdeofAbstractSpaceType):
    """
    ADEOfAbstractSpace acts as a hook to define properties within an ADE that are
    to be added to AbstractSpace.
    """

    class Meta:
        name = "ADEOfAbstractSpace"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractSpaceBoundary(AdeofAbstractSpaceBoundaryType):
    """
    ADEOfAbstractSpaceBoundary acts as a hook to define properties within an ADE
    that are to be added to AbstractSpaceBoundary.
    """

    class Meta:
        name = "ADEOfAbstractSpaceBoundary"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractThematicSurface(AdeofAbstractThematicSurfaceType):
    """
    ADEOfAbstractThematicSurface acts as a hook to define properties within an ADE
    that are to be added to AbstractThematicSurface.
    """

    class Meta:
        name = "ADEOfAbstractThematicSurface"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractUnoccupiedSpace(AdeofAbstractUnoccupiedSpaceType):
    """
    ADEOfAbstractUnoccupiedSpace acts as a hook to define properties within an ADE
    that are to be added to AbstractUnoccupiedSpace.
    """

    class Meta:
        name = "ADEOfAbstractUnoccupiedSpace"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractVersion(AdeofAbstractVersionType):
    """
    ADEOfAbstractVersion acts as a hook to define properties within an ADE that are
    to be added to AbstractVersion.
    """

    class Meta:
        name = "ADEOfAbstractVersion"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAbstractVersionTransition(AdeofAbstractVersionTransitionType):
    """
    ADEOfAbstractVersionTransition acts as a hook to define properties within an
    ADE that are to be added to AbstractVersionTransition.
    """

    class Meta:
        name = "ADEOfAbstractVersionTransition"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofAddress(AdeofAddressType):
    """
    ADEOfAddress acts as a hook to define properties within an ADE that are to be
    added to an Address.
    """

    class Meta:
        name = "ADEOfAddress"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofCityModel(AdeofCityModelType):
    """
    ADEOfCityModel acts as a hook to define properties within an ADE that are to be
    added to a CityModel.
    """

    class Meta:
        name = "ADEOfCityModel"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AdeofClosureSurface(AdeofClosureSurfaceType):
    """
    ADEOfClosureSurface acts as a hook to define properties within an ADE that are
    to be added to a ClosureSurface.
    """

    class Meta:
        name = "ADEOfClosureSurface"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractGenericAttribute(AbstractGenericAttributeType):
    """
    AbstractGenericAttribute is the abstract superclass for all types of generic
    attributes.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class ExternalReference(ExternalReferenceType):
    """
    ExternalReference is a reference to a corresponding object in another
    information system, for example in the German cadastre (ALKIS), the German
    topographic information system (ATKIS), or the OS UK MasterMap®.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class OccupancyType:
    """
    :ivar number_of_occupants: Indicates the number of occupants
        contained by a feature.
    :ivar interval: Indicates the time period the occupants are
        contained by a feature.
    :ivar occupant_type: Indicates the specific type of the occupants
        that are contained by a feature.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    number_of_occupants: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfOccupants",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )
    interval: Optional[CodeType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    occupant_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "occupantType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class AdeofAbstractSurfaceData(AdeofAbstractSurfaceDataType):
    """
    ADEOfAbstractSurfaceData acts as a hook to define properties within an ADE that
    are to be added to AbstractSurfaceData.
    """

    class Meta:
        name = "ADEOfAbstractSurfaceData"
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofAbstractTexture(AdeofAbstractTextureType):
    """
    ADEOfAbstractTexture acts as a hook to define properties within an ADE that are
    to be added to AbstractTexture.
    """

    class Meta:
        name = "ADEOfAbstractTexture"
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofAppearance(AdeofAppearanceType):
    """
    ADEOfAppearance acts as a hook to define properties within an ADE that are to
    be added to an Appearance.
    """

    class Meta:
        name = "ADEOfAppearance"
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofGeoreferencedTexture(AdeofGeoreferencedTextureType):
    """
    ADEOfGeoreferencedTexture acts as a hook to define properties within an ADE
    that are to be added to a GeoreferencedTexture.
    """

    class Meta:
        name = "ADEOfGeoreferencedTexture"
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofParameterizedTexture(AdeofParameterizedTextureType):
    """
    ADEOfParameterizedTexture acts as a hook to define properties within an ADE
    that are to be added to a ParameterizedTexture.
    """

    class Meta:
        name = "ADEOfParameterizedTexture"
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AdeofX3Dmaterial(AdeofX3DmaterialType):
    """
    ADEOfX3DMaterial acts as a hook to define properties within an ADE that are to
    be added to an X3DMaterial.
    """

    class Meta:
        name = "ADEOfX3DMaterial"
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AbstractTextureParameterization(AbstractTextureParameterizationType):
    """
    AbstractTextureParameterization is the abstract superclass for different kinds
    of texture parameterizations.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class TexCoordGenType(AbstractTextureParameterizationType):
    """
    :ivar world_to_texture: Specifies the 3x4 transformation matrix that
        defines the transformation between world coordinates and texture
        coordinates.
    :ivar srs_name:
    :ivar srs_dimension:
    :ivar axis_labels:
    :ivar uom_labels:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    world_to_texture: list[float] = field(
        default_factory=list,
        metadata={
            "name": "worldToTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "length": 12,
            "tokens": True,
        },
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        },
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        },
    )
    axis_labels: list[str] = field(
        default_factory=list,
        metadata={
            "name": "axisLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )
    uom_labels: list[str] = field(
        default_factory=list,
        metadata={
            "name": "uomLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )


@dataclass
class TexCoordListType(AbstractTextureParameterizationType):
    """
    :ivar texture_coordinates: Specifies the coordinates of texture used
        for parameterization. The texture coordinates are provided
        separately for each LinearRing of the surface geometry object.
    :ivar ring: Specifies the URIs that point to the LinearRings that
        are parameterized using the given texture coordinates.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    texture_coordinates: list[list[float]] = field(
        default_factory=list,
        metadata={
            "name": "textureCoordinates",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "min_occurs": 1,
            "tokens": True,
        },
    )
    ring: list[str] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "min_occurs": 1,
        },
    )


@dataclass
class AdeofAbstractBridge(AdeofAbstractBridgeType):
    """
    ADEOfAbstractBridge acts as a hook to define properties within an ADE that are
    to be added to AbstractBridge.
    """

    class Meta:
        name = "ADEOfAbstractBridge"
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridge(AdeofBridgeType):
    """
    ADEOfBridge acts as a hook to define properties within an ADE that are to be
    added to a Bridge.
    """

    class Meta:
        name = "ADEOfBridge"
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeConstructiveElement(AdeofBridgeConstructiveElementType):
    """
    ADEOfBridgeConstructiveElement acts as a hook to define properties within an
    ADE that are to be added to a BridgeConstructiveElement.
    """

    class Meta:
        name = "ADEOfBridgeConstructiveElement"
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeFurniture(AdeofBridgeFurnitureType):
    """
    ADEOfBridgeFurniture acts as a hook to define properties within an ADE that are
    to be added to a BridgeFurniture.
    """

    class Meta:
        name = "ADEOfBridgeFurniture"
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeInstallation(AdeofBridgeInstallationType):
    """
    ADEOfBridgeInstallation acts as a hook to define properties within an ADE that
    are to be added to a BridgeInstallation.
    """

    class Meta:
        name = "ADEOfBridgeInstallation"
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgePart(AdeofBridgePartType):
    """
    ADEOfBridgePart acts as a hook to define properties within an ADE that are to
    be added to a BridgePart.
    """

    class Meta:
        name = "ADEOfBridgePart"
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofBridgeRoom(AdeofBridgeRoomType):
    """
    ADEOfBridgeRoom acts as a hook to define properties within an ADE that are to
    be added to a BridgeRoom.
    """

    class Meta:
        name = "ADEOfBridgeRoom"
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class AdeofAbstractBuilding(AdeofAbstractBuildingType):
    """
    ADEOfAbstractBuilding acts as a hook to define properties within an ADE that
    are to be added to AbstractBuilding.
    """

    class Meta:
        name = "ADEOfAbstractBuilding"
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofAbstractBuildingSubdivision(AdeofAbstractBuildingSubdivisionType):
    """
    ADEOfAbstractBuildingSubdivision acts as a hook to define properties within an
    ADE that are to be added to AbstractBuildingSubdivision.
    """

    class Meta:
        name = "ADEOfAbstractBuildingSubdivision"
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuilding(AdeofBuildingType):
    """
    ADEOfBuilding acts as a hook to define properties within an ADE that are to be
    added to a Building.
    """

    class Meta:
        name = "ADEOfBuilding"
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingConstructiveElement(AdeofBuildingConstructiveElementType):
    """
    ADEOfBuildingConstructiveElement acts as a hook to define properties within an
    ADE that are to be added to a BuildingConstructiveElement.
    """

    class Meta:
        name = "ADEOfBuildingConstructiveElement"
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingFurniture(AdeofBuildingFurnitureType):
    """
    ADEOfBuildingFurniture acts as a hook to define properties within an ADE that
    are to be added to a BuildingFurniture.
    """

    class Meta:
        name = "ADEOfBuildingFurniture"
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingInstallation(AdeofBuildingInstallationType):
    """
    ADEOfBuildingInstallation acts as a hook to define properties within an ADE
    that are to be added to a BuildingInstallation.
    """

    class Meta:
        name = "ADEOfBuildingInstallation"
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingPart(AdeofBuildingPartType):
    """
    ADEOfBuildingPart acts as a hook to define properties within an ADE that are to
    be added to a BuildingPart.
    """

    class Meta:
        name = "ADEOfBuildingPart"
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingRoom(AdeofBuildingRoomType):
    """
    ADEOfBuildingRoom acts as a hook to define properties within an ADE that are to
    be added to a BuildingRoom.
    """

    class Meta:
        name = "ADEOfBuildingRoom"
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofBuildingUnit(AdeofBuildingUnitType):
    """
    ADEOfBuildingUnit acts as a hook to define properties within an ADE that are to
    be added to a BuildingUnit.
    """

    class Meta:
        name = "ADEOfBuildingUnit"
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofStorey(AdeofStoreyType):
    """
    ADEOfStorey acts as a hook to define properties within an ADE that are to be
    added to a Storey.
    """

    class Meta:
        name = "ADEOfStorey"
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AdeofCityFurniture(AdeofCityFurnitureType):
    """
    ADEOfCityFurniture acts as a hook to define properties within an ADE that are
    to be added to a CityFurniture.
    """

    class Meta:
        name = "ADEOfCityFurniture"
        namespace = "http://www.opengis.net/citygml/cityfurniture/3.0"


@dataclass
class AdeofCityObjectGroup(AdeofCityObjectGroupType):
    """
    ADEOfCityObjectGroup acts as a hook to define properties within an ADE that are
    to be added to a CityObjectGroup.
    """

    class Meta:
        name = "ADEOfCityObjectGroup"
        namespace = "http://www.opengis.net/citygml/cityobjectgroup/3.0"


@dataclass
class AdeofAbstractConstruction(AdeofAbstractConstructionType):
    """
    ADEOfAbstractConstruction acts as a hook to define properties within an ADE
    that are to be added to AbstractConstruction.
    """

    class Meta:
        name = "ADEOfAbstractConstruction"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractConstructionSurface(AdeofAbstractConstructionSurfaceType):
    """
    ADEOfAbstractConstructionSurface acts as a hook to define properties within an
    ADE that are to be added to AbstractConstructionSurface.
    """

    class Meta:
        name = "ADEOfAbstractConstructionSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractConstructiveElement(AdeofAbstractConstructiveElementType):
    """
    ADEOfAbstractConstructiveElement acts as a hook to define properties within an
    ADE that are to be added to AbstractConstructiveElement.
    """

    class Meta:
        name = "ADEOfAbstractConstructiveElement"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractFillingElement(AdeofAbstractFillingElementType):
    """
    ADEOfAbstractFillingElement acts as a hook to define properties within an ADE
    that are to be added to AbstractFillingElement.
    """

    class Meta:
        name = "ADEOfAbstractFillingElement"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractFillingSurface(AdeofAbstractFillingSurfaceType):
    """
    ADEOfAbstractFillingSurface acts as a hook to define properties within an ADE
    that are to be added to AbstractFillingSurface.
    """

    class Meta:
        name = "ADEOfAbstractFillingSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractFurniture(AdeofAbstractFurnitureType):
    """
    ADEOfAbstractFurniture acts as a hook to define properties within an ADE that
    are to be added to AbstractFurniture.
    """

    class Meta:
        name = "ADEOfAbstractFurniture"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofAbstractInstallation(AdeofAbstractInstallationType):
    """
    ADEOfAbstractInstallation acts as a hook to define properties within an ADE
    that are to be added to AbstractInstallation.
    """

    class Meta:
        name = "ADEOfAbstractInstallation"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofCeilingSurface(AdeofCeilingSurfaceType):
    """
    ADEOfCeilingSurface acts as a hook to define properties within an ADE that are
    to be added to a CeilingSurface.
    """

    class Meta:
        name = "ADEOfCeilingSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofDoor(AdeofDoorType):
    """
    ADEOfDoor acts as a hook to define properties within an ADE that are to be
    added to a Door.
    """

    class Meta:
        name = "ADEOfDoor"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofDoorSurface(AdeofDoorSurfaceType):
    """
    ADEOfDoorSurface acts as a hook to define properties within an ADE that are to
    be added to a DoorSurface.
    """

    class Meta:
        name = "ADEOfDoorSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofFloorSurface(AdeofFloorSurfaceType):
    """
    ADEOfFloorSurface acts as a hook to define properties within an ADE that are to
    be added to a FloorSurface.
    """

    class Meta:
        name = "ADEOfFloorSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofGroundSurface(AdeofGroundSurfaceType):
    """
    ADEOfGroundSurface acts as a hook to define properties within an ADE that are
    to be added to a GroundSurface.
    """

    class Meta:
        name = "ADEOfGroundSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofInteriorWallSurface(AdeofInteriorWallSurfaceType):
    """
    ADEOfInteriorWallSurface acts as a hook to define properties within an ADE that
    are to be added to an InteriorWallSurface.
    """

    class Meta:
        name = "ADEOfInteriorWallSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofOtherConstruction(AdeofOtherConstructionType):
    """
    ADEOfOtherConstruction acts as a hook to define properties within an ADE that
    are to be added to an OtherConstruction.
    """

    class Meta:
        name = "ADEOfOtherConstruction"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofOuterCeilingSurface(AdeofOuterCeilingSurfaceType):
    """
    ADEOfOuterCeilingSurface acts as a hook to define properties within an ADE that
    are to be added to an OuterCeilingSurface.
    """

    class Meta:
        name = "ADEOfOuterCeilingSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofOuterFloorSurface(AdeofOuterFloorSurfaceType):
    """
    ADEOfOuterFloorSurface acts as a hook to define properties within an ADE that
    are to be added to an OuterFloorSurface.
    """

    class Meta:
        name = "ADEOfOuterFloorSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofRoofSurface(AdeofRoofSurfaceType):
    """
    ADEOfRoofSurface acts as a hook to define properties within an ADE that are to
    be added to a RoofSurface.
    """

    class Meta:
        name = "ADEOfRoofSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofWallSurface(AdeofWallSurfaceType):
    """
    ADEOfWallSurface acts as a hook to define properties within an ADE that are to
    be added to a WallSurface.
    """

    class Meta:
        name = "ADEOfWallSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofWindow(AdeofWindowType):
    """
    ADEOfWindow acts as a hook to define properties within an ADE that are to be
    added to a Window.
    """

    class Meta:
        name = "ADEOfWindow"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AdeofWindowSurface(AdeofWindowSurfaceType):
    """
    ADEOfWindowSurface acts as a hook to define properties within an ADE that are
    to be added to a WindowSurface.
    """

    class Meta:
        name = "ADEOfWindowSurface"
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class ConstructionEventType:
    """
    :ivar event: Indicates the specific event type.
    :ivar date_of_event: Specifies the date at which the event took or
        will take place.
    :ivar description: Provides additional information on the event.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    event: Optional[CodeType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "required": True,
        },
    )
    date_of_event: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "dateOfEvent",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "required": True,
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class ElevationType:
    """
    :ivar elevation_reference: Specifies the level from which the
        elevation was measured. [cf. INSPIRE]
    :ivar elevation_value: Specifies the value of the elevation. [cf.
        INSPIRE]
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    elevation_reference: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "elevationReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "required": True,
        },
    )
    elevation_value: Optional[DirectPositionType] = field(
        default=None,
        metadata={
            "name": "elevationValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "required": True,
        },
    )


@dataclass
class AdeofAbstractAtomicTimeseries(AdeofAbstractAtomicTimeseriesType):
    """
    ADEOfAbstractAtomicTimeseries acts as a hook to define properties within an ADE
    that are to be added to AbstractAtomicTimeseries.
    """

    class Meta:
        name = "ADEOfAbstractAtomicTimeseries"
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofAbstractTimeseries(AdeofAbstractTimeseriesType):
    """
    ADEOfAbstractTimeseries acts as a hook to define properties within an ADE that
    are to be added to AbstractTimeseries.
    """

    class Meta:
        name = "ADEOfAbstractTimeseries"
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofCompositeTimeseries(AdeofCompositeTimeseriesType):
    """
    ADEOfCompositeTimeseries acts as a hook to define properties within an ADE that
    are to be added to a CompositeTimeseries.
    """

    class Meta:
        name = "ADEOfCompositeTimeseries"
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofDynamizer(AdeofDynamizerType):
    """
    ADEOfDynamizer acts as a hook to define properties within an ADE that are to be
    added to a Dynamizer.
    """

    class Meta:
        name = "ADEOfDynamizer"
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofGenericTimeseries(AdeofGenericTimeseriesType):
    """
    ADEOfGenericTimeseries acts as a hook to define properties within an ADE that
    are to be added to a GenericTimeseries.
    """

    class Meta:
        name = "ADEOfGenericTimeseries"
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofStandardFileTimeseries(AdeofStandardFileTimeseriesType):
    """
    ADEOfStandardFileTimeseries acts as a hook to define properties within an ADE
    that are to be added to a StandardFileTimeseries.
    """

    class Meta:
        name = "ADEOfStandardFileTimeseries"
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofTabulatedFileTimeseries(AdeofTabulatedFileTimeseriesType):
    """
    ADEOfTabulatedFileTimeseries acts as a hook to define properties within an ADE
    that are to be added to a TabulatedFileTimeseries.
    """

    class Meta:
        name = "ADEOfTabulatedFileTimeseries"
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AdeofGenericLogicalSpace(AdeofGenericLogicalSpaceType):
    """
    ADEOfGenericLogicalSpace acts as a hook to define properties within an ADE that
    are to be added to a GenericLogicalSpace.
    """

    class Meta:
        name = "ADEOfGenericLogicalSpace"
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AdeofGenericOccupiedSpace(AdeofGenericOccupiedSpaceType):
    """
    ADEOfGenericOccupiedSpace acts as a hook to define properties within an ADE
    that are to be added to a GenericOccupiedSpace.
    """

    class Meta:
        name = "ADEOfGenericOccupiedSpace"
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AdeofGenericThematicSurface(AdeofGenericThematicSurfaceType):
    """
    ADEOfGenericThematicSurface acts as a hook to define properties within an ADE
    that are to be added to a GenericThematicSurface.
    """

    class Meta:
        name = "ADEOfGenericThematicSurface"
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AdeofGenericUnoccupiedSpace(AdeofGenericUnoccupiedSpaceType):
    """
    ADEOfGenericUnoccupiedSpace acts as a hook to define properties within an ADE
    that are to be added to a GenericUnoccupiedSpace.
    """

    class Meta:
        name = "ADEOfGenericUnoccupiedSpace"
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class CodeAttributeType(AbstractGenericAttributeType):
    """
    :ivar name: Specifies the name of the CodeAttribute.
    :ivar value: Specifies the "Code" value.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )
    value: Optional[CodeType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class DateAttributeType(AbstractGenericAttributeType):
    """
    :ivar name: Specifies the name of the DateAttribute.
    :ivar value: Specifies the "Date" value.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )
    value: Optional[XmlDate] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class DoubleAttributeType(AbstractGenericAttributeType):
    """
    :ivar name: Specifies the name of the DoubleAttribute.
    :ivar value: Specifies the "Double" value.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )
    value: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class IntAttributeType(AbstractGenericAttributeType):
    """
    :ivar name: Specifies the name of the IntAttribute.
    :ivar value: Specifies the "Integer" value.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )
    value: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class MeasureAttributeType(AbstractGenericAttributeType):
    """
    :ivar name: Specifies the name of the MeasureAttribute.
    :ivar value: Specifies the value of the MeasureAttribute. The value
        is of type "Measure", which can additionally provide the units
        of measure. [cf. ISO 19103]
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )
    value: Optional[MeasureType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class StringAttributeType(AbstractGenericAttributeType):
    """
    :ivar name: Specifies the name of the StringAttribute.
    :ivar value: Specifies the "String" value.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )
    value: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class UriAttributeType(AbstractGenericAttributeType):
    """
    :ivar name: Specifies the name of the UriAttribute.
    :ivar value: Specifies the "URI" value.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )
    value: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class AdeofLandUse(AdeofLandUseType):
    """
    ADEOfLandUse acts as a hook to define properties within an ADE that are to be
    added to a LandUse.
    """

    class Meta:
        name = "ADEOfLandUse"
        namespace = "http://www.opengis.net/citygml/landuse/3.0"


@dataclass
class AdeofPointCloud(AdeofPointCloudType):
    """
    ADEOfPointCloud acts as a hook to define properties within an ADE that are to
    be added to a PointCloud.
    """

    class Meta:
        name = "ADEOfPointCloud"
        namespace = "http://www.opengis.net/citygml/pointcloud/3.0"


@dataclass
class AdeofAbstractReliefComponent(AdeofAbstractReliefComponentType):
    """
    ADEOfAbstractReliefComponent acts as a hook to define properties within an ADE
    that are to be added to AbstractReliefComponent.
    """

    class Meta:
        name = "ADEOfAbstractReliefComponent"
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofBreaklineRelief(AdeofBreaklineReliefType):
    """
    ADEOfBreaklineRelief acts as a hook to define properties within an ADE that are
    to be added to a BreaklineRelief.
    """

    class Meta:
        name = "ADEOfBreaklineRelief"
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofMassPointRelief(AdeofMassPointReliefType):
    """
    ADEOfMassPointRelief acts as a hook to define properties within an ADE that are
    to be added to a MassPointRelief.
    """

    class Meta:
        name = "ADEOfMassPointRelief"
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofRasterRelief(AdeofRasterReliefType):
    """
    ADEOfRasterRelief acts as a hook to define properties within an ADE that are to
    be added to a RasterRelief.
    """

    class Meta:
        name = "ADEOfRasterRelief"
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofReliefFeature(AdeofReliefFeatureType):
    """
    ADEOfReliefFeature acts as a hook to define properties within an ADE that are
    to be added to a ReliefFeature.
    """

    class Meta:
        name = "ADEOfReliefFeature"
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofTinrelief(AdeofTinreliefType):
    """
    ADEOfTINRelief acts as a hook to define properties within an ADE that are to be
    added to a TINRelief.
    """

    class Meta:
        name = "ADEOfTINRelief"
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AdeofAbstractTransportationSpace(AdeofAbstractTransportationSpaceType):
    """
    ADEOfAbstractTransportationSpace acts as a hook to define properties within an
    ADE that are to be added to AbstractTransportationSpace.
    """

    class Meta:
        name = "ADEOfAbstractTransportationSpace"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofAuxiliaryTrafficArea(AdeofAuxiliaryTrafficAreaType):
    """
    ADEOfAuxiliaryTrafficArea acts as a hook to define properties within an ADE
    that are to be added to an AuxiliaryTrafficArea.
    """

    class Meta:
        name = "ADEOfAuxiliaryTrafficArea"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofAuxiliaryTrafficSpace(AdeofAuxiliaryTrafficSpaceType):
    """
    ADEOfAuxiliaryTrafficSpace acts as a hook to define properties within an ADE
    that are to be added to an AuxiliaryTrafficSpace.
    """

    class Meta:
        name = "ADEOfAuxiliaryTrafficSpace"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofClearanceSpace(AdeofClearanceSpaceType):
    """
    ADEOfClearanceSpace acts as a hook to define properties within an ADE that are
    to be added to a ClearanceSpace.
    """

    class Meta:
        name = "ADEOfClearanceSpace"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofHole(AdeofHoleType):
    """
    ADEOfHole acts as a hook to define properties within an ADE that are to be
    added to a Hole.
    """

    class Meta:
        name = "ADEOfHole"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofHoleSurface(AdeofHoleSurfaceType):
    """
    ADEOfHoleSurface acts as a hook to define properties within an ADE that are to
    be added to a HoleSurface.
    """

    class Meta:
        name = "ADEOfHoleSurface"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofIntersection(AdeofIntersectionType):
    """
    ADEOfIntersection acts as a hook to define properties within an ADE that are to
    be added to an Intersection.
    """

    class Meta:
        name = "ADEOfIntersection"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofMarking(AdeofMarkingType):
    """
    ADEOfMarking acts as a hook to define properties within an ADE that are to be
    added to a Marking.
    """

    class Meta:
        name = "ADEOfMarking"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofRailway(AdeofRailwayType):
    """
    ADEOfRailway acts as a hook to define properties within an ADE that are to be
    added to a Railway.
    """

    class Meta:
        name = "ADEOfRailway"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofRoad(AdeofRoadType):
    """
    ADEOfRoad acts as a hook to define properties within an ADE that are to be
    added to a Road.
    """

    class Meta:
        name = "ADEOfRoad"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofSection(AdeofSectionType):
    """
    ADEOfSection acts as a hook to define properties within an ADE that are to be
    added to a Section.
    """

    class Meta:
        name = "ADEOfSection"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofSquare(AdeofSquareType):
    """
    ADEOfSquare acts as a hook to define properties within an ADE that are to be
    added to a Square.
    """

    class Meta:
        name = "ADEOfSquare"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofTrack(AdeofTrackType):
    """
    ADEOfTrack acts as a hook to define properties within an ADE that are to be
    added to a Track.
    """

    class Meta:
        name = "ADEOfTrack"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofTrafficArea(AdeofTrafficAreaType):
    """
    ADEOfTrafficArea acts as a hook to define properties within an ADE that are to
    be added to a TrafficArea.
    """

    class Meta:
        name = "ADEOfTrafficArea"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofTrafficSpace(AdeofTrafficSpaceType):
    """
    ADEOfTrafficSpace acts as a hook to define properties within an ADE that are to
    be added to a TrafficSpace.
    """

    class Meta:
        name = "ADEOfTrafficSpace"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofWaterway(AdeofWaterwayType):
    """
    ADEOfWaterway acts as a hook to define properties within an ADE that are to be
    added to a Waterway.
    """

    class Meta:
        name = "ADEOfWaterway"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AdeofAbstractTunnel(AdeofAbstractTunnelType):
    """
    ADEOfAbstractTunnel acts as a hook to define properties within an ADE that are
    to be added to AbstractTunnel.
    """

    class Meta:
        name = "ADEOfAbstractTunnel"
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofHollowSpace(AdeofHollowSpaceType):
    """
    ADEOfHollowSpace acts as a hook to define properties within an ADE that are to
    be added to a HollowSpace.
    """

    class Meta:
        name = "ADEOfHollowSpace"
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnel(AdeofTunnelType):
    """
    ADEOfTunnel acts as a hook to define properties within an ADE that are to be
    added to a Tunnel.
    """

    class Meta:
        name = "ADEOfTunnel"
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelConstructiveElement(AdeofTunnelConstructiveElementType):
    """
    ADEOfTunnelConstructiveElement acts as a hook to define properties within an
    ADE that are to be added to a TunnelConstructiveElement.
    """

    class Meta:
        name = "ADEOfTunnelConstructiveElement"
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelFurniture(AdeofTunnelFurnitureType):
    """
    ADEOfTunnelFurniture acts as a hook to define properties within an ADE that are
    to be added to a TunnelFurniture.
    """

    class Meta:
        name = "ADEOfTunnelFurniture"
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelInstallation(AdeofTunnelInstallationType):
    """
    ADEOfTunnelInstallation acts as a hook to define properties within an ADE that
    are to be added to a TunnelInstallation.
    """

    class Meta:
        name = "ADEOfTunnelInstallation"
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofTunnelPart(AdeofTunnelPartType):
    """
    ADEOfTunnelPart acts as a hook to define properties within an ADE that are to
    be added to a TunnelPart.
    """

    class Meta:
        name = "ADEOfTunnelPart"
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AdeofAbstractVegetationObject(AdeofAbstractVegetationObjectType):
    """
    ADEOfAbstractVegetationObject acts as a hook to define properties within an ADE
    that are to be added to AbstractVegetationObject.
    """

    class Meta:
        name = "ADEOfAbstractVegetationObject"
        namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class AdeofPlantCover(AdeofPlantCoverType):
    """
    ADEOfPlantCover acts as a hook to define properties within an ADE that are to
    be added to a PlantCover.
    """

    class Meta:
        name = "ADEOfPlantCover"
        namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class AdeofSolitaryVegetationObject(AdeofSolitaryVegetationObjectType):
    """
    ADEOfSolitaryVegetationObject acts as a hook to define properties within an ADE
    that are to be added to a SolitaryVegetationObject.
    """

    class Meta:
        name = "ADEOfSolitaryVegetationObject"
        namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class AdeofVersion(AdeofVersionType):
    """
    ADEOfVersion acts as a hook to define properties within an ADE that are to be
    added to a Version.
    """

    class Meta:
        name = "ADEOfVersion"
        namespace = "http://www.opengis.net/citygml/versioning/3.0"


@dataclass
class AdeofVersionTransition(AdeofVersionTransitionType):
    """
    ADEOfVersionTransition acts as a hook to define properties within an ADE that
    are to be added to a VersionTransition.
    """

    class Meta:
        name = "ADEOfVersionTransition"
        namespace = "http://www.opengis.net/citygml/versioning/3.0"


@dataclass
class AdeofAbstractWaterBoundarySurface(AdeofAbstractWaterBoundarySurfaceType):
    """
    ADEOfAbstractWaterBoundarySurface acts as a hook to define properties within an
    ADE that are to be added to AbstractWaterBoundarySurface.
    """

    class Meta:
        name = "ADEOfAbstractWaterBoundarySurface"
        namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AdeofWaterBody(AdeofWaterBodyType):
    """
    ADEOfWaterBody acts as a hook to define properties within an ADE that are to be
    added to a WaterBody.
    """

    class Meta:
        name = "ADEOfWaterBody"
        namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AdeofWaterGroundSurface(AdeofWaterGroundSurfaceType):
    """
    ADEOfWaterGroundSurface acts as a hook to define properties within an ADE that
    are to be added to a WaterGroundSurface.
    """

    class Meta:
        name = "ADEOfWaterGroundSurface"
        namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AdeofWaterSurface(AdeofWaterSurfaceType):
    """
    ADEOfWaterSurface acts as a hook to define properties within an ADE that are to
    be added to a WaterSurface.
    """

    class Meta:
        name = "ADEOfWaterSurface"
        namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AbstractCurveSegment(AbstractCurveSegmentType):
    """A curve segment defines a homogeneous segment of a curve.

    The attributes numDerivativesAtStart, numDerivativesAtEnd and
    numDerivativesInterior specify the type of continuity as specified
    in ISO 19107:2003, 6.4.9.3. The AbstractCurveSegment element is the
    abstract head of the substituition group for all curve segment
    elements, i.e. continuous segments of the same interpolation
    mechanism. All curve segments shall have an attribute interpolation
    with type gml:CurveInterpolationType specifying the curve
    interpolation mechanism used for this segment. This mechanism uses
    the control points and control parameters to determine the position
    of this curve segment.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeneralParameterValue(AbstractGeneralParameterValueType):
    """Gml:AbstractGeneralParameterValue is an abstract parameter value or group of
    parameter values.

    This abstract complexType is expected to be extended and restricted for well-known operation methods with many instances, in Application Schemas that define operation-method-specialized element names and contents. Specific parameter value elements are directly contained in concrete subtypes, not in this abstract type. All concrete types derived from this type shall extend this type to include one "...Value" element with an appropriate type, which should be one of the element types allowed in the ParameterValueType. In addition, all derived concrete types shall extend this type to include a "operationParameter" property element that references one element substitutable for the "OperationParameter" object element.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractMetaData(AbstractMetaDataType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractParametricCurveSurfaceType(AbstractSurfacePatchType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class AbstractSurfacePatch(AbstractSurfacePatchType):
    """A surface patch defines a homogenuous portion of a surface.

    The AbstractSurfacePatch element is the abstract head of the
    substituition group for all surface patch elements describing a
    continuous portion of a surface. All surface patches shall have an
    attribute interpolation (declared in the types derived from
    gml:AbstractSurfacePatchType) specifying the interpolation mechanism
    used for the patch using gml:SurfaceInterpolationType.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AngleType(MeasureType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AreaType(MeasureType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AssociationRoleType:
    """
    :ivar any_element:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class BooleanList:
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    value: list[Union[str, NilReasonEnumerationValue]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )


@dataclass
class Boolean1:
    class Meta:
        name = "Boolean"
        nillable = True
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[bool] = field(
        default=None,
        metadata={
            "nillable": True,
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Category(CodeType):
    """
    A gml:Category has an optional XML attribute codeSpace, whose value is a URI
    which identifies a dictionary, codelist or authority for the term.
    """

    class Meta:
        nillable = True
        namespace = "http://www.opengis.net/gml/3.2"

    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CodeOrNilReasonListType:
    """Gml:CodeOrNilReasonListType provides for lists of terms.

    The values in an instance element shall all be valid according to
    the rules of the dictionary, classification scheme, or authority
    identified by the value of its codeSpace attribute. An instance
    element may also include embedded values from NilReasonType. It is
    intended to be used in situations where a term or classification is
    expected, but the value may be absent for some reason.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: list[Union[str, NilReasonEnumerationValue]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )


@dataclass
class CodeWithAuthorityType(CodeType):
    """
    Gml:CodeWithAuthorityType requires that the codeSpace attribute is provided in
    an instance.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class ConversionToPreferredUnitType(UnitOfMeasureType):
    """The inherited attribute uom references the preferred unit that this
    conversion applies to. The conversion of a unit to the preferred unit for this
    physical quantity type is specified by an arithmetic conversion (scaling and/or
    offset). The content model extends gml:UnitOfMeasureType, which has a mandatory
    attribute uom which identifies the preferred unit for the physical quantity
    type that this conversion applies to. The conversion is specified by a choice
    of.

    -       gml:factor, which defines the scale factor, or
    -       gml:formula, which defines a formula
    by which a value using the conventional unit of measure can be converted to obtain the corresponding value using the preferred unit of measure.
    The formula defines the parameters of a simple formula by which a value using the conventional unit of measure can be converted to the corresponding value using the preferred unit of measure. The formula element contains elements a, b, c and d, whose values use the XML Schema type double. These values are used in the formula y = (a + bx) / (c + dx), where x is a value using this unit, and y is the corresponding value using the base unit. The elements a and d are optional, and if values are not provided, those parameters are considered to be zero. If values are not provided for both a and d, the formula is equivalent to a fraction with numerator and denominator parameters.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    factor: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    formula: Optional[FormulaType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Count:
    class Meta:
        nillable = True
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "nillable": True,
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CountExtent:
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    value: list[Union[str, NilReasonEnumerationValue]] = field(
        default_factory=list,
        metadata={
            "length": 2,
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )


@dataclass
class CountList:
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    value: list[Union[str, NilReasonEnumerationValue]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )


@dataclass
class DegreesType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
            "max_inclusive": 359,
        },
    )
    direction: Optional[DegreesTypeDirection] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DerivationUnitTermType(UnitOfMeasureType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exponent: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class FaceOrTopoSolidPropertyType:
    """
    :ivar face:
    :ivar topo_solid:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    face: Optional["Face"] = field(
        default=None,
        metadata={
            "name": "Face",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    topo_solid: Optional["TopoSolid"] = field(
        default=None,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GenericMetaDataType(AbstractMetaDataType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GridLengthType(MeasureType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GridLimitsType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    grid_envelope: Optional[GridEnvelopeType] = field(
        default=None,
        metadata={
            "name": "GridEnvelope",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class KnotPropertyType:
    """
    Gml:KnotPropertyType encapsulates a knot to use it in a geometric type.

    :ivar knot: A knot is a breakpoint on a piecewise spline curve.
        value is the value of the parameter at the knot of the spline
        (see ISO 19107:2003, 6.4.24.2). multiplicity is the multiplicity
        of this knot used in the definition of the spline (with the same
        weight). weight is the value of the averaging weight used for
        this knot of the spline.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    knot: Optional[KnotType] = field(
        default=None,
        metadata={
            "name": "Knot",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class LengthType(MeasureType):
    """This is a prototypical definition for a specific measure type defined as a
    vacuous extension (i.e. aliases) of gml:MeasureType.

    In this case, the content model supports the description of a length
    (or distance) quantity, with its units. The unit of measure
    referenced by uom shall be suitable for a length, such as metres or
    feet.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LocationKeyWord(CodeType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MeasureOrNilReasonListType:
    """Gml:MeasureOrNilReasonListType provides for a list of quantities.

    An instance element may also include embedded values from
    NilReasonType. It is intended to be used in situations where a value
    is expected, but the value may be absent for some reason.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: list[Union[str, NilReasonEnumerationValue]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        },
    )


@dataclass
class NodeOrEdgePropertyType:
    """
    :ivar node:
    :ivar edge:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    node: Optional["Node"] = field(
        default=None,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    edge: Optional["Edge"] = field(
        default=None,
        metadata={
            "name": "Edge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class NodePropertyType:
    """
    :ivar node:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    node: Optional["Node"] = field(
        default=None,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Null:
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"

    value: Union[str, NilReasonEnumerationValue] = field(
        default="",
        metadata={
            "required": True,
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Quantity(MeasureType):
    """
    An XML attribute uom ("unit of measure") is required, whose value is a URI
    which identifies the definition of a ratio scale or units by which the numeric
    value shall be multiplied, or an interval or position scale on which the value
    occurs.
    """

    class Meta:
        nillable = True
        namespace = "http://www.opengis.net/gml/3.2"

    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ReferenceType:
    """
    Gml:ReferenceType is intended to be used in application schemas directly, if a
    property element shall use a "by-reference only" encoding.

    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ResultType:
    """
    :ivar any_element:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ScaleType(MeasureType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SequenceRuleType:
    """The gml:SequenceRuleType is derived from the gml:SequenceRuleEnumeration
    through the addition of an axisOrder attribute.

    The gml:SequenceRuleEnumeration is an enumerated type. The rule
    names are defined in ISO 19123. If no rule name is specified the
    default is "Linear".
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[SequenceRuleEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        },
    )
    order: Optional[IncrementOrder] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    axis_order: list[str] = field(
        default_factory=list,
        metadata={
            "name": "axisOrder",
            "type": "Attribute",
            "pattern": r"[\+\-][1-9][0-9]*",
            "tokens": True,
        },
    )


@dataclass
class SpeedType(MeasureType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class StringOrRefType:
    """
    :ivar value:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeIntervalLengthType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[Decimal] = field(
        default=None,
        metadata={
            "required": True,
        },
    )
    unit: Optional[Union[str, TimeUnitTypeValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"other:\w{2,}",
        },
    )
    radix: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    factor: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimePositionType:
    """The method for identifying a temporal position is specific to each temporal
    reference system.

    gml:TimePositionType supports the description of temporal position
    according to the subtypes described in ISO 19108. Values based on
    calendars and clocks use lexical formats that are based on ISO 8601,
    as described in XML Schema Part 2:2001. A decimal value may be used
    with coordinate systems such as GPS time or UNIX time. A URI may be
    used to provide a reference to some era in an ordinal reference
    system . In common with many of the components modelled as data
    types in the ISO 19100 series of International Standards, the
    corresponding GML component has simple content. However, the content
    model gml:TimePositionType is defined in several steps. Three XML
    attributes appear on gml:TimePositionType: A time value shall be
    associated with a temporal reference system through the frame
    attribute that provides a URI reference that identifies a
    description of the reference system. Following ISO 19108, the
    Gregorian calendar with UTC is the default reference system, but
    others may also be used. Components for describing temporal
    reference systems are described in 14.4, but it is not required that
    the reference system be described in this, as the reference may
    refer to anything that may be indentified with a URI. For time
    values using a calendar containing more than one era, the (optional)
    calendarEraName attribute provides the name of the calendar era.
    Inexact temporal positions may be expressed using the optional
    indeterminatePosition attribute.  This takes a value from an
    enumeration.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Union[XmlDate, XmlPeriod, XmlTime, XmlDateTime, str, Decimal] = (
        field(default="")
    )
    frame: str = field(
        default="#ISO-8601",
        metadata={
            "type": "Attribute",
        },
    )
    calendar_era_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "calendarEraName",
            "type": "Attribute",
        },
    )
    indeterminate_position: Optional[TimeIndeterminateValueType] = field(
        default=None,
        metadata={
            "name": "indeterminatePosition",
            "type": "Attribute",
        },
    )


@dataclass
class TimeType(MeasureType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoSolidPropertyType:
    """
    :ivar topo_solid:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_solid: Optional["TopoSolid"] = field(
        default=None,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class VectorType(DirectPositionType):
    """
    For some applications the components of the position may be adjusted to yield a
    unit vector.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VolumeType(MeasureType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractInlineProperty(InlinePropertyType):
    """
    Gml:abstractInlineProperty may be used as the head of a subtitution group of
    more specific elements providing a value inline.
    """

    class Meta:
        name = "abstractInlineProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AnchorDefinition(CodeType):
    """Gml:anchorDefinition is a description, possibly including coordinates, of
    the definition used to anchor the datum to the Earth. Also known as the
    "origin", especially for engineering and image datums. The codeSpace attribute
    may be used to reference a source of more detailed on this point or surface, or
    on a set of such descriptions.

    -       For a geodetic datum, this point is also known as the fundamental point, which is traditionally the point where the relationship between geoid and ellipsoid is defined. In some cases, the "fundamental point" may consist of a number of points. In those cases, the parameters defining the geoid/ellipsoid relationship have been averaged for these points, and the averages adopted as the datum definition.
    -       For an engineering datum, the anchor definition may be a physical point, or it may be a point with defined coordinates in another CRS.may
    -       For an image datum, the anchor definition is usually either the centre of the image or the corner of the image.
    -       For a temporal datum, this attribute is not defined. Instead of the anchor definition, a temporal datum carries a separate time origin of type DateTime.
    """

    class Meta:
        name = "anchorDefinition"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AnchorPoint(CodeType):
    class Meta:
        name = "anchorPoint"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AxisAbbrev(CodeType):
    """Gml:axisAbbrev is the abbreviation used for this coordinate system axis;
    this abbreviation is also used to identify the coordinates in the coordinate
    tuple.

    The codeSpace attribute may reference a source of more information
    on a set of standardized abbreviations, or on this abbreviation.
    """

    class Meta:
        name = "axisAbbrev"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CatalogSymbol(CodeType):
    """The catalogSymbol is the preferred lexical symbol used for this unit of
    measure.

    The codeSpace attribute in gml:CodeType identifies a namespace for
    the catalog symbol value, and might reference the external catalog.
    The string value in gml:CodeType contains the value of a symbol that
    should be unique within this catalog namespace. This symbol often
    appears explicitly in the catalog, but it could be a combination of
    symbols using a specified algebra of units.
    """

    class Meta:
        name = "catalogSymbol"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Coordinates(CoordinatesType):
    class Meta:
        name = "coordinates"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DoubleOrNilReasonTupleList:
    """Gml:doubleOrNilReasonList consists of a list of gml:doubleOrNilReason
    values, each separated by a whitespace.

    The gml:doubleOrNilReason values are grouped into tuples where the
    dimension of each tuple in the list is equal to the number of range
    parameters.
    """

    class Meta:
        name = "doubleOrNilReasonTupleList"
        namespace = "http://www.opengis.net/gml/3.2"

    value: list[Union[str, NilReasonEnumerationValue]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        },
    )


@dataclass
class Formula(CodeType):
    """Gml:formula Formula(s) or procedure used by an operation method.

    The use of the codespace attribite has been deprecated. The property
    value shall be a character string.
    """

    class Meta:
        name = "formula"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LocationName(CodeType):
    """The gml:locationName property element is a convenience property where the
    text value describes the location of the feature.

    If the location names are selected from a controlled list, then the
    list shall be identified in the codeSpace attribute.
    """

    class Meta:
        name = "locationName"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Measure2(MeasureType):
    """
    The value of a physical quantity, together with its unit.
    """

    class Meta:
        name = "measure"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MethodFormula(CodeType):
    class Meta:
        name = "methodFormula"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Name(CodeType):
    """The gml:name property provides a label or identifier for the object,
    commonly a descriptive name.

    An object may have several names, typically assigned by different
    authorities. gml:name uses the gml:CodeType content model.  The
    authority for a name is indicated by the value of its (optional)
    codeSpace attribute.  The name may or may not be unique, as
    determined by the rules of the organization responsible for the
    codeSpace.  In common usage there will be one name per authority, so
    a processing application may select the name from its preferred
    codeSpace.
    """

    class Meta:
        name = "name"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Pos(DirectPositionType):
    class Meta:
        name = "pos"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PosList(DirectPositionListType):
    class Meta:
        name = "posList"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SemiMajorAxis(MeasureType):
    """Gml:semiMajorAxis specifies the length of the semi-major axis of the
    ellipsoid, with its units.

    Uses the MeasureType with the restriction that the unit of measure
    referenced by uom must be suitable for a length, such as metres or
    feet.
    """

    class Meta:
        name = "semiMajorAxis"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TupleList(CoordinatesType):
    """Gml:CoordinatesType consists of a list of coordinate tuples, with each
    coordinate tuple separated by the ts or tuple separator (whitespace), and each
    coordinate in the tuple by the cs or coordinate separator (comma).

    The gml:tupleList encoding is effectively "band-interleaved".
    """

    class Meta:
        name = "tupleList"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UnitOfMeasure(UnitOfMeasureType):
    """The element gml:unitOfMeasure is a property element to refer to a unit of
    measure.

    This is an empty element which carries a reference to a unit of
    measure definition.
    """

    class Meta:
        name = "unitOfMeasure"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Value(MeasureType):
    """
    Gml:value is a numeric value of an operation parameter, with its associated
    unit of measure.
    """

    class Meta:
        name = "value"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValueList(MeasureListType):
    """Gml:valueList is an ordered sequence of two or more numeric values of an
    operation parameter list, where each value has the same associated unit of
    measure.

    An element of this type contains a space-separated sequence of
    double values.
    """

    class Meta:
        name = "valueList"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcType2:
    """
    :ivar type_value: Enumeration of values for the type attribute
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar from_value:
    :ivar to: from and to have default behavior when values are missing
    """

    class Meta:
        name = "arcType"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeValue = field(
        init=False,
        default=TypeValue.ARC,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    from_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "from",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    to: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


@dataclass
class Extended:
    """Intended for use as the type of user-declared elements to make them extended
    links.

    Note that the elements referenced in the content model are all
    abstract. The intention is that by simply declaring elements with
    these as their substitutionGroup, all the right things will happen.

    :ivar type_value: Enumeration of values for the type attribute
    :ivar role: A URI with a minimum length of 1 character.
    :ivar title:
    """

    class Meta:
        name = "extended"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeValue = field(
        init=False,
        default=TypeValue.EXTENDED,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


@dataclass
class LocatorType:
    """
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar label: label is not required, but locators have no particular
        XLink function if they are not labeled.
    """

    class Meta:
        name = "locatorType"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeValue = field(
        init=False,
        default=TypeValue.LOCATOR,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    label: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )


@dataclass
class ResourceType:
    """
    :ivar type_value: Enumeration of values for the type attribute
    :ivar role: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar label:
    :ivar content:
    """

    class Meta:
        name = "resourceType"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeValue = field(
        init=False,
        default=TypeValue.RESOURCE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    label: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    content: list[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


@dataclass
class Simple:
    """
    Intended for use as the type of user-declared elements to make them simple
    links.

    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar content:
    """

    class Meta:
        name = "simple"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    content: list[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


@dataclass
class TitleEltType:
    """
    :ivar type_value: Enumeration of values for the type attribute
    :ivar lang: xml:lang is not required, but provides much of the
        motivation for title elements in addition to attributes, and so
        is provided here for convenience.
    :ivar content:
    """

    class Meta:
        name = "titleEltType"
        target_namespace = "http://www.w3.org/1999/xlink"

    type_value: TypeValue = field(
        init=False,
        default=TypeValue.TITLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "required": True,
        },
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        },
    )
    content: list[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        },
    )


@dataclass
class CountryType:
    """
    Complex type that defines the name of the country and is reused in other CIQ
    specs.

    :ivar name_element: Data associated with the name of the country in
        whatever form available, e.g. full, abbreviation, common use,
        code of the country, etc.
    :ivar other_attributes:
    """

    class Meta:
        target_namespace = "urn:oasis:names:tc:ciq:xal:3"

    name_element: list["CountryType.NameElement"] = field(
        default_factory=list,
        metadata={
            "name": "NameElement",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
            "min_occurs": 1,
        },
    )
    other_attributes: dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )

    @dataclass
    class NameElement:
        """
        :ivar value:
        :ivar abbreviation: If set to true then indicates that the value
            is an abbreviation or initial. If set to false then the
            value is definitely not an abbreviation. If omitted then it
            is not known if the value is an abbreviation or not.
        :ivar name_type: Semantics of data associated with name.
        :ivar name_code: Name of the country represented as a code
        :ivar name_code_type: Type of code used to represent name of
            country, e.g. iso-3166
        :ivar other_attributes:
        """

        value: str = field(
            default="",
            metadata={
                "required": True,
                "white_space": "collapse",
            },
        )
        abbreviation: Optional[bool] = field(
            default=None,
            metadata={
                "name": "Abbreviation",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        name_type: Optional[CountryNameTypeList] = field(
            default=None,
            metadata={
                "name": "NameType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        name_code: Optional[str] = field(
            default=None,
            metadata={
                "name": "NameCode",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        name_code_type: Optional[str] = field(
            default=None,
            metadata={
                "name": "NameCodeType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "white_space": "collapse",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )


@dataclass
class IdentifierType:
    """
    Complex type for internal reuse.

    :ivar value:
    :ivar type_value: Indicates which part of number or identifier this
        element contains. Some "numbers" are as simple as 42 and some
        "numbers" are more like complex aplhanumberic identifiers as
        Postcodes in UK or Canada, e.g. M2H 2S5. It may be necessary to
        separate the "number" into sub-elements and indicate what type
        of information each of them contains.
    :ivar abbreviation: If set to true then indicates that the value is
        an abbreviation or initial. If set to false then the value is
        definitely not an abbreviation. If omitted then it is not known
        if the value is an abbreviation or not.
    :ivar other_attributes:
    """

    class Meta:
        target_namespace = "urn:oasis:names:tc:ciq:xal:3"

    value: str = field(
        default="",
        metadata={
            "required": True,
            "white_space": "collapse",
        },
    )
    type_value: Optional[IdentifierElementTypeList] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    abbreviation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Abbreviation",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:ct:3",
        },
    )
    other_attributes: dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )


@dataclass
class Angle1(AngleType):
    class Meta:
        name = "Angle"
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class BinaryPropertyType:
    class Meta:
        name = "Binary_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    binary: Optional[Binary] = field(
        default=None,
        metadata={
            "name": "Binary",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CharacterStringPropertyType:
    class Meta:
        name = "CharacterString_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    country: Optional[Country] = field(
        default=None,
        metadata={
            "name": "Country",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    language_code: Optional[LanguageCode] = field(
        default=None,
        metadata={
            "name": "LanguageCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    localised_character_string: Optional[LocalisedCharacterString] = field(
        default=None,
        metadata={
            "name": "LocalisedCharacterString",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_evaluation_method_type_code: Optional[DqEvaluationMethodTypeCode] = (
        field(
            default=None,
            metadata={
                "name": "DQ_EvaluationMethodTypeCode",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    ds_initiative_type_code: Optional[DsInitiativeTypeCode] = field(
        default=None,
        metadata={
            "name": "DS_InitiativeTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_association_type_code: Optional[DsAssociationTypeCode] = field(
        default=None,
        metadata={
            "name": "DS_AssociationTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_keyword_type_code: Optional[MdKeywordTypeCode] = field(
        default=None,
        metadata={
            "name": "MD_KeywordTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_progress_code: Optional[MdProgressCode] = field(
        default=None,
        metadata={
            "name": "MD_ProgressCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_spatial_representation_type_code: Optional[
        MdSpatialRepresentationTypeCode
    ] = field(
        default=None,
        metadata={
            "name": "MD_SpatialRepresentationTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_character_set_code: Optional[MdCharacterSetCode] = field(
        default=None,
        metadata={
            "name": "MD_CharacterSetCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_topic_category_code: Optional[MdTopicCategoryCode] = field(
        default=None,
        metadata={
            "name": "MD_TopicCategoryCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_scope_code: Optional[MdScopeCode] = field(
        default=None,
        metadata={
            "name": "MD_ScopeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_maintenance_frequency_code: Optional[MdMaintenanceFrequencyCode] = (
        field(
            default=None,
            metadata={
                "name": "MD_MaintenanceFrequencyCode",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    md_medium_name_code: Optional[MdMediumNameCode] = field(
        default=None,
        metadata={
            "name": "MD_MediumNameCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_medium_format_code: Optional[MdMediumFormatCode] = field(
        default=None,
        metadata={
            "name": "MD_MediumFormatCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_distribution_units: Optional[MdDistributionUnits] = field(
        default=None,
        metadata={
            "name": "MD_DistributionUnits",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_restriction_code: Optional[MdRestrictionCode] = field(
        default=None,
        metadata={
            "name": "MD_RestrictionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_classification_code: Optional[MdClassificationCode] = field(
        default=None,
        metadata={
            "name": "MD_ClassificationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_imaging_condition_code: Optional[MdImagingConditionCode] = field(
        default=None,
        metadata={
            "name": "MD_ImagingConditionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_coverage_content_type_code: Optional[MdCoverageContentTypeCode] = field(
        default=None,
        metadata={
            "name": "MD_CoverageContentTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_datatype_code: Optional[MdDatatypeCode] = field(
        default=None,
        metadata={
            "name": "MD_DatatypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_obligation_code: Optional[MdObligationCode] = field(
        default=None,
        metadata={
            "name": "MD_ObligationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_dimension_name_type_code: Optional[MdDimensionNameTypeCode] = field(
        default=None,
        metadata={
            "name": "MD_DimensionNameTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_cell_geometry_code: Optional[MdCellGeometryCode] = field(
        default=None,
        metadata={
            "name": "MD_CellGeometryCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_geometric_object_type_code: Optional[MdGeometricObjectTypeCode] = field(
        default=None,
        metadata={
            "name": "MD_GeometricObjectTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_topology_level_code: Optional[MdTopologyLevelCode] = field(
        default=None,
        metadata={
            "name": "MD_TopologyLevelCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_pixel_orientation_code: Optional[MdPixelOrientationCode] = field(
        default=None,
        metadata={
            "name": "MD_PixelOrientationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ci_date_type_code: Optional[CiDateTypeCode] = field(
        default=None,
        metadata={
            "name": "CI_DateTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ci_on_line_function_code: Optional[CiOnLineFunctionCode] = field(
        default=None,
        metadata={
            "name": "CI_OnLineFunctionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ci_presentation_form_code: Optional[CiPresentationFormCode] = field(
        default=None,
        metadata={
            "name": "CI_PresentationFormCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ci_role_code: Optional[CiRoleCode] = field(
        default=None,
        metadata={
            "name": "CI_RoleCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    character_string: Optional[CharacterString] = field(
        default=None,
        metadata={
            "name": "CharacterString",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Distance(LengthType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class GenericNamePropertyType:
    class Meta:
        name = "GenericName_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    scoped_name: Optional[ScopedName] = field(
        default=None,
        metadata={
            "name": "ScopedName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    local_name: Optional[LocalName] = field(
        default=None,
        metadata={
            "name": "LocalName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Length(LengthType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class LocalNamePropertyType:
    class Meta:
        name = "LocalName_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    local_name: Optional[LocalName] = field(
        default=None,
        metadata={
            "name": "LocalName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RecordType(RecordTypeType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class Scale(ScaleType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class ScopedNamePropertyType:
    class Meta:
        name = "ScopedName_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    scoped_name: Optional[ScopedName] = field(
        default=None,
        metadata={
            "name": "ScopedName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UnlimitedIntegerPropertyType:
    class Meta:
        name = "UnlimitedInteger_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    unlimited_integer: Optional[UnlimitedInteger] = field(
        default=None,
        metadata={
            "name": "UnlimitedInteger",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "nillable": True,
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractDqResult(AbstractDqResultType):
    class Meta:
        name = "AbstractDQ_Result"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractExGeographicExtentType(AbstractObjectType):
    """
    Geographic area of the dataset.
    """

    class Meta:
        name = "AbstractEX_GeographicExtent_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    extent_type_code: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "extentTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class AbstractMdContentInformation(AbstractMdContentInformationType):
    class Meta:
        name = "AbstractMD_ContentInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractMdSpatialRepresentation(AbstractMdSpatialRepresentationType):
    class Meta:
        name = "AbstractMD_SpatialRepresentation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiDateTypeCodePropertyType:
    class Meta:
        name = "CI_DateTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_date_type_code: Optional[CiDateTypeCode] = field(
        default=None,
        metadata={
            "name": "CI_DateTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOnLineFunctionCodePropertyType:
    class Meta:
        name = "CI_OnLineFunctionCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_on_line_function_code: Optional[CiOnLineFunctionCode] = field(
        default=None,
        metadata={
            "name": "CI_OnLineFunctionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiPresentationFormCodePropertyType:
    class Meta:
        name = "CI_PresentationFormCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_presentation_form_code: Optional[CiPresentationFormCode] = field(
        default=None,
        metadata={
            "name": "CI_PresentationFormCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiRoleCodePropertyType:
    class Meta:
        name = "CI_RoleCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_role_code: Optional[CiRoleCode] = field(
        default=None,
        metadata={
            "name": "CI_RoleCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CountryPropertyType:
    class Meta:
        name = "Country_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    country: Optional[Country] = field(
        default=None,
        metadata={
            "name": "Country",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqEvaluationMethodTypeCodePropertyType:
    class Meta:
        name = "DQ_EvaluationMethodTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_evaluation_method_type_code: Optional[DqEvaluationMethodTypeCode] = (
        field(
            default=None,
            metadata={
                "name": "DQ_EvaluationMethodTypeCode",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsAssociation(DsAssociationType):
    class Meta:
        name = "DS_Association"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsAssociationTypeCodePropertyType:
    class Meta:
        name = "DS_AssociationTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_association_type_code: Optional[DsAssociationTypeCode] = field(
        default=None,
        metadata={
            "name": "DS_AssociationTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsInitiativeTypeCodePropertyType:
    class Meta:
        name = "DS_InitiativeTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_initiative_type_code: Optional[DsInitiativeTypeCode] = field(
        default=None,
        metadata={
            "name": "DS_InitiativeTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExVerticalExtentType(AbstractObjectType):
    """
    Vertical domain of dataset.
    """

    class Meta:
        name = "EX_VerticalExtent_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    minimum_value: Optional[RealPropertyType] = field(
        default=None,
        metadata={
            "name": "minimumValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    maximum_value: Optional[RealPropertyType] = field(
        default=None,
        metadata={
            "name": "maximumValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    vertical_crs: Optional[ScCrsPropertyType] = field(
        default=None,
        metadata={
            "name": "verticalCRS",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class LanguageCodePropertyType:
    class Meta:
        name = "LanguageCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    language_code: Optional[LanguageCode] = field(
        default=None,
        metadata={
            "name": "LanguageCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LocalisedCharacterStringPropertyType(ObjectReferencePropertyType):
    class Meta:
        name = "LocalisedCharacterString_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    localised_character_string: Optional[LocalisedCharacterString] = field(
        default=None,
        metadata={
            "name": "LocalisedCharacterString",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdCellGeometryCodePropertyType:
    class Meta:
        name = "MD_CellGeometryCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_cell_geometry_code: Optional[MdCellGeometryCode] = field(
        default=None,
        metadata={
            "name": "MD_CellGeometryCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdCharacterSetCodePropertyType:
    class Meta:
        name = "MD_CharacterSetCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_character_set_code: Optional[MdCharacterSetCode] = field(
        default=None,
        metadata={
            "name": "MD_CharacterSetCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdClassificationCodePropertyType:
    class Meta:
        name = "MD_ClassificationCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_classification_code: Optional[MdClassificationCode] = field(
        default=None,
        metadata={
            "name": "MD_ClassificationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdCoverageContentTypeCodePropertyType:
    class Meta:
        name = "MD_CoverageContentTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_coverage_content_type_code: Optional[MdCoverageContentTypeCode] = field(
        default=None,
        metadata={
            "name": "MD_CoverageContentTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDatatypeCodePropertyType:
    class Meta:
        name = "MD_DatatypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_datatype_code: Optional[MdDatatypeCode] = field(
        default=None,
        metadata={
            "name": "MD_DatatypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDimensionNameTypeCodePropertyType:
    class Meta:
        name = "MD_DimensionNameTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_dimension_name_type_code: Optional[MdDimensionNameTypeCode] = field(
        default=None,
        metadata={
            "name": "MD_DimensionNameTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDistributionUnitsPropertyType:
    class Meta:
        name = "MD_DistributionUnits_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_distribution_units: Optional[MdDistributionUnits] = field(
        default=None,
        metadata={
            "name": "MD_DistributionUnits",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGeometricObjectTypeCodePropertyType:
    class Meta:
        name = "MD_GeometricObjectTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_geometric_object_type_code: Optional[MdGeometricObjectTypeCode] = field(
        default=None,
        metadata={
            "name": "MD_GeometricObjectTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdImagingConditionCodePropertyType:
    class Meta:
        name = "MD_ImagingConditionCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_imaging_condition_code: Optional[MdImagingConditionCode] = field(
        default=None,
        metadata={
            "name": "MD_ImagingConditionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdKeywordTypeCodePropertyType:
    class Meta:
        name = "MD_KeywordTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_keyword_type_code: Optional[MdKeywordTypeCode] = field(
        default=None,
        metadata={
            "name": "MD_KeywordTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMaintenanceFrequencyCodePropertyType:
    class Meta:
        name = "MD_MaintenanceFrequencyCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_maintenance_frequency_code: Optional[MdMaintenanceFrequencyCode] = (
        field(
            default=None,
            metadata={
                "name": "MD_MaintenanceFrequencyCode",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMediumFormatCodePropertyType:
    class Meta:
        name = "MD_MediumFormatCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_medium_format_code: Optional[MdMediumFormatCode] = field(
        default=None,
        metadata={
            "name": "MD_MediumFormatCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMediumNameCodePropertyType:
    class Meta:
        name = "MD_MediumNameCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_medium_name_code: Optional[MdMediumNameCode] = field(
        default=None,
        metadata={
            "name": "MD_MediumNameCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdObligationCodePropertyType:
    class Meta:
        name = "MD_ObligationCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_obligation_code: Optional[MdObligationCode] = field(
        default=None,
        metadata={
            "name": "MD_ObligationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdPixelOrientationCodePropertyType:
    class Meta:
        name = "MD_PixelOrientationCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_pixel_orientation_code: Optional[MdPixelOrientationCode] = field(
        default=None,
        metadata={
            "name": "MD_PixelOrientationCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdProgressCodePropertyType:
    class Meta:
        name = "MD_ProgressCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_progress_code: Optional[MdProgressCode] = field(
        default=None,
        metadata={
            "name": "MD_ProgressCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdRepresentativeFractionType(AbstractObjectType):
    class Meta:
        name = "MD_RepresentativeFraction_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    denominator: Optional[IntegerPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class MdRestrictionCodePropertyType:
    class Meta:
        name = "MD_RestrictionCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_restriction_code: Optional[MdRestrictionCode] = field(
        default=None,
        metadata={
            "name": "MD_RestrictionCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdScopeCodePropertyType:
    class Meta:
        name = "MD_ScopeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_scope_code: Optional[MdScopeCode] = field(
        default=None,
        metadata={
            "name": "MD_ScopeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdSpatialRepresentationTypeCodePropertyType:
    class Meta:
        name = "MD_SpatialRepresentationTypeCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_spatial_representation_type_code: Optional[
        MdSpatialRepresentationTypeCode
    ] = field(
        default=None,
        metadata={
            "name": "MD_SpatialRepresentationTypeCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdTopicCategoryCodePropertyType:
    class Meta:
        name = "MD_TopicCategoryCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_topic_category_code: Optional[MdTopicCategoryCode] = field(
        default=None,
        metadata={
            "name": "MD_TopicCategoryCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdTopologyLevelCodePropertyType:
    class Meta:
        name = "MD_TopologyLevelCode_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_topology_level_code: Optional[MdTopologyLevelCode] = field(
        default=None,
        metadata={
            "name": "MD_TopologyLevelCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExternalReferencePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    external_reference: Optional[ExternalReference] = field(
        default=None,
        metadata={
            "name": "ExternalReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )


@dataclass
class Occupancy(OccupancyType):
    """
    Occupancy is an application-dependent indication of what is contained by a
    feature.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class QualifiedAreaType:
    """
    :ivar area: Specifies the value of the QualifiedArea.
    :ivar type_of_area: Indicates the specific type of the
        QualifiedArea.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    area: Optional[AreaType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )
    type_of_area: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "typeOfArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )


@dataclass
class QualifiedVolumeType:
    """
    :ivar volume: Specifies the value of the QualifiedVolume.
    :ivar type_of_volume: Indicates the specific type of the
        QualifiedVolume.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    volume: Optional[VolumeType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )
    type_of_volume: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "typeOfVolume",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )


@dataclass
class TexCoordGen(TexCoordGenType):
    """
    TexCoordGen defines texture parameterization using a transformation matrix.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class TexCoordList(TexCoordListType):
    """
    TexCoordList defines texture parameterization using texture coordinates.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class RoomHeightType:
    """
    :ivar high_reference: Indicates the high point used to calculate the
        value of the room height.
    :ivar low_reference: Indicates the low point used to calculate the
        value of the room height.
    :ivar status: Indicates the way the room height has been captured.
    :ivar value: Specifies the value of the room height.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    high_reference: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "highReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "required": True,
        },
    )
    low_reference: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "lowReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "required": True,
        },
    )
    status: Optional[HeightStatusValueType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "required": True,
        },
    )
    value: Optional[LengthType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "required": True,
        },
    )


@dataclass
class ConstructionEvent(ConstructionEventType):
    """A ConstructionEvent is a data type used to describe a specific event that is
    associated with a construction.

    Examples are the issuing of a building permit or the renovation of a
    building.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class Elevation(ElevationType):
    """Elevation is a data type that includes the elevation value itself and
    information on how this elevation was measured.

    [cf. INSPIRE]
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class HeightType:
    """
    :ivar high_reference: Indicates the high point used to calculate the
        value of the height. [cf. INSPIRE]
    :ivar low_reference: Indicates the low point used to calculate the
        value of the height. [cf. INSPIRE]
    :ivar status: Indicates the way the height has been captured. [cf.
        INSPIRE]
    :ivar value: Specifies the value of the height above or below
        ground. [cf. INSPIRE]
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    high_reference: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "highReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "required": True,
        },
    )
    low_reference: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "lowReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "required": True,
        },
    )
    status: Optional[HeightStatusValueType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "required": True,
        },
    )
    value: Optional[LengthType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "required": True,
        },
    )


@dataclass
class CodeAttribute(CodeAttributeType):
    """
    CodeAttribute is a data type used to define generic attributes of type "Code".
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class DateAttribute(DateAttributeType):
    """
    DateAttribute is a data type used to define generic attributes of type "Date".
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class DoubleAttribute(DoubleAttributeType):
    """
    DoubleAttribute is a data type used to define generic attributes of type
    "Double".
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class IntAttribute(IntAttributeType):
    """
    IntAttribute is a data type used to define generic attributes of type
    "Integer".
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class MeasureAttribute(MeasureAttributeType):
    """
    MeasureAttribute is a data type used to define generic attributes of type
    "Measure".
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class StringAttribute(StringAttributeType):
    """
    StringAttribute is a data type used to define generic attributes of type
    "String".
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class UriAttribute(UriAttributeType):
    """
    UriAttribute is a data type used to define generic attributes of type "URI".
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AbstractParametricCurveSurface(AbstractParametricCurveSurfaceType):
    """The element provides a substitution group head for the surface patches based
    on parametric curves.

    All properties are specified in the derived subtypes. All derived
    subtypes shall conform to the constraints specified in ISO
    19107:2003, 6.4.40. If provided, the aggregationType attribute shall
    have the value "set".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AffinePlacementType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    location: Optional[DirectPositionType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    ref_direction: list[VectorType] = field(
        default_factory=list,
        metadata={
            "name": "refDirection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    in_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "inDimension",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    out_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "outDimension",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class BooleanPropertyType1:
    """
    :ivar boolean:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "BooleanPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    boolean: Optional[Boolean1] = field(
        default=None,
        metadata={
            "name": "Boolean",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CategoryExtentType(CodeOrNilReasonListType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CategoryList(CodeOrNilReasonListType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CategoryPropertyType:
    """
    :ivar category:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    category: Optional[Category] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CountPropertyType:
    """
    :ivar count:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    count: Optional[Count] = field(
        default=None,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DirectionDescriptionType:
    """Direction descriptions are specified by a compass point code, a keyword, a
    textual description or a reference to a description.

    A gml:compassPoint is specified by a simple enumeration. In
    addition, thre elements to contain text-based descriptions of
    direction are provided. If the direction is specified using a term
    from a list, gml:keyword should be used, and the list indicated
    using the value of the codeSpace attribute. if the direction is
    decribed in prose, gml:direction or gml:reference should be used,
    allowing the value to be included inline or by reference.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    compass_point: Optional[CompassPointEnumeration] = field(
        default=None,
        metadata={
            "name": "compassPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    keyword: Optional[CodeType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    reference: Optional[ReferenceType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class EnvelopeType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    lower_corner: Optional[DirectPositionType] = field(
        default=None,
        metadata={
            "name": "lowerCorner",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    upper_corner: Optional[DirectPositionType] = field(
        default=None,
        metadata={
            "name": "upperCorner",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos: list[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "max_occurs": 2,
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        },
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        },
    )
    axis_labels: list[str] = field(
        default_factory=list,
        metadata={
            "name": "axisLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )
    uom_labels: list[str] = field(
        default_factory=list,
        metadata={
            "name": "uomLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )


@dataclass
class GenericMetaData(GenericMetaDataType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GridFunctionType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    sequence_rule: Optional[SequenceRuleType] = field(
        default=None,
        metadata={
            "name": "sequenceRule",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    start_point: list[int] = field(
        default_factory=list,
        metadata={
            "name": "startPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "tokens": True,
        },
    )


@dataclass
class LocationString(StringOrRefType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MappingRule(StringOrRefType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MappingRuleType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rule_definition: Optional[str] = field(
        default=None,
        metadata={
            "name": "ruleDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rule_reference: Optional[ReferenceType] = field(
        default=None,
        metadata={
            "name": "ruleReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class QuantityExtentType(MeasureOrNilReasonListType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class QuantityList(MeasureOrNilReasonListType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class QuantityPropertyType:
    """
    :ivar quantity:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    quantity: Optional[Quantity] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class SecondDefiningParameter1:
    class Meta:
        name = "SecondDefiningParameter"
        namespace = "http://www.opengis.net/gml/3.2"

    inverse_flattening: Optional[MeasureType] = field(
        default=None,
        metadata={
            "name": "inverseFlattening",
            "type": "Element",
        },
    )
    semi_minor_axis: Optional[LengthType] = field(
        default=None,
        metadata={
            "name": "semiMinorAxis",
            "type": "Element",
        },
    )
    is_sphere: bool = field(
        default=True,
        metadata={
            "name": "isSphere",
            "type": "Element",
        },
    )


@dataclass
class AbstractAssociationRole(AssociationRoleType):
    """Applying this pattern shall restrict the multiplicity of objects in a
    property element using this content model to exactly one. An instance of this
    type shall contain an element representing an object, or serve as a pointer to
    a remote object.

    Applying the pattern to define an application schema specific property type allows to restrict
    -       the inline object to specified object types,
    -       the encoding to "by-reference only" (see 7.2.3.7),
    -       the encoding to "inline only" (see 7.2.3.8).
    """

    class Meta:
        name = "abstractAssociationRole"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractReference(ReferenceType):
    """
    Gml:abstractReference may be used as the head of a subtitution group of more
    specific elements providing a value by-reference.
    """

    class Meta:
        name = "abstractReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractStrictAssociationRole(AssociationRoleType):
    """
    This element shows how an element declaration may include a Schematron
    constraint to limit the property to act in either inline or by-reference mode,
    but not both.
    """

    class Meta:
        name = "abstractStrictAssociationRole"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Angle2(AngleType):
    """
    The gml:angle property element is used to record the value of an angle quantity
    as a single number, with its units.
    """

    class Meta:
        name = "angle"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AxisDirection(CodeWithAuthorityType):
    """Gml:axisDirection is the direction of this coordinate system axis (or in the
    case of Cartesian projected coordinates, the direction of this coordinate
    system axis at the origin).

    Within any set of coordinate system axes, only one of each pair of
    terms may be used. For earth-fixed CRSs, this direction is often
    approximate and intended to provide a human interpretable meaning to
    the axis. When a geodetic datum is used, the precise directions of
    the axes may therefore vary slightly from this approximate
    direction. The codeSpace attribute shall reference a source of
    information specifying the values and meanings of all the allowed
    string values for this property.
    """

    class Meta:
        name = "axisDirection"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ConversionToPreferredUnit(ConversionToPreferredUnitType):
    """The elements gml:conversionToPreferredUnit and
    gml:roughConversionToPreferredUnit represent parameters used to convert
    conventional units to preferred units for this physical quantity type.

    A preferred unit is either a Base Unit or a Derived Unit that is
    selected for all values of one physical quantity type.
    """

    class Meta:
        name = "conversionToPreferredUnit"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DataSource(StringOrRefType):
    """Evidence is represented by a simple gml:dataSource or
    gml:dataSourceReference property that indicates the source of the temporal
    data.

    The remote link attributes of the gml:dataSource element have been
    deprecated along with its current type.
    """

    class Meta:
        name = "dataSource"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DataSourceReference(ReferenceType):
    """
    Evidence is represented by a simple gml:dataSource or gml:dataSourceReference
    property that indicates the source of the temporal data.
    """

    class Meta:
        name = "dataSourceReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DefinitionRef(ReferenceType):
    class Meta:
        name = "definitionRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Degrees(DegreesType):
    class Meta:
        name = "degrees"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivationUnitTerm(DerivationUnitTermType):
    """A set of gml:derivationUnitTerm elements describes a derived unit of
    measure.

    Each element carries an integer exponent.  The terms are combined by
    raising each referenced unit to the power of its exponent and
    forming the product. This unit term references another unit of
    measure (uom) and provides an integer exponent applied to that unit
    in defining the compound unit. The exponent may be positive or
    negative, but not zero.
    """

    class Meta:
        name = "derivationUnitTerm"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivedCrstype(CodeWithAuthorityType):
    """The gml:derivedCRSType property describes the type of a derived coordinate
    reference system.

    The required codeSpace attribute shall reference a source of
    information specifying the values and meanings of all the allowed
    string values for this property.
    """

    class Meta:
        name = "derivedCRSType"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Description(StringOrRefType):
    """The value of this property is a text description of the object.

    gml:description uses gml:StringOrRefType as its content model, so it
    may contain a simple text string content, or carry a reference to an
    external description. The use of gml:description to reference an
    external description has been deprecated and replaced by the
    gml:descriptionReference property.
    """

    class Meta:
        name = "description"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DescriptionReference(ReferenceType):
    """The value of this property is a remote text description of the object.

    The xlink:href attribute of the gml:descriptionReference property
    references the external description.
    """

    class Meta:
        name = "descriptionReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GreenwichLongitude(AngleType):
    """Gml:greenwichLongitude is the longitude of the prime meridian measured from
    the Greenwich meridian, positive eastward.

    If the value of the prime meridian "name" is "Greenwich" then the
    value of greenwichLongitude shall be 0 degrees.
    """

    class Meta:
        name = "greenwichLongitude"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Identifier(CodeWithAuthorityType):
    """Often, a special identifier is assigned to an object by the maintaining
    authority with the intention that it is used in references to the object For
    such cases, the codeSpace shall be provided.

    That identifier is usually unique either globally or within an
    application domain. gml:identifier is a pre-defined property for
    such identifiers.
    """

    class Meta:
        name = "identifier"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LocationReference(ReferenceType):
    """
    The gml:locationReference property element is a convenience property where the
    text value referenced by the xlink:href attribute describes the location of the
    feature.
    """

    class Meta:
        name = "locationReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Member(AssociationRoleType):
    class Meta:
        name = "member"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PixelInCell(CodeWithAuthorityType):
    """Gml:pixelInCell is a specification of the way an image grid is associated
    with the image data attributes.

    The required codeSpace attribute shall reference a source of
    information specifying the values and meanings of all the allowed
    string values for this property.
    """

    class Meta:
        name = "pixelInCell"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class QuantityType(StringOrRefType):
    """The gml:quantityType property indicates the phenomenon to which the units
    apply.

    This element contains an informal description of the phenomenon or
    type of physical quantity that is measured or observed. When the
    physical quantity is the result of an observation or measurement,
    this term is known as observable type or measurand. The use of
    gml:quantityType for references to remote values is deprecated.
    """

    class Meta:
        name = "quantityType"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class QuantityTypeReference(ReferenceType):
    """The gml:quantityTypeReference property indicates the phenomenon to which the
    units apply.

    The content is a reference to a remote value.
    """

    class Meta:
        name = "quantityTypeReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RangeMeaning(CodeWithAuthorityType):
    """Gml:rangeMeaning describes the meaning of axis value range specified by
    gml:minimumValue and gml:maximumValue.

    This element shall be omitted when both gml:minimumValue and
    gml:maximumValue are omitted. This element should be included when
    gml:minimumValue and/or gml:maximumValue are included. If this
    element is omitted when the gml:minimumValue and/or gml:maximumValue
    are included, the meaning is unspecified. The codeSpace attribute
    shall reference a source of information specifying the values and
    meanings of all the allowed string values for this property.
    """

    class Meta:
        name = "rangeMeaning"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RangeParameters(AssociationRoleType):
    class Meta:
        name = "rangeParameters"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ResultOf(ResultType):
    class Meta:
        name = "resultOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RoughConversionToPreferredUnit(ConversionToPreferredUnitType):
    """The elements gml:conversionToPreferredUnit and
    gml:roughConversionToPreferredUnit represent parameters used to convert
    conventional units to preferred units for this physical quantity type.

    A preferred unit is either a Base Unit or a Derived Unit that is
    selected for all values of one physical quantity type.
    """

    class Meta:
        name = "roughConversionToPreferredUnit"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Status(StringOrRefType):
    class Meta:
        name = "status"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class StatusReference(ReferenceType):
    class Meta:
        name = "statusReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeInterval(TimeIntervalLengthType):
    """Gml:timeInterval conforms to ISO 11404 which is based on floating point
    values for temporal length.

    ISO 11404 syntax specifies the use of a positiveInteger together
    with appropriate values for radix and factor. The resolution of the
    time interval is to one radix ^(-factor) of the specified time unit.
    The value of the unit is either selected from the units for time
    intervals from ISO 31-1:1992, or is another suitable unit.  The
    encoding is defined for GML in gml:TimeUnitType. The second
    component of this union type provides a method for indicating time
    units other than the six standard units given in the enumeration.
    """

    class Meta:
        name = "timeInterval"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimePosition(TimePositionType):
    """
    This element is used directly as a property of gml:TimeInstant (see 15.2.2.3),
    and may also be used in application schemas.
    """

    class Meta:
        name = "timePosition"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Vector(VectorType):
    class Meta:
        name = "vector"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcAbstract(ArcType2):
    class Meta:
        name = "arc"
        namespace = "http://www.w3.org/1999/xlink"


@dataclass
class Locator(LocatorType):
    class Meta:
        name = "locator"
        namespace = "http://www.w3.org/1999/xlink"


@dataclass
class Resource(ResourceType):
    class Meta:
        name = "resource"
        namespace = "http://www.w3.org/1999/xlink"


@dataclass
class Title(TitleEltType):
    class Meta:
        name = "title"
        namespace = "http://www.w3.org/1999/xlink"


@dataclass
class PremisesType:
    """
    Complex type for internal reuse.

    :ivar name_element: Data associated with the name of the Premises.
        e.g. Full name of premises or part of the name. E.g. Westfield
        shopping center, reference data to support the premises
        location, street in the premises
    :ivar number: Data associated with the number of the premises.
        E.g.House 15, number range, number suffix
    :ivar other_attributes:
    """

    class Meta:
        target_namespace = "urn:oasis:names:tc:ciq:xal:3"

    name_element: list["PremisesType.NameElement"] = field(
        default_factory=list,
        metadata={
            "name": "NameElement",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    number: list[IdentifierType] = field(
        default_factory=list,
        metadata={
            "name": "Number",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    other_attributes: dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )

    @dataclass
    class NameElement:
        """
        :ivar value:
        :ivar abbreviation: If set to true then indicates that the value
            is an abbreviation or initial. If set to false then the
            value is definitely not an abbreviation. If omitted then it
            is not known if the value is an abbreviation or not.
        :ivar name_type: Describes the type / part of name this element
            contains.
        :ivar other_attributes:
        """

        value: str = field(
            default="",
            metadata={
                "required": True,
                "white_space": "collapse",
            },
        )
        abbreviation: Optional[bool] = field(
            default=None,
            metadata={
                "name": "Abbreviation",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        name_type: Optional[PremisesElementTypeList] = field(
            default=None,
            metadata={
                "name": "NameType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )


@dataclass
class ThoroughfareType:
    """
    Complex type for internal reuse.

    :ivar name_element: Data associated with the thoroughfare details.
        e.g. Full thoroughfare name or part of it, type of thoroughfare,
        old name, new name, reference data in support of the
        thoroughfare
    :ivar number: Data associated with the number of the thoroughfare.
        E.g. 39 in 39 Baker Street, street range, street suffix
    :ivar type_value: Type of thoroughfare. eg. primary road, secondary
        road, road branch (e.g. Lane 14), road sub branch (e.g. Alley
        21), adjourning street, cross street, closest street, etc
    :ivar type_code: Type of code use for thoroughfare
    :ivar data_quality_type: This attribute indicates what level of
        trust can be given to the parent element. Omit this attribute if
        the data quality is unknown. If the data quality is known, the
        value is "Valid, else "InValid"
    :ivar valid_from: Date the data quality is valid from
    :ivar valid_to: Date the data quality is valid to
    :ivar other_attributes:
    """

    class Meta:
        target_namespace = "urn:oasis:names:tc:ciq:xal:3"

    name_element: list["ThoroughfareType.NameElement"] = field(
        default_factory=list,
        metadata={
            "name": "NameElement",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    number: list[IdentifierType] = field(
        default_factory=list,
        metadata={
            "name": "Number",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    type_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "TypeCode",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
            "white_space": "collapse",
        },
    )
    data_quality_type: Optional[DataQualityTypeList] = field(
        default=None,
        metadata={
            "name": "DataQualityType",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:ct:3",
        },
    )
    valid_from: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidFrom",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:ct:3",
        },
    )
    valid_to: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidTo",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:ct:3",
        },
    )
    other_attributes: dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )

    @dataclass
    class NameElement:
        """
        :ivar value:
        :ivar abbreviation: If set to true then indicates that the value
            is an abbreviation or initial. If set to false then the
            value is definitely not an abbreviation. If omitted then it
            is not known if the value is an abbreviation or not.
        :ivar name_type: Describes the type / part of name this element
            contains.
        :ivar other_attributes:
        """

        value: str = field(
            default="",
            metadata={
                "required": True,
                "white_space": "collapse",
            },
        )
        abbreviation: Optional[bool] = field(
            default=None,
            metadata={
                "name": "Abbreviation",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        name_type: Optional[ThoroughfareNameTypeList] = field(
            default=None,
            metadata={
                "name": "NameType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )


@dataclass
class AnglePropertyType:
    class Meta:
        name = "Angle_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    angle: Optional[Angle1] = field(
        default=None,
        metadata={
            "name": "Angle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DistancePropertyType:
    class Meta:
        name = "Distance_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    distance: Optional[Distance] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LengthPropertyType:
    class Meta:
        name = "Length_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    distance: Optional[Distance] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    length: Optional[Length] = field(
        default=None,
        metadata={
            "name": "Length",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MeasurePropertyType:
    class Meta:
        name = "Measure_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    scale: Optional[Scale] = field(
        default=None,
        metadata={
            "name": "Scale",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    angle: Optional[Angle1] = field(
        default=None,
        metadata={
            "name": "Angle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    distance: Optional[Distance] = field(
        default=None,
        metadata={
            "name": "Distance",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    length: Optional[Length] = field(
        default=None,
        metadata={
            "name": "Length",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    measure: Optional[Measure1] = field(
        default=None,
        metadata={
            "name": "Measure",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MultiplicityRangeType(AbstractObjectType):
    """
    A component of a multiplicity, consisting of an non-negative lower bound, and a
    potentially infinite upper bound.
    """

    class Meta:
        name = "MultiplicityRange_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    lower: Optional[IntegerPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "required": True,
        },
    )
    upper: Optional[UnlimitedIntegerPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "required": True,
        },
    )


@dataclass
class RecordTypePropertyType:
    class Meta:
        name = "RecordType_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    record_type: Optional[RecordType] = field(
        default=None,
        metadata={
            "name": "RecordType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ScalePropertyType:
    class Meta:
        name = "Scale_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    scale: Optional[Scale] = field(
        default=None,
        metadata={
            "name": "Scale",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class TypeNameType(AbstractObjectType):
    """A TypeName is a LocalName that references either a recordType or object type
    in some form of schema.

    The stored value "aName" is the returned value for the "aName()" operation. This is the types name.  - For parsing from types (or objects) the parsible name normally uses a "." navigation separator, so that it is of the form  [class].[member].[memberOfMember]. ...)
    """

    class Meta:
        name = "TypeName_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    a_name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "aName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "required": True,
        },
    )


@dataclass
class AbstractExGeographicExtent(AbstractExGeographicExtentType):
    class Meta:
        name = "AbstractEX_GeographicExtent"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiAddressType(AbstractObjectType):
    """
    Location of the responsible individual or organisation.
    """

    class Meta:
        name = "CI_Address_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    delivery_point: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "deliveryPoint",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    city: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    administrative_area: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "administrativeArea",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    postal_code: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "postalCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    country: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    electronic_mail_address: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "electronicMailAddress",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class CiDateType(AbstractObjectType):
    class Meta:
        name = "CI_Date_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    date: Optional[DatePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    date_type: Optional[CiDateTypeCodePropertyType] = field(
        default=None,
        metadata={
            "name": "dateType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class CiOnlineResourceType(AbstractObjectType):
    """
    Information about online sources from which the dataset, specification, or
    community profile name and extended metadata elements can be obtained.
    """

    class Meta:
        name = "CI_OnlineResource_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    linkage: Optional[UrlPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    protocol: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    application_profile: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "applicationProfile",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    description: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    function: Optional[CiOnLineFunctionCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class CiSeriesType(AbstractObjectType):
    class Meta:
        name = "CI_Series_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    issue_identification: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "issueIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    page: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class CiTelephoneType(AbstractObjectType):
    """
    Telephone numbers for contacting the responsible individual or organisation.
    """

    class Meta:
        name = "CI_Telephone_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    voice: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    facsimile: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class DsAssociationPropertyType:
    """
    :ivar ds_association:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DS_Association_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_association: Optional[DsAssociation] = field(
        default=None,
        metadata={
            "name": "DS_Association",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExGeographicBoundingBoxType(AbstractExGeographicExtentType):
    """
    Geographic area of the entire dataset referenced to WGS 84.
    """

    class Meta:
        name = "EX_GeographicBoundingBox_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    west_bound_longitude: Optional[DecimalPropertyType] = field(
        default=None,
        metadata={
            "name": "westBoundLongitude",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    east_bound_longitude: Optional[DecimalPropertyType] = field(
        default=None,
        metadata={
            "name": "eastBoundLongitude",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    south_bound_latitude: Optional[DecimalPropertyType] = field(
        default=None,
        metadata={
            "name": "southBoundLatitude",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    north_bound_latitude: Optional[DecimalPropertyType] = field(
        default=None,
        metadata={
            "name": "northBoundLatitude",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class ExVerticalExtent(ExVerticalExtentType):
    class Meta:
        name = "EX_VerticalExtent"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdBrowseGraphicType(AbstractObjectType):
    """
    Graphic that provides an illustration of the dataset (should include a legend
    for the graphic)
    """

    class Meta:
        name = "MD_BrowseGraphic_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    file_name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "fileName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    file_description: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "fileDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    file_type: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "fileType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdConstraintsType(AbstractObjectType):
    """
    Restrictions on the access and use of a dataset or metadata.
    """

    class Meta:
        name = "MD_Constraints_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    use_limitation: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "useLimitation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdGeometricObjectsType(AbstractObjectType):
    class Meta:
        name = "MD_GeometricObjects_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    geometric_object_type: Optional[MdGeometricObjectTypeCodePropertyType] = (
        field(
            default=None,
            metadata={
                "name": "geometricObjectType",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
                "required": True,
            },
        )
    )
    geometric_object_count: Optional[IntegerPropertyType] = field(
        default=None,
        metadata={
            "name": "geometricObjectCount",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdIdentifierType(AbstractObjectType):
    class Meta:
        name = "MD_Identifier_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    authority: Optional["CiCitationPropertyType"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    code: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class MdMediumType(AbstractObjectType):
    """
    Information about the media on which the data can be distributed.
    """

    class Meta:
        name = "MD_Medium_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[MdMediumNameCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    density: list[RealPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    density_units: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "densityUnits",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    volumes: Optional[IntegerPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    medium_format: list[MdMediumFormatCodePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "mediumFormat",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    medium_note: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "mediumNote",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdRepresentativeFraction(MdRepresentativeFractionType):
    class Meta:
        name = "MD_RepresentativeFraction"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdScopeDescriptionType:
    """
    Description of the class of information covered by the information.
    """

    class Meta:
        name = "MD_ScopeDescription_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    attributes: list[ObjectReferencePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    features: list[ObjectReferencePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    feature_instances: list[ObjectReferencePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "featureInstances",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    attribute_instances: list[ObjectReferencePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "attributeInstances",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dataset: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    other: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdStandardOrderProcessType(AbstractObjectType):
    """
    Common ways in which the dataset may be obtained or received, and related
    instructions and fee information.
    """

    class Meta:
        name = "MD_StandardOrderProcess_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    fees: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    planned_available_date_time: Optional[DateTimePropertyType] = field(
        default=None,
        metadata={
            "name": "plannedAvailableDateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ordering_instructions: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "orderingInstructions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    turnaround: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class PtFreeTextType(AbstractObjectType):
    class Meta:
        name = "PT_FreeText_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    text_group: list[LocalisedCharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "textGroup",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class PtLocaleType(AbstractObjectType):
    class Meta:
        name = "PT_Locale_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    language_code: Optional[LanguageCodePropertyType] = field(
        default=None,
        metadata={
            "name": "languageCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    country: Optional[CountryPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    character_encoding: Optional[MdCharacterSetCodePropertyType] = field(
        default=None,
        metadata={
            "name": "characterEncoding",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class AbstractGenericAttributePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    uri_attribute: Optional[UriAttribute] = field(
        default=None,
        metadata={
            "name": "UriAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    string_attribute: Optional[StringAttribute] = field(
        default=None,
        metadata={
            "name": "StringAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    measure_attribute: Optional[MeasureAttribute] = field(
        default=None,
        metadata={
            "name": "MeasureAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    int_attribute: Optional[IntAttribute] = field(
        default=None,
        metadata={
            "name": "IntAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    generic_attribute_set: Optional["GenericAttributeSet"] = field(
        default=None,
        metadata={
            "name": "GenericAttributeSet",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    double_attribute: Optional[DoubleAttribute] = field(
        default=None,
        metadata={
            "name": "DoubleAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    date_attribute: Optional[DateAttribute] = field(
        default=None,
        metadata={
            "name": "DateAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    code_attribute: Optional[CodeAttribute] = field(
        default=None,
        metadata={
            "name": "CodeAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )


@dataclass
class OccupancyPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    occupancy: Optional[Occupancy] = field(
        default=None,
        metadata={
            "name": "Occupancy",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )


@dataclass
class QualifiedArea(QualifiedAreaType):
    """
    QualifiedArea is an application-dependent measure of the area of a space or of
    a thematic surface.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class QualifiedVolume(QualifiedVolumeType):
    """
    QualifiedVolume is an application-dependent measure of the volume of a space.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractTextureParameterizationPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    tex_coord_list: Optional[TexCoordList] = field(
        default=None,
        metadata={
            "name": "TexCoordList",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    tex_coord_gen: Optional[TexCoordGen] = field(
        default=None,
        metadata={
            "name": "TexCoordGen",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )


@dataclass
class TexCoordGenPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    tex_coord_gen: Optional[TexCoordGen] = field(
        default=None,
        metadata={
            "name": "TexCoordGen",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "required": True,
        },
    )


@dataclass
class TexCoordListPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    tex_coord_list: Optional[TexCoordList] = field(
        default=None,
        metadata={
            "name": "TexCoordList",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "required": True,
        },
    )


@dataclass
class RoomHeight(RoomHeightType):
    """The RoomHeight represents a vertical distance (measured or estimated)
    between a low reference and a high reference.

    [cf. INSPIRE]
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class ConstructionEventPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    construction_event: Optional[ConstructionEvent] = field(
        default=None,
        metadata={
            "name": "ConstructionEvent",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "required": True,
        },
    )


@dataclass
class ElevationPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    elevation: Optional[Elevation] = field(
        default=None,
        metadata={
            "name": "Elevation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "required": True,
        },
    )


@dataclass
class Height(HeightType):
    """Height represents a vertical distance (measured or estimated) between a low
    reference and a high reference.

    [cf. INSPIRE]
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class CodeAttributePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    code_attribute: Optional[CodeAttribute] = field(
        default=None,
        metadata={
            "name": "CodeAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class DateAttributePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    date_attribute: Optional[DateAttribute] = field(
        default=None,
        metadata={
            "name": "DateAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class DoubleAttributePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    double_attribute: Optional[DoubleAttribute] = field(
        default=None,
        metadata={
            "name": "DoubleAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class IntAttributePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    int_attribute: Optional[IntAttribute] = field(
        default=None,
        metadata={
            "name": "IntAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class MeasureAttributePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    measure_attribute: Optional[MeasureAttribute] = field(
        default=None,
        metadata={
            "name": "MeasureAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class StringAttributePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    string_attribute: Optional[StringAttribute] = field(
        default=None,
        metadata={
            "name": "StringAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class UriAttributePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    uri_attribute: Optional[UriAttribute] = field(
        default=None,
        metadata={
            "name": "UriAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class AffinePlacement(AffinePlacementType):
    """
    Location, refDirection, inDimension and outDimension have the same meaning as
    specified in ISO 19107:2003, 6.4.21.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CategoryExtent(CategoryExtentType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoverageMappingRule(MappingRuleType):
    """Gml:CoverageMappingRule provides a formal or informal description of the
    coverage function.

    The mapping rule may be defined as an in-line string
    (gml:ruleDefinition) or via a remote reference through xlink:href
    (gml:ruleReference). If no rule name is specified, the default is
    'Linear' with respect to members of the domain in document order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DmsangleType:
    class Meta:
        name = "DMSAngleType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    degrees: Optional[Degrees] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    decimal_minutes: Optional[DecimalMinutes] = field(
        default=None,
        metadata={
            "name": "decimalMinutes",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    minutes: Optional[Minutes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    seconds: Optional[Seconds] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DataBlockType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    range_parameters: Optional[RangeParameters] = field(
        default=None,
        metadata={
            "name": "rangeParameters",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    tuple_list: Optional[TupleList] = field(
        default=None,
        metadata={
            "name": "tupleList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    double_or_nil_reason_tuple_list: Optional[DoubleOrNilReasonTupleList] = (
        field(
            default=None,
            metadata={
                "name": "doubleOrNilReasonTupleList",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
    )


@dataclass
class DirectionVectorType:
    """
    Direction vectors are specified by providing components of a vector.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    vector: Optional[Vector] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    horizontal_angle: Optional[AngleType] = field(
        default=None,
        metadata={
            "name": "horizontalAngle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_angle: Optional[AngleType] = field(
        default=None,
        metadata={
            "name": "verticalAngle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Envelope(EnvelopeType):
    """Envelope defines an extent using a pair of positions defining opposite
    corners in arbitrary dimensions.

    The first direct position is the "lower corner" (a coordinate
    position consisting of all the minimal ordinates for each dimension
    for all points within the envelope), the second one the "upper
    corner" (a coordinate position consisting of all the maximal
    ordinates for each dimension for all points within the envelope).
    The use of the properties "coordinates" and "pos" has been
    deprecated. The explicitly named properties "lowerCorner" and
    "upperCorner" shall be used instead.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EnvelopeWithTimePeriodType(EnvelopeType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    begin_position: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "beginPosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    end_position: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "endPosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    frame: str = field(
        default="#ISO-8601",
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class FileType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    range_parameters: Optional[RangeParameters] = field(
        default=None,
        metadata={
            "name": "rangeParameters",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    file_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "fileName",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    file_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "fileReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    file_structure: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "fileStructure",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    mime_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "mimeType",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    compression: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GridFunction(GridFunctionType):
    """Gml:GridFunction provides an explicit mapping rule for grid geometries, i.e.
    the domain shall be a geometry of type grid.

    It describes the mapping of grid posts (discrete point grid
    coverage) or grid cells (discrete surface coverage) to the values in
    the range set. The gml:startPoint is the index position of a point
    in the grid that is mapped to the first point in the range set (this
    is also the index position of the first grid post).  If the
    gml:startPoint property is omitted the gml:startPoint is assumed to
    be equal to the value of gml:low in the gml:Grid geometry.
    Subsequent points in the mapping are determined by the value of the
    gml:sequenceRule.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MetaDataPropertyType:
    """
    :ivar generic_meta_data:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar about:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    generic_meta_data: Optional[GenericMetaData] = field(
        default=None,
        metadata={
            "name": "GenericMetaData",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    about: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class QuantityExtent(QuantityExtentType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SecondDefiningParameter2:
    """Gml:secondDefiningParameter is a property containing the definition of the
    second parameter that defines the shape of an ellipsoid.

    An ellipsoid requires two defining parameters: semi-major axis and inverse flattening or semi-major axis and semi-minor axis. When the reference body is a sphere rather than an ellipsoid, only a single defining parameter is required, namely the radius of the sphere; in that case, the semi-major axis "degenerates" into the radius of the sphere.
    The inverseFlattening element contains the inverse flattening value of the ellipsoid. This value is a scale factor (or ratio). It uses gml:LengthType with the restriction that the unit of measure referenced by the uom attribute must be suitable for a scale factor, such as percent, permil, or parts-per-million.
    The semiMinorAxis element contains the length of the semi-minor axis of the ellipsoid. When the isSphere element is included, the ellipsoid is degenerate and is actually a sphere. The sphere is completely defined by the semi-major axis, which is the radius of the sphere.
    """

    class Meta:
        name = "secondDefiningParameter"
        namespace = "http://www.opengis.net/gml/3.2"

    second_defining_parameter: Optional[SecondDefiningParameter1] = field(
        default=None,
        metadata={
            "name": "SecondDefiningParameter",
            "type": "Element",
            "required": True,
        },
    )


@dataclass
class AddressType1:
    """
    Complex type that defines the structure of an address with geocode details for
    reuse.

    :ivar free_text_address: Container for free text address elements
        where address elements are not parsed
    :ivar country: Country details
    :ivar administrative_area: Details of the top-level area division in
        the country, such as state, district, province, island, region,
        etc. Note that some countries do not have this
    :ivar locality: Details of Locality which is a named densely
        populated area  (a place) such as town, village, suburb, etc. A
        locality composes of many individual addresses.  Many localities
        exist in an administrative area or a sub adminisrative area. A
        locality can also have sub localities. For example, a
        municipality locality can have many villages associated with it
        which are sub localities. Example: Tamil Nadu State, Erode
        District, Bhavani Taluk, Paruvachi Village is a valid address in
        India. Tamil Nadu is the Administrative Area, Erode is the sub
        admin area, Bhavani is the locality, and Paruvachi is the sub
        locality
    :ivar thoroughfare: Details of the Access route along which
        buildings/lot/land are located, such as street, road, channel,
        crescent, avenue, etc. This also includes canals/banks on which
        houses/boat houses are located where people live
    :ivar premises: Details of the Premises (could be building(s), site,
        loaction, property, premise, place) which is a landmark place
        which has a main address such as large mail user (e.g. Airport,
        Hospital, University) or could be a building (e.g. apartment,
        house)  or a building or complex of buildings (e.g. an apartment
        complex or shopping centre) or even a vacant land (e.g. LOT). A
        premises can have many sub-addresses such as apartments in a
        building having its own addresses or buildings within an airport
        having its own addresses including its own thoroughfares
    :ivar post_code: A container for a single free text or structured
        postcode. Note that not all countries have post codes
    :ivar rural_delivery: A container for postal-specific delivery
        identifier for remote communities. Note that not all countries
        have RuralDelivery
    :ivar postal_delivery_point: Final mail delivery point where the
        mail is dropped off for recipients to pick them up directly.
        E.g. POBox, Private Bag,  pigeon hole, free mail numbers, etc.
    :ivar post_office: A delivery point/installation where all mails are
        delivered and the post man/delivery service picks up the mails
        and delivers it to the recipients through a delivery mode.
        Examples are a rural post office where post is delivered, a post
        office containing post office boxes/personal mail boxes. Note
        that not all countries have PostOffice. Can be used to represent
        overseas military addresses also along with PostalDeliveryPoint
        element
    :ivar geo_rss: GeoRSS GML from Open Geospatial Consortium
        (www.opengeospatial.net) is a formal GML Application Profile,
        and supports a greater range of features than Simple, notably
        coordinate reference systems other than WGS84
        latitude/longitude. It is designed for use with Atom 1.0, RSS
        2.0 and RSS 1.0, although it can be used just as easily in non-
        RSS XML encodings.
    :ivar location_by_coordinates: Simple Geo-coordinates of the
        address/location
    :ivar type_value: Defines the type of address. An address type can
        be" Primary Address, Secondary Address, Rural Address, Military
        Address, etc.
    :ivar address_id: A unique address identifier such as postal
        delivery idetifier assigned to the address by local postal
        authority, e.g. DPID in Australia.
    :ivar address_idtype: Type of address ID used. e.g. DPID, etc
    :ivar id: A globally unique identifier assigned to the address
    :ivar usage: The purpose the address is used for. E.g.  Postal,
        residential, business,  exchange, update, create, delete, etc
    :ivar delivery_mode: Mode of delivery of address. For example: rural
        route, normal delivery, post office box, etc.
    :ivar status: Status of the entity. e.g. Old, Current, Inactive,
        Active, etc
    :ivar date_valid_from: Could be start date, issue date, validity
        start date, etc
    :ivar date_valid_to: Could be end date, expiry date, validity end
        date, etc
    :ivar address_key: A primary key to reference Address.
    :ivar address_key_ref: A foreign key to reference attribute Key of
        Address.
    :ivar w3_org_1999_xlink_type: Enumeration of values for the type
        attribute
    :ivar label:
    :ivar href:
    :ivar data_quality_type: This attribute indicates what level of
        trust can be given to the parent element. Omit this attribute if
        the data quality is unknown. If the data quality is known, the
        value is "Valid, else "InValid"
    :ivar valid_from: Date the data quality is valid from
    :ivar valid_to: Date the data quality is valid to
    :ivar language_code: Human Language used. e.g. "en", "en-US", "en-
        AUS", etc
    :ivar other_attributes:
    """

    class Meta:
        name = "AddressType"
        target_namespace = "urn:oasis:names:tc:ciq:xal:3"

    free_text_address: Optional["AddressType1.FreeTextAddress"] = field(
        default=None,
        metadata={
            "name": "FreeTextAddress",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    country: Optional[CountryType] = field(
        default=None,
        metadata={
            "name": "Country",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    administrative_area: Optional["AddressType1.AdministrativeArea"] = field(
        default=None,
        metadata={
            "name": "AdministrativeArea",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    locality: Optional["AddressType1.Locality"] = field(
        default=None,
        metadata={
            "name": "Locality",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    thoroughfare: Optional["AddressType1.Thoroughfare"] = field(
        default=None,
        metadata={
            "name": "Thoroughfare",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    premises: Optional["AddressType1.Premises"] = field(
        default=None,
        metadata={
            "name": "Premises",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    post_code: Optional["AddressType1.PostCode"] = field(
        default=None,
        metadata={
            "name": "PostCode",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    rural_delivery: Optional["AddressType1.RuralDelivery"] = field(
        default=None,
        metadata={
            "name": "RuralDelivery",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    postal_delivery_point: Optional["AddressType1.PostalDeliveryPoint"] = (
        field(
            default=None,
            metadata={
                "name": "PostalDeliveryPoint",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
    )
    post_office: Optional["AddressType1.PostOffice"] = field(
        default=None,
        metadata={
            "name": "PostOffice",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    geo_rss: Optional["AddressType1.GeoRss"] = field(
        default=None,
        metadata={
            "name": "GeoRSS",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    location_by_coordinates: Optional["AddressType1.LocationByCoordinates"] = (
        field(
            default=None,
            metadata={
                "name": "LocationByCoordinates",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
    )
    type_value: Optional[AddressTypeList] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    address_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "AddressID",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
            "white_space": "collapse",
        },
    )
    address_idtype: Optional[str] = field(
        default=None,
        metadata={
            "name": "AddressIDType",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "ID",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
            "white_space": "collapse",
        },
    )
    usage: Optional[AddressUsageList] = field(
        default=None,
        metadata={
            "name": "Usage",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    delivery_mode: Optional[str] = field(
        default=None,
        metadata={
            "name": "DeliveryMode",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    status: Optional[str] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
        },
    )
    date_valid_from: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "DateValidFrom",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:ct:3",
        },
    )
    date_valid_to: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "DateValidTo",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:ct:3",
        },
    )
    address_key: Optional[str] = field(
        default=None,
        metadata={
            "name": "AddressKey",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
            "white_space": "collapse",
        },
    )
    address_key_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AddressKeyRef",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:xal:3",
            "white_space": "collapse",
        },
    )
    w3_org_1999_xlink_type: Optional[TypeValue] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    label: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    data_quality_type: Optional[DataQualityTypeList] = field(
        default=None,
        metadata={
            "name": "DataQualityType",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:ct:3",
        },
    )
    valid_from: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidFrom",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:ct:3",
        },
    )
    valid_to: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidTo",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:ct:3",
        },
    )
    language_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "LanguageCode",
            "type": "Attribute",
            "namespace": "urn:oasis:names:tc:ciq:ct:3",
        },
    )
    other_attributes: dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        },
    )

    @dataclass
    class FreeTextAddress:
        """
        :ivar address_line: Free format address representation. An
            address can have more than one line. The order of the
            AddressLine elements must be preserved.
        :ivar data_quality_type: This attribute indicates what level of
            trust can be given to the parent element. Omit this
            attribute if the data quality is unknown. If the data
            quality is known, the value is "Valid, else "InValid"
        :ivar valid_from: Date the data quality is valid from
        :ivar valid_to: Date the data quality is valid to
        :ivar other_attributes:
        """

        address_line: list["AddressType1.FreeTextAddress.AddressLine"] = field(
            default_factory=list,
            metadata={
                "name": "AddressLine",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "min_occurs": 1,
            },
        )
        data_quality_type: Optional[DataQualityTypeList] = field(
            default=None,
            metadata={
                "name": "DataQualityType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_from: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidFrom",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_to: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidTo",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )

        @dataclass
        class AddressLine:
            """
            :ivar value:
            :ivar type_value: What does the address line describe? e.g.
                Street details, suburb details, post code details, whole
                address, etc
            :ivar data_quality_type: This attribute indicates what level
                of trust can be given to the parent element. Omit this
                attribute if the data quality is unknown. If the data
                quality is known, the value is "Valid, else "InValid"
            :ivar valid_from: Date the data quality is valid from
            :ivar valid_to: Date the data quality is valid to
            :ivar other_attributes:
            """

            value: str = field(
                default="",
                metadata={
                    "required": True,
                    "white_space": "collapse",
                },
            )
            type_value: Optional[str] = field(
                default=None,
                metadata={
                    "name": "Type",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
            data_quality_type: Optional[DataQualityTypeList] = field(
                default=None,
                metadata={
                    "name": "DataQualityType",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:ct:3",
                },
            )
            valid_from: Optional[XmlDateTime] = field(
                default=None,
                metadata={
                    "name": "ValidFrom",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:ct:3",
                },
            )
            valid_to: Optional[XmlDateTime] = field(
                default=None,
                metadata={
                    "name": "ValidTo",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:ct:3",
                },
            )
            other_attributes: dict[str, str] = field(
                default_factory=dict,
                metadata={
                    "type": "Attributes",
                    "namespace": "##other",
                },
            )

    @dataclass
    class AdministrativeArea:
        """
        :ivar name_element: Data associated with the Administrative
            Area. e.g. Full name of administrative area or part of it.
            eg. MI in USA, NSW in Australia, reference location to the
            administrative area
        :ivar sub_administrative_area: The next level down division of
            the area. E.g. state / county, province / reservation. Note
            that not all countries have a subadministrative area
        :ivar type_value: Type of administrative area. e.g. state, city,
            town, etc
        :ivar data_quality_type: This attribute indicates what level of
            trust can be given to the parent element. Omit this
            attribute if the data quality is unknown. If the data
            quality is known, the value is "Valid, else "InValid"
        :ivar valid_from: Date the data quality is valid from
        :ivar valid_to: Date the data quality is valid to
        :ivar other_attributes:
        """

        name_element: list["AddressType1.AdministrativeArea.NameElement"] = (
            field(
                default_factory=list,
                metadata={
                    "name": "NameElement",
                    "type": "Element",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "min_occurs": 1,
                },
            )
        )
        sub_administrative_area: Optional[
            "AddressType1.AdministrativeArea.SubAdministrativeArea"
        ] = field(
            default=None,
            metadata={
                "name": "SubAdministrativeArea",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        type_value: Optional[AdministrativeAreaTypeList] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        data_quality_type: Optional[DataQualityTypeList] = field(
            default=None,
            metadata={
                "name": "DataQualityType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_from: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidFrom",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_to: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidTo",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )

        @dataclass
        class NameElement:
            """
            :ivar value:
            :ivar abbreviation: If set to true then indicates that the
                value is an abbreviation or initial. If set to false
                then the value is definitely not an abbreviation. If
                omitted then it is not known if the value is an
                abbreviation or not.
            :ivar name_type: semantics of data associated with name
            :ivar name_code: Name of administrative area represented as
                a code. e.g. "COL" for COLORADO
            :ivar name_code_type: Type of code used to represent name as
                a code
            :ivar other_attributes:
            """

            value: str = field(
                default="",
                metadata={
                    "required": True,
                    "white_space": "collapse",
                },
            )
            abbreviation: Optional[bool] = field(
                default=None,
                metadata={
                    "name": "Abbreviation",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:ct:3",
                },
            )
            name_type: Optional[AdministrativeAreaNameTypeList] = field(
                default=None,
                metadata={
                    "name": "NameType",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
            name_code: Optional[str] = field(
                default=None,
                metadata={
                    "name": "NameCode",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
            name_code_type: Optional[str] = field(
                default=None,
                metadata={
                    "name": "NameCodeType",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "white_space": "collapse",
                },
            )
            other_attributes: dict[str, str] = field(
                default_factory=dict,
                metadata={
                    "type": "Attributes",
                    "namespace": "##other",
                },
            )

        @dataclass
        class SubAdministrativeArea:
            """
            :ivar name_element: Data associated with the
                SubAdministrative Area. e.g. Full name of sub
                administrative area or part of it.
            :ivar type_value: Type of sub administrative area
            :ivar data_quality_type: This attribute indicates what level
                of trust can be given to the parent element. Omit this
                attribute if the data quality is unknown. If the data
                quality is known, the value is "Valid, else "InValid"
            :ivar valid_from: Date the data quality is valid from
            :ivar valid_to: Date the data quality is valid to
            :ivar other_attributes:
            """

            name_element: list[
                "AddressType1.AdministrativeArea.SubAdministrativeArea.NameElement"
            ] = field(
                default_factory=list,
                metadata={
                    "name": "NameElement",
                    "type": "Element",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "min_occurs": 1,
                },
            )
            type_value: Optional[SubAdministrativeAreaTypeList] = field(
                default=None,
                metadata={
                    "name": "Type",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
            data_quality_type: Optional[DataQualityTypeList] = field(
                default=None,
                metadata={
                    "name": "DataQualityType",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:ct:3",
                },
            )
            valid_from: Optional[XmlDateTime] = field(
                default=None,
                metadata={
                    "name": "ValidFrom",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:ct:3",
                },
            )
            valid_to: Optional[XmlDateTime] = field(
                default=None,
                metadata={
                    "name": "ValidTo",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:ct:3",
                },
            )
            other_attributes: dict[str, str] = field(
                default_factory=dict,
                metadata={
                    "type": "Attributes",
                    "namespace": "##other",
                },
            )

            @dataclass
            class NameElement:
                """
                :ivar value:
                :ivar abbreviation: If set to true then indicates that
                    the value is an abbreviation or initial. If set to
                    false then the value is definitely not an
                    abbreviation. If omitted then it is not known if the
                    value is an abbreviation or not.
                :ivar name_type: semantics of data associated with name
                :ivar name_code: Name of administrative area represented
                    as a code. e.g. "COL" for COLORADO
                :ivar name_code_type: Type of code used to represent
                    name as a code
                :ivar other_attributes:
                """

                value: str = field(
                    default="",
                    metadata={
                        "required": True,
                        "white_space": "collapse",
                    },
                )
                abbreviation: Optional[bool] = field(
                    default=None,
                    metadata={
                        "name": "Abbreviation",
                        "type": "Attribute",
                        "namespace": "urn:oasis:names:tc:ciq:ct:3",
                    },
                )
                name_type: Optional[SubAdministrativeAreaNameTypeList] = field(
                    default=None,
                    metadata={
                        "name": "NameType",
                        "type": "Attribute",
                        "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    },
                )
                name_code: Optional[str] = field(
                    default=None,
                    metadata={
                        "name": "NameCode",
                        "type": "Attribute",
                        "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    },
                )
                name_code_type: Optional[str] = field(
                    default=None,
                    metadata={
                        "name": "NameCodeType",
                        "type": "Attribute",
                        "namespace": "urn:oasis:names:tc:ciq:xal:3",
                        "white_space": "collapse",
                    },
                )
                other_attributes: dict[str, str] = field(
                    default_factory=dict,
                    metadata={
                        "type": "Attributes",
                        "namespace": "##other",
                    },
                )

    @dataclass
    class Locality:
        """
        :ivar name_element: Data associated with the locality. e.g. Full
            name of the locality or part of it, reference location to
            the locality
        :ivar sub_locality: A locality that is smaller and is contained
            within the boundaries of its parent locality. Note that not
            all localities have sub locality. For example, many areas
            within a locality where each area is a sub locality
        :ivar type_value: Type of locality. e.g. suburb, area, zone,
            village, etc
        :ivar data_quality_type: This attribute indicates what level of
            trust can be given to the parent element. Omit this
            attribute if the data quality is unknown. If the data
            quality is known, the value is "Valid, else "InValid"
        :ivar valid_from: Date the data quality is valid from
        :ivar valid_to: Date the data quality is valid to
        :ivar other_attributes:
        """

        name_element: list["AddressType1.Locality.NameElement"] = field(
            default_factory=list,
            metadata={
                "name": "NameElement",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "min_occurs": 1,
            },
        )
        sub_locality: Optional["AddressType1.Locality.SubLocality"] = field(
            default=None,
            metadata={
                "name": "SubLocality",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        type_value: Optional[LocalityTypeList] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        data_quality_type: Optional[DataQualityTypeList] = field(
            default=None,
            metadata={
                "name": "DataQualityType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_from: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidFrom",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_to: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidTo",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )

        @dataclass
        class NameElement:
            """
            :ivar value:
            :ivar abbreviation: If set to true then indicates that the
                value is an abbreviation or initial. If set to false
                then the value is definitely not an abbreviation. If
                omitted then it is not known if the value is an
                abbreviation or not.
            :ivar name_type: semantics of data associated with name
            :ivar name_code: name of locality represented as a code
            :ivar name_code_type: type of code used to represent name as
                a code
            :ivar other_attributes:
            """

            value: str = field(
                default="",
                metadata={
                    "required": True,
                    "white_space": "collapse",
                },
            )
            abbreviation: Optional[bool] = field(
                default=None,
                metadata={
                    "name": "Abbreviation",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:ct:3",
                },
            )
            name_type: Optional[LocalityNameTypeList] = field(
                default=None,
                metadata={
                    "name": "NameType",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
            name_code: Optional[str] = field(
                default=None,
                metadata={
                    "name": "NameCode",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
            name_code_type: Optional[str] = field(
                default=None,
                metadata={
                    "name": "NameCodeType",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "white_space": "collapse",
                },
            )
            other_attributes: dict[str, str] = field(
                default_factory=dict,
                metadata={
                    "type": "Attributes",
                    "namespace": "##other",
                },
            )

        @dataclass
        class SubLocality:
            """
            :ivar name_element: Data associated with the sub locality.
                e.g. Full name of the locality or part of it, reference
                location to the locality
            :ivar type_value: Type of sub locality
            :ivar data_quality_type: This attribute indicates what level
                of trust can be given to the parent element. Omit this
                attribute if the data quality is unknown. If the data
                quality is known, the value is "Valid, else "InValid"
            :ivar valid_from: Date the data quality is valid from
            :ivar valid_to: Date the data quality is valid to
            :ivar other_attributes:
            """

            name_element: list[
                "AddressType1.Locality.SubLocality.NameElement"
            ] = field(
                default_factory=list,
                metadata={
                    "name": "NameElement",
                    "type": "Element",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "min_occurs": 1,
                },
            )
            type_value: Optional[SubLocalityTypeList] = field(
                default=None,
                metadata={
                    "name": "Type",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
            data_quality_type: Optional[DataQualityTypeList] = field(
                default=None,
                metadata={
                    "name": "DataQualityType",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:ct:3",
                },
            )
            valid_from: Optional[XmlDateTime] = field(
                default=None,
                metadata={
                    "name": "ValidFrom",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:ct:3",
                },
            )
            valid_to: Optional[XmlDateTime] = field(
                default=None,
                metadata={
                    "name": "ValidTo",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:ct:3",
                },
            )
            other_attributes: dict[str, str] = field(
                default_factory=dict,
                metadata={
                    "type": "Attributes",
                    "namespace": "##other",
                },
            )

            @dataclass
            class NameElement:
                """
                :ivar value:
                :ivar abbreviation: If set to true then indicates that
                    the value is an abbreviation or initial. If set to
                    false then the value is definitely not an
                    abbreviation. If omitted then it is not known if the
                    value is an abbreviation or not.
                :ivar name_type: semantics of data associated with name
                :ivar name_code: name of locality represented as a code
                :ivar name_code_type: type of code used to represent
                    name as a code
                :ivar other_attributes:
                """

                value: str = field(
                    default="",
                    metadata={
                        "required": True,
                        "white_space": "collapse",
                    },
                )
                abbreviation: Optional[bool] = field(
                    default=None,
                    metadata={
                        "name": "Abbreviation",
                        "type": "Attribute",
                        "namespace": "urn:oasis:names:tc:ciq:ct:3",
                    },
                )
                name_type: Optional[SubLocalityNameTypeList] = field(
                    default=None,
                    metadata={
                        "name": "NameType",
                        "type": "Attribute",
                        "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    },
                )
                name_code: Optional[str] = field(
                    default=None,
                    metadata={
                        "name": "NameCode",
                        "type": "Attribute",
                        "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    },
                )
                name_code_type: Optional[str] = field(
                    default=None,
                    metadata={
                        "name": "NameCodeType",
                        "type": "Attribute",
                        "namespace": "urn:oasis:names:tc:ciq:xal:3",
                        "white_space": "collapse",
                    },
                )
                other_attributes: dict[str, str] = field(
                    default_factory=dict,
                    metadata={
                        "type": "Attributes",
                        "namespace": "##other",
                    },
                )

    @dataclass
    class Thoroughfare(ThoroughfareType):
        """
        :ivar sub_thoroughfare: Another thoroughfare that is required to
            uniquely identify the location, such as an access route,
            intersection, corner, adjacent, boundary, etc
        """

        sub_thoroughfare: list[ThoroughfareType] = field(
            default_factory=list,
            metadata={
                "name": "SubThoroughfare",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "max_occurs": 5,
            },
        )

    @dataclass
    class Premises(PremisesType):
        """
        :ivar sub_premises: Examples of sub-premises are apartments and
            suites in buildings, shops in malls, etc.  or sub-addresses
            in a land mark place such as airports, military bases,
            hospitals, etc. Some countries have blocks within blocks
        :ivar type_value:
        :ivar type_code: Type of code use for Premises Type attribute
        """

        sub_premises: list["AddressType1.Premises.SubPremises"] = field(
            default_factory=list,
            metadata={
                "name": "SubPremises",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        type_value: Optional[PremisesTypeList] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        type_code: Optional[str] = field(
            default=None,
            metadata={
                "name": "TypeCode",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "white_space": "collapse",
            },
        )

        @dataclass
        class SubPremises(PremisesType):
            """
            :ivar type_value:
            :ivar type_code: Type of code used for sub premises type
                attribute
            """

            type_value: Optional[SubPremisesTypeList] = field(
                default=None,
                metadata={
                    "name": "Type",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
            type_code: Optional[str] = field(
                default=None,
                metadata={
                    "name": "TypeCode",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "white_space": "collapse",
                },
            )

    @dataclass
    class PostCode:
        """
        :ivar identifier: The postcode is formatted according to
            country-specific rules. Example: SW3 0A8-1A, 600074, 2067.
            This element can also be used to define the semantics of
            what each code in the post code means
        :ivar data_quality_type: This attribute indicates what level of
            trust can be given to the parent element. Omit this
            attribute if the data quality is unknown. If the data
            quality is known, the value is "Valid, else "InValid"
        :ivar valid_from: Date the data quality is valid from
        :ivar valid_to: Date the data quality is valid to
        :ivar other_attributes:
        """

        identifier: list[IdentifierType] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "min_occurs": 1,
            },
        )
        data_quality_type: Optional[DataQualityTypeList] = field(
            default=None,
            metadata={
                "name": "DataQualityType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_from: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidFrom",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_to: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidTo",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )

    @dataclass
    class RuralDelivery:
        """
        :ivar identifier: Free text or structured description of rural
            delivery route. e.g. RD 6,
        :ivar type_value: Type of rural delivery. For some addresses,
            delivery to rural areas happens via water, air or road
        :ivar data_quality_type: This attribute indicates what level of
            trust can be given to the parent element. Omit this
            attribute if the data quality is unknown. If the data
            quality is known, the value is "Valid, else "InValid"
        :ivar valid_from: Date the data quality is valid from
        :ivar valid_to: Date the data quality is valid to
        :ivar other_attributes:
        """

        identifier: list[IdentifierType] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "min_occurs": 1,
            },
        )
        type_value: Optional[str] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        data_quality_type: Optional[DataQualityTypeList] = field(
            default=None,
            metadata={
                "name": "DataQualityType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_from: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidFrom",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_to: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidTo",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )

    @dataclass
    class PostalDeliveryPoint:
        """
        :ivar identifier: Free text or structured description of a
            postal delivery point.
        :ivar type_value:
        :ivar data_quality_type: This attribute indicates what level of
            trust can be given to the parent element. Omit this
            attribute if the data quality is unknown. If the data
            quality is known, the value is "Valid, else "InValid"
        :ivar valid_from: Date the data quality is valid from
        :ivar valid_to: Date the data quality is valid to
        :ivar other_attributes:
        """

        identifier: list[IdentifierType] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "min_occurs": 1,
            },
        )
        type_value: Optional[PostalDeliveryPointTypeList] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        data_quality_type: Optional[DataQualityTypeList] = field(
            default=None,
            metadata={
                "name": "DataQualityType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_from: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidFrom",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_to: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidTo",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )

    @dataclass
    class PostOffice:
        """
        :ivar identifier: Name or number of the post office in free text
            or structured form.
        :ivar type_value: Indicates the type of postal delivery office
            from where the mail will be distributed to the final
            delivery point by a delivery mode.  Example: Post Office,
            Mail Collection Centre, Letter Carrier Depot,  Station, etc.
        :ivar data_quality_type: This attribute indicates what level of
            trust can be given to the parent element. Omit this
            attribute if the data quality is unknown. If the data
            quality is known, the value is "Valid, else "InValid"
        :ivar valid_from: Date the data quality is valid from
        :ivar valid_to: Date the data quality is valid to
        :ivar other_attributes:
        """

        identifier: list[IdentifierType] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "min_occurs": 1,
            },
        )
        type_value: Optional[str] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        data_quality_type: Optional[DataQualityTypeList] = field(
            default=None,
            metadata={
                "name": "DataQualityType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_from: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidFrom",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_to: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidTo",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )

    @dataclass
    class GeoRss:
        """
        :ivar georss_org_georss_element: Could be GeoRSS Simple or
            GeoRSS GML versions. Refer to http://georss.org/ and
            http://georss.org/gml for further documentation
        :ivar other_attributes:
        """

        georss_org_georss_element: list[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "http://www.georss.org/georss",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )

    @dataclass
    class LocationByCoordinates:
        """
        :ivar latitude: Latitude details
        :ivar longitude: Longitude details
        :ivar meridian: The collection of the coordinate numeric values
            for latitude amd longtitude depends on the agreed position
            of the meridian. Declaration of the meridian is necessary as
            it cannot be assumed in the data
        :ivar meridian_code_type: Type of code used. e.g. EPSG Code
        :ivar datum: The collection of the coordinate numeric values
            depends on the agreed datum within which the measurement was
            taken. Declaration of the datum is necessary as it cannot be
            assumed in the data
        :ivar datum_code_type: Type of code used. e.g. EPSG Code, WGS-84
        :ivar projection: Coordinates have limited utility and
            application depending on the projection required for
            visualisation in a map. Declaration of projection is
            necessary as it cannot be assumed in data
        :ivar projection_code_type: Type of code used. e.g. EPSG Code
        :ivar data_quality_type: This attribute indicates what level of
            trust can be given to the parent element. Omit this
            attribute if the data quality is unknown. If the data
            quality is known, the value is "Valid, else "InValid"
        :ivar valid_from: Date the data quality is valid from
        :ivar valid_to: Date the data quality is valid to
        :ivar other_attributes:
        """

        latitude: Optional["AddressType1.LocationByCoordinates.Latitude"] = (
            field(
                default=None,
                metadata={
                    "name": "Latitude",
                    "type": "Element",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
        )
        longitude: Optional["AddressType1.LocationByCoordinates.Longitude"] = (
            field(
                default=None,
                metadata={
                    "name": "Longitude",
                    "type": "Element",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
        )
        meridian: Optional[str] = field(
            default=None,
            metadata={
                "name": "Meridian",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        meridian_code_type: Optional[str] = field(
            default=None,
            metadata={
                "name": "MeridianCodeType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "white_space": "collapse",
            },
        )
        datum: Optional[str] = field(
            default=None,
            metadata={
                "name": "Datum",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        datum_code_type: Optional[str] = field(
            default=None,
            metadata={
                "name": "DatumCodeType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "white_space": "collapse",
            },
        )
        projection: Optional[str] = field(
            default=None,
            metadata={
                "name": "Projection",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
            },
        )
        projection_code_type: Optional[str] = field(
            default=None,
            metadata={
                "name": "ProjectionCodeType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "white_space": "collapse",
            },
        )
        data_quality_type: Optional[DataQualityTypeList] = field(
            default=None,
            metadata={
                "name": "DataQualityType",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_from: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidFrom",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        valid_to: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "ValidTo",
                "type": "Attribute",
                "namespace": "urn:oasis:names:tc:ciq:ct:3",
            },
        )
        other_attributes: dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            },
        )

        @dataclass
        class Latitude:
            """
            :ivar degrees_measure: Measure of the latitude in degrees
            :ivar minutes_measure: Measure of the latitude in minutes
            :ivar seconds_measure: Measure of the latitude in seconds
            :ivar direction: The direction of latitude measurement
                offset from the equator
            :ivar other_attributes:
            """

            degrees_measure: Optional[str] = field(
                default=None,
                metadata={
                    "name": "DegreesMeasure",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "white_space": "collapse",
                },
            )
            minutes_measure: Optional[str] = field(
                default=None,
                metadata={
                    "name": "MinutesMeasure",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "white_space": "collapse",
                },
            )
            seconds_measure: Optional[str] = field(
                default=None,
                metadata={
                    "name": "SecondsMeasure",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "white_space": "collapse",
                },
            )
            direction: Optional[DirectionTypeList] = field(
                default=None,
                metadata={
                    "name": "Direction",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
            other_attributes: dict[str, str] = field(
                default_factory=dict,
                metadata={
                    "type": "Attributes",
                    "namespace": "##other",
                },
            )

        @dataclass
        class Longitude:
            """
            :ivar degrees_measure: Measure of the longitude in degrees
            :ivar minutes_measure: Measure of the longitude in minutes
            :ivar seconds_measure: Measure of the longitude in seconds
            :ivar direction: The direction of  longitude measurement
                offset from the equator
            :ivar other_attributes:
            """

            degrees_measure: Optional[str] = field(
                default=None,
                metadata={
                    "name": "DegreesMeasure",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "white_space": "collapse",
                },
            )
            minutes_measure: Optional[str] = field(
                default=None,
                metadata={
                    "name": "MinutesMeasure",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "white_space": "collapse",
                },
            )
            seconds_measure: Optional[str] = field(
                default=None,
                metadata={
                    "name": "SecondsMeasure",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                    "white_space": "collapse",
                },
            )
            direction: Optional[DirectionTypeList] = field(
                default=None,
                metadata={
                    "name": "Direction",
                    "type": "Attribute",
                    "namespace": "urn:oasis:names:tc:ciq:xal:3",
                },
            )
            other_attributes: dict[str, str] = field(
                default_factory=dict,
                metadata={
                    "type": "Attributes",
                    "namespace": "##other",
                },
            )


@dataclass
class MultiplicityRange(MultiplicityRangeType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class TypeName(TypeNameType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class CiAddress(CiAddressType):
    class Meta:
        name = "CI_Address"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiDate(CiDateType):
    class Meta:
        name = "CI_Date"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiOnlineResource(CiOnlineResourceType):
    class Meta:
        name = "CI_OnlineResource"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiSeries(CiSeriesType):
    class Meta:
        name = "CI_Series"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CiTelephone(CiTelephoneType):
    class Meta:
        name = "CI_Telephone"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class ExGeographicBoundingBox(ExGeographicBoundingBoxType):
    class Meta:
        name = "EX_GeographicBoundingBox"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class ExVerticalExtentPropertyType:
    """
    :ivar ex_vertical_extent:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "EX_VerticalExtent_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_vertical_extent: Optional[ExVerticalExtent] = field(
        default=None,
        metadata={
            "name": "EX_VerticalExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdBrowseGraphic(MdBrowseGraphicType):
    class Meta:
        name = "MD_BrowseGraphic"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdConstraints(MdConstraintsType):
    class Meta:
        name = "MD_Constraints"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDimensionType(AbstractObjectType):
    class Meta:
        name = "MD_Dimension_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dimension_name: Optional[MdDimensionNameTypeCodePropertyType] = field(
        default=None,
        metadata={
            "name": "dimensionName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    dimension_size: Optional[IntegerPropertyType] = field(
        default=None,
        metadata={
            "name": "dimensionSize",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    resolution: Optional[MeasurePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdGeometricObjects(MdGeometricObjectsType):
    class Meta:
        name = "MD_GeometricObjects"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdIdentifier(MdIdentifierType):
    class Meta:
        name = "MD_Identifier"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdLegalConstraintsType(MdConstraintsType):
    """
    Restrictions and legal prerequisites for accessing and using the dataset.
    """

    class Meta:
        name = "MD_LegalConstraints_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    access_constraints: list[MdRestrictionCodePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "accessConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    use_constraints: list[MdRestrictionCodePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "useConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    other_constraints: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "otherConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdMedium(MdMediumType):
    class Meta:
        name = "MD_Medium"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdRepresentativeFractionPropertyType:
    """
    :ivar md_representative_fraction:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_RepresentativeFraction_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_representative_fraction: Optional[MdRepresentativeFraction] = field(
        default=None,
        metadata={
            "name": "MD_RepresentativeFraction",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdScopeDescription(MdScopeDescriptionType):
    class Meta:
        name = "MD_ScopeDescription"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdSecurityConstraintsType(MdConstraintsType):
    """
    Handling restrictions imposed on the dataset because of national security,
    privacy, or other concerns.
    """

    class Meta:
        name = "MD_SecurityConstraints_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    classification: Optional[MdClassificationCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    user_note: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "userNote",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    classification_system: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "classificationSystem",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    handling_description: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "handlingDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdStandardOrderProcess(MdStandardOrderProcessType):
    class Meta:
        name = "MD_StandardOrderProcess"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class PtFreeText(PtFreeTextType):
    class Meta:
        name = "PT_FreeText"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class PtLocale(PtLocaleType):
    class Meta:
        name = "PT_Locale"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class RsIdentifierType(MdIdentifierType):
    class Meta:
        name = "RS_Identifier_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    code_space: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    version: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class QualifiedAreaPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    qualified_area: Optional[QualifiedArea] = field(
        default=None,
        metadata={
            "name": "QualifiedArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )


@dataclass
class QualifiedVolumePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    qualified_volume: Optional[QualifiedVolume] = field(
        default=None,
        metadata={
            "name": "QualifiedVolume",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )


@dataclass
class RoomHeightPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    room_height: Optional[RoomHeight] = field(
        default=None,
        metadata={
            "name": "RoomHeight",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "required": True,
        },
    )


@dataclass
class HeightPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    height: Optional[Height] = field(
        default=None,
        metadata={
            "name": "Height",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "required": True,
        },
    )


@dataclass
class GenericAttributeSetType(AbstractGenericAttributeType):
    """
    :ivar name: Specifies the name of the GenericAttributeSet.
    :ivar code_space: Associates the GenericAttributeSet with an
        authority that maintains the collection of generic attributes.
    :ivar generic_attribute: Relates to the generic attributes that are
        part of the GenericAttributeSet.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    generic_attribute: list[AbstractGenericAttributePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "genericAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "min_occurs": 1,
        },
    )


@dataclass
class ClothoidType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    ref_location: Optional["ClothoidType.RefLocation"] = field(
        default=None,
        metadata={
            "name": "refLocation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    scale_factor: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "scaleFactor",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    start_parameter: Optional[float] = field(
        default=None,
        metadata={
            "name": "startParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    end_parameter: Optional[float] = field(
        default=None,
        metadata={
            "name": "endParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CLOTHOID,
        metadata={
            "type": "Attribute",
        },
    )

    @dataclass
    class RefLocation:
        affine_placement: Optional[AffinePlacement] = field(
            default=None,
            metadata={
                "name": "AffinePlacement",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
                "required": True,
            },
        )


@dataclass
class CoverageFunctionType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    mapping_rule: Optional[MappingRule] = field(
        default=None,
        metadata={
            "name": "MappingRule",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coverage_mapping_rule: Optional[CoverageMappingRule] = field(
        default=None,
        metadata={
            "name": "CoverageMappingRule",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_function: Optional[GridFunction] = field(
        default=None,
        metadata={
            "name": "GridFunction",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DataBlock(DataBlockType):
    """Gml:DataBlock describes the Range as a block of text encoded values similar
    to a Common Separated Value (CSV) representation.

    The range set parameterization is described by the property
    gml:rangeParameters.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectionPropertyType:
    """
    :ivar direction_vector:
    :ivar direction_description:
    :ivar compass_point:
    :ivar direction_keyword:
    :ivar direction_string:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    direction_vector: Optional[DirectionVectorType] = field(
        default=None,
        metadata={
            "name": "DirectionVector",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    direction_description: Optional[DirectionDescriptionType] = field(
        default=None,
        metadata={
            "name": "DirectionDescription",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    compass_point: Optional[CompassPointEnumeration] = field(
        default=None,
        metadata={
            "name": "CompassPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    direction_keyword: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "DirectionKeyword",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    direction_string: Optional[StringOrRefType] = field(
        default=None,
        metadata={
            "name": "DirectionString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class EnvelopeWithTimePeriod(EnvelopeWithTimePeriodType):
    """Gml:EnvelopeWithTimePeriod is provided for envelopes that include a temporal
    extent.

    It adds two time position properties, gml:beginPosition and
    gml:endPosition, which describe the extent of a time-envelope. Since
    gml:EnvelopeWithTimePeriod is assigned to the substitution group
    headed by gml:Envelope, it may be used whenever gml:Envelope is
    valid.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class File(FileType):
    """For efficiency reasons, GML also provides a means of encoding the range set
    in an arbitrary external encoding, such as a binary file.

    This encoding may be "well-known" but this is not required. This
    mode uses the gml:File element. The values of the coverage
    (attribute values in the range set) are transmitted in a external
    file that is referenced from the XML structure described by
    gml:FileType.  The external file is referenced by the
    gml:fileReference property that is an anyURI (the gml:fileName
    property has been deprecated).  This means that the external file
    may be located remotely from the referencing GML instance. The
    gml:compression property points to a definition of a compression
    algorithm through an anyURI.  This may be a retrievable, computable
    definition or simply a reference to an unambiguous name for the
    compression method. The gml:mimeType property points to a definition
    of the file mime type. The gml:fileStructure property is defined by
    a codelist. Note further that all values shall be enclosed in a
    single file. Multi-file structures for values are not supported in
    GML. The semantics of the range set is described as above using the
    gml:rangeParameters property. Note that if any compression algorithm
    is applied, the structure above applies only to the pre-compression
    or post-decompression structure of the file. Note that the fields
    within a record match the gml:valueComponents of the
    gml:CompositeValue in document order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DmsAngle(DmsangleType):
    class Meta:
        name = "dmsAngle"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DmsAngleValue(DmsangleType):
    class Meta:
        name = "dmsAngleValue"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MetaDataProperty(MetaDataPropertyType):
    class Meta:
        name = "metaDataProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Address1(AddressType1):
    """
    Top level element for address with geocode details.
    """

    class Meta:
        name = "Address"
        namespace = "urn:oasis:names:tc:ciq:xal:3"


@dataclass
class MultiplicityRangePropertyType:
    """
    :ivar multiplicity_range:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MultiplicityRange_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    multiplicity_range: Optional[MultiplicityRange] = field(
        default=None,
        metadata={
            "name": "MultiplicityRange",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class TypeNamePropertyType:
    """
    :ivar type_name:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "TypeName_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    type_name: Optional[TypeName] = field(
        default=None,
        metadata={
            "name": "TypeName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiAddressPropertyType:
    """
    :ivar ci_address:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "CI_Address_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_address: Optional[CiAddress] = field(
        default=None,
        metadata={
            "name": "CI_Address",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiDatePropertyType:
    """
    :ivar ci_date:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "CI_Date_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_date: Optional[CiDate] = field(
        default=None,
        metadata={
            "name": "CI_Date",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiOnlineResourcePropertyType:
    """
    :ivar ci_online_resource:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "CI_OnlineResource_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_online_resource: Optional[CiOnlineResource] = field(
        default=None,
        metadata={
            "name": "CI_OnlineResource",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiSeriesPropertyType:
    """
    :ivar ci_series:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "CI_Series_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_series: Optional[CiSeries] = field(
        default=None,
        metadata={
            "name": "CI_Series",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiTelephonePropertyType:
    """
    :ivar ci_telephone:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "CI_Telephone_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_telephone: Optional[CiTelephone] = field(
        default=None,
        metadata={
            "name": "CI_Telephone",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExGeographicBoundingBoxPropertyType:
    """
    :ivar ex_geographic_bounding_box:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "EX_GeographicBoundingBox_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_geographic_bounding_box: Optional[ExGeographicBoundingBox] = field(
        default=None,
        metadata={
            "name": "EX_GeographicBoundingBox",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdBrowseGraphicPropertyType:
    """
    :ivar md_browse_graphic:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_BrowseGraphic_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_browse_graphic: Optional[MdBrowseGraphic] = field(
        default=None,
        metadata={
            "name": "MD_BrowseGraphic",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDimension(MdDimensionType):
    class Meta:
        name = "MD_Dimension"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdGeometricObjectsPropertyType:
    """
    :ivar md_geometric_objects:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_GeometricObjects_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_geometric_objects: Optional[MdGeometricObjects] = field(
        default=None,
        metadata={
            "name": "MD_GeometricObjects",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdLegalConstraints(MdLegalConstraintsType):
    class Meta:
        name = "MD_LegalConstraints"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMediumPropertyType:
    """
    :ivar md_medium:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Medium_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_medium: Optional[MdMedium] = field(
        default=None,
        metadata={
            "name": "MD_Medium",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdResolutionType:
    class Meta:
        name = "MD_Resolution_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    equivalent_scale: Optional[MdRepresentativeFractionPropertyType] = field(
        default=None,
        metadata={
            "name": "equivalentScale",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    distance: Optional[DistancePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdScopeDescriptionPropertyType:
    class Meta:
        name = "MD_ScopeDescription_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_scope_description: Optional[MdScopeDescription] = field(
        default=None,
        metadata={
            "name": "MD_ScopeDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdSecurityConstraints(MdSecurityConstraintsType):
    class Meta:
        name = "MD_SecurityConstraints"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdStandardOrderProcessPropertyType:
    """
    :ivar md_standard_order_process:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_StandardOrderProcess_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_standard_order_process: Optional[MdStandardOrderProcess] = field(
        default=None,
        metadata={
            "name": "MD_StandardOrderProcess",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class PtFreeTextPropertyType(CharacterStringPropertyType):
    class Meta:
        name = "PT_FreeText_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    pt_free_text: Optional[PtFreeText] = field(
        default=None,
        metadata={
            "name": "PT_FreeText",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class PtLocalePropertyType:
    """
    :ivar pt_locale:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "PT_Locale_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    pt_locale: Optional[PtLocale] = field(
        default=None,
        metadata={
            "name": "PT_Locale",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class RsIdentifier(RsIdentifierType):
    class Meta:
        name = "RS_Identifier"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class GenericAttributeSet(GenericAttributeSetType):
    """
    A GenericAttributeSet is a named collection of generic attributes.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AbstractGmltype:
    class Meta:
        name = "AbstractGMLType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    meta_data_property: list[MetaDataProperty] = field(
        default_factory=list,
        metadata={
            "name": "metaDataProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    description: Optional[Description] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    description_reference: Optional[DescriptionReference] = field(
        default=None,
        metadata={
            "name": "descriptionReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    identifier: Optional[Identifier] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    name: list[Name] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AngleChoiceType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    angle: Optional[Angle2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dms_angle: Optional[DmsAngle] = field(
        default=None,
        metadata={
            "name": "dmsAngle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class BoundingShapeType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    envelope_with_time_period: Optional[EnvelopeWithTimePeriod] = field(
        default=None,
        metadata={
            "name": "EnvelopeWithTimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    envelope: Optional[Envelope] = field(
        default=None,
        metadata={
            "name": "Envelope",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    null: Optional[Null] = field(
        default=None,
        metadata={
            "name": "Null",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class Clothoid(ClothoidType):
    """A clothoid, or Cornu's spiral, is plane curve whose curvature is a fixed
    function of its length.

    refLocation, startParameter, endParameter and scaleFactor have the
    same meaning as specified in ISO 19107:2003, 6.4.22. interpolation
    is fixed as "clothoid". The content model follows the general
    pattern for the encoding of curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoverageFunction(CoverageFunctionType):
    """The gml:coverageFunction property describes the mapping function from the
    domain to the range of the coverage.

    The value of the CoverageFunction is one of gml:CoverageMappingRule
    and gml:GridFunction. If the gml:coverageFunction property is
    omitted for a gridded coverage (including rectified gridded
    coverages) the gml:startPoint is assumed to be the value of the
    gml:low property in the gml:Grid geometry, and the gml:sequenceRule
    is assumed to be linear and the gml:axisOrder property is assumed to
    be "+1 +2".
    """

    class Meta:
        name = "coverageFunction"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Direction(DirectionPropertyType):
    """
    The property gml:direction is intended as a pre-defined property expressing a
    direction to be assigned to features defined in a GML application schema.
    """

    class Meta:
        name = "direction"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MemberNameType(AbstractObjectType):
    """A MemberName is a LocalName that references either an attribute slot in a
    record or  recordType or an attribute, operation, or association role in an
    object instance or  type description in some form of schema.

    The stored value "aName" is the returned value for the "aName()"
    operation.
    """

    class Meta:
        name = "MemberName_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    a_name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "aName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "required": True,
        },
    )
    attribute_type: Optional[TypeNamePropertyType] = field(
        default=None,
        metadata={
            "name": "attributeType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "required": True,
        },
    )


@dataclass
class MultiplicityType(AbstractObjectType):
    """Use to represent the possible cardinality of a relation.

    Represented by a set of simple multiplicity ranges.
    """

    class Meta:
        name = "Multiplicity_Type"
        target_namespace = "http://www.isotc211.org/2005/gco"

    range: list[MultiplicityRangePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
            "min_occurs": 1,
        },
    )


@dataclass
class CiContactType(AbstractObjectType):
    """
    Information required enabling contact with the  responsible person and/or
    organisation.
    """

    class Meta:
        name = "CI_Contact_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    phone: Optional[CiTelephonePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    address: Optional[CiAddressPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    online_resource: Optional[CiOnlineResourcePropertyType] = field(
        default=None,
        metadata={
            "name": "onlineResource",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    hours_of_service: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "hoursOfService",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    contact_instructions: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "contactInstructions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdConstraintsPropertyType:
    """
    :ivar md_security_constraints:
    :ivar md_legal_constraints:
    :ivar md_constraints:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Constraints_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_security_constraints: Optional[MdSecurityConstraints] = field(
        default=None,
        metadata={
            "name": "MD_SecurityConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_legal_constraints: Optional[MdLegalConstraints] = field(
        default=None,
        metadata={
            "name": "MD_LegalConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_constraints: Optional[MdConstraints] = field(
        default=None,
        metadata={
            "name": "MD_Constraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDigitalTransferOptionsType(AbstractObjectType):
    """
    Technical means and media by which a dataset is obtained from the distributor.
    """

    class Meta:
        name = "MD_DigitalTransferOptions_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    units_of_distribution: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "unitsOfDistribution",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    transfer_size: Optional[RealPropertyType] = field(
        default=None,
        metadata={
            "name": "transferSize",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    on_line: list[CiOnlineResourcePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "onLine",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    off_line: Optional[MdMediumPropertyType] = field(
        default=None,
        metadata={
            "name": "offLine",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdDimensionPropertyType:
    """
    :ivar md_dimension:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Dimension_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_dimension: Optional[MdDimension] = field(
        default=None,
        metadata={
            "name": "MD_Dimension",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdIdentifierPropertyType:
    """
    :ivar rs_identifier:
    :ivar md_identifier:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Identifier_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    rs_identifier: Optional[RsIdentifier] = field(
        default=None,
        metadata={
            "name": "RS_Identifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_identifier: Optional[MdIdentifier] = field(
        default=None,
        metadata={
            "name": "MD_Identifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdLegalConstraintsPropertyType:
    """
    :ivar md_legal_constraints:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_LegalConstraints_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_legal_constraints: Optional[MdLegalConstraints] = field(
        default=None,
        metadata={
            "name": "MD_LegalConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdResolution(MdResolutionType):
    class Meta:
        name = "MD_Resolution"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdSecurityConstraintsPropertyType:
    """
    :ivar md_security_constraints:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_SecurityConstraints_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_security_constraints: Optional[MdSecurityConstraints] = field(
        default=None,
        metadata={
            "name": "MD_SecurityConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdVectorSpatialRepresentationType(AbstractMdSpatialRepresentationType):
    """
    Information about the vector spatial objects in the dataset.
    """

    class Meta:
        name = "MD_VectorSpatialRepresentation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    topology_level: Optional[MdTopologyLevelCodePropertyType] = field(
        default=None,
        metadata={
            "name": "topologyLevel",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    geometric_objects: list[MdGeometricObjectsPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "geometricObjects",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class RsIdentifierPropertyType:
    """
    :ivar rs_identifier:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "RS_Identifier_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    rs_identifier: Optional[RsIdentifier] = field(
        default=None,
        metadata={
            "name": "RS_Identifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class TextureAssociationType(AbstractGmltype):
    """
    :ivar target: Specifies the URI that points to the surface geometry
        object to which the texture is applied.
    :ivar texture_parameterization: Relates to the texture coordinates
        or transformation matrices used for parameterization.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    target: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "required": True,
        },
    )
    texture_parameterization: Optional[
        AbstractTextureParameterizationPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "textureParameterization",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "required": True,
        },
    )


@dataclass
class GenericAttributeSetPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    generic_attribute_set: Optional[GenericAttributeSet] = field(
        default=None,
        metadata={
            "name": "GenericAttributeSet",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "required": True,
        },
    )


@dataclass
class AbstractGml(AbstractGmltype):
    """The abstract element gml:AbstractGML is "any GML object having identity".

    It acts as the head of an XML Schema substitution group, which may
    include any element which is a GML feature, or other object, with
    identity.  This is used as a variable in content models in GML core
    and application schemas.  It is effectively an abstract superclass
    for all GML objects.
    """

    class Meta:
        name = "AbstractGML"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeometryType(AbstractGmltype):
    """All geometry elements are derived directly or indirectly from this abstract
    supertype. A geometry element may have an identifying attribute (gml:id), one
    or more names (elements identifier and name) and a description (elements
    description and descriptionReference) . It may be associated with a spatial
    reference system (attribute group gml:SRSReferenceGroup).

    The following rules shall be adhered to:
    -       Every geometry type shall derive from this abstract type.
    -       Every geometry element (i.e. an element of a geometry type) shall be directly or indirectly in the substitution group of AbstractGeometry.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        },
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        },
    )
    axis_labels_attribute: list[str] = field(
        default_factory=list,
        metadata={
            "name": "axisLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )
    uom_labels: list[str] = field(
        default_factory=list,
        metadata={
            "name": "uomLabels",
            "type": "Attribute",
            "tokens": True,
        },
    )


@dataclass
class AbstractTimeObjectType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTopologyType(AbstractGmltype):
    """This abstract type supplies the root or base type for all topological
    elements including primitives and complexes.

    It inherits AbstractGMLType and hence can be identified using the
    gml:id attribute.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DefinitionBaseType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    identifier: Optional[Identifier] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class BoundedBy(BoundingShapeType):
    """
    This property describes the minimum bounding box or rectangle that encloses the
    entire feature.
    """

    class Meta:
        name = "boundedBy"
        nillable = True
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MemberName(MemberNameType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class Multiplicity(MultiplicityType):
    class Meta:
        namespace = "http://www.isotc211.org/2005/gco"


@dataclass
class CiContact(CiContactType):
    class Meta:
        name = "CI_Contact"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class ExGeographicDescriptionType(AbstractExGeographicExtentType):
    class Meta:
        name = "EX_GeographicDescription_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    geographic_identifier: Optional[MdIdentifierPropertyType] = field(
        default=None,
        metadata={
            "name": "geographicIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class MdDigitalTransferOptions(MdDigitalTransferOptionsType):
    class Meta:
        name = "MD_DigitalTransferOptions"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdGridSpatialRepresentationType(AbstractMdSpatialRepresentationType):
    """
    Types and numbers of raster spatial objects in the dataset.
    """

    class Meta:
        name = "MD_GridSpatialRepresentation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    number_of_dimensions: Optional[IntegerPropertyType] = field(
        default=None,
        metadata={
            "name": "numberOfDimensions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    axis_dimension_properties: list[MdDimensionPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "axisDimensionProperties",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    cell_geometry: Optional[MdCellGeometryCodePropertyType] = field(
        default=None,
        metadata={
            "name": "cellGeometry",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    transformation_parameter_availability: Optional[BooleanPropertyType2] = (
        field(
            default=None,
            metadata={
                "name": "transformationParameterAvailability",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
                "required": True,
            },
        )
    )


@dataclass
class MdReferenceSystemType(AbstractObjectType):
    class Meta:
        name = "MD_ReferenceSystem_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    reference_system_identifier: Optional[RsIdentifierPropertyType] = field(
        default=None,
        metadata={
            "name": "referenceSystemIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdResolutionPropertyType:
    class Meta:
        name = "MD_Resolution_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_resolution: Optional[MdResolution] = field(
        default=None,
        metadata={
            "name": "MD_Resolution",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdVectorSpatialRepresentation(MdVectorSpatialRepresentationType):
    class Meta:
        name = "MD_VectorSpatialRepresentation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class TextureAssociation(TextureAssociationType):
    """
    TextureAssociation denotes the relation of a texture to a surface geometry
    object.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AbstractGeometricAggregateType(AbstractGeometryType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class AbstractGeometricPrimitiveType(AbstractGeometryType):
    """Gml:AbstractGeometricPrimitiveType is the abstract root type of the
    geometric primitives.

    A geometric primitive is a geometric object that is not decomposed
    further into other primitives in the system. All primitives are
    oriented in the direction implied by the sequence of their
    coordinate tuples.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeometry(AbstractGeometryType):
    """The AbstractGeometry element is the abstract head of the substitution group
    for all geometry elements of GML.

    This includes pre-defined and user-defined geometry elements. Any
    geometry element shall be a direct or indirect extension/restriction
    of AbstractGeometryType and shall be directly or indirectly in the
    substitution group of AbstractGeometry.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractImplicitGeometry(AbstractGeometryType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeComplexType(AbstractTimeObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeObject(AbstractTimeObjectType):
    """
    Gml:AbstractTimeObject acts as the head of a substitution group for all
    temporal primitives and complexes.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimePrimitiveType(AbstractTimeObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    related_time: list["RelatedTimeType"] = field(
        default_factory=list,
        metadata={
            "name": "relatedTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractTopoPrimitiveType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTopology(AbstractTopologyType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DefinitionType(DefinitionBaseType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    remarks: Optional[Remarks] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GridType(AbstractGeometryType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    limits: Optional[GridLimitsType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    axis_labels: list[str] = field(
        default_factory=list,
        metadata={
            "name": "axisLabels",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "tokens": True,
        },
    )
    axis_name: list[str] = field(
        default_factory=list,
        metadata={
            "name": "axisName",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dimension: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class MemberNamePropertyType:
    """
    :ivar member_name:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MemberName_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    member_name: Optional[MemberName] = field(
        default=None,
        metadata={
            "name": "MemberName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MultiplicityPropertyType:
    """
    :ivar multiplicity:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "Multiplicity_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    multiplicity: Optional[Multiplicity] = field(
        default=None,
        metadata={
            "name": "Multiplicity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gco",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiContactPropertyType:
    """
    :ivar ci_contact:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "CI_Contact_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_contact: Optional[CiContact] = field(
        default=None,
        metadata={
            "name": "CI_Contact",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExGeographicDescription(ExGeographicDescriptionType):
    class Meta:
        name = "EX_GeographicDescription"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDigitalTransferOptionsPropertyType:
    """
    :ivar md_digital_transfer_options:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_DigitalTransferOptions_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_digital_transfer_options: Optional[MdDigitalTransferOptions] = field(
        default=None,
        metadata={
            "name": "MD_DigitalTransferOptions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGridSpatialRepresentation(MdGridSpatialRepresentationType):
    class Meta:
        name = "MD_GridSpatialRepresentation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdReferenceSystem(MdReferenceSystemType):
    class Meta:
        name = "MD_ReferenceSystem"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdVectorSpatialRepresentationPropertyType:
    """
    :ivar md_vector_spatial_representation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_VectorSpatialRepresentation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_vector_spatial_representation: Optional[
        MdVectorSpatialRepresentation
    ] = field(
        default=None,
        metadata={
            "name": "MD_VectorSpatialRepresentation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class TextureAssociationPropertyType:
    """
    :ivar texture_association:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    texture_association: Optional[TextureAssociation] = field(
        default=None,
        metadata={
            "name": "TextureAssociation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractCurveType(AbstractGeometricPrimitiveType):
    """Gml:AbstractCurveType is an abstraction of a curve to support the different
    levels of complexity.

    The curve may always be viewed as a geometric primitive, i.e. is
    continuous.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeometricAggregate(AbstractGeometricAggregateType):
    """
    Gml:AbstractGeometricAggregate is the abstract head of the substitution group
    for all geometric aggregates.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeometricPrimitive(AbstractGeometricPrimitiveType):
    """
    The AbstractGeometricPrimitive element is the abstract head of the substitution
    group for all (pre- and user-defined) geometric primitives.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSolidType(AbstractGeometricPrimitiveType):
    """Gml:AbstractSolidType is an abstraction of a solid to support the different
    levels of complexity.

    The solid may always be viewed as a geometric primitive, i.e. is
    contiguous.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSurfaceType(AbstractGeometricPrimitiveType):
    """Gml:AbstractSurfaceType is an abstraction of a surface to support the
    different levels of complexity.

    A surface is always a continuous region of a plane.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeComplex(AbstractTimeComplexType):
    """
    Gml:AbstractTimeComplex is an aggregation of temporal primitives and acts as
    the head of a substitution group for temporal complexes.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeGeometricPrimitiveType(AbstractTimePrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    frame: str = field(
        default="#ISO-8601",
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractTimePrimitive(AbstractTimePrimitiveType):
    """
    Gml:AbstractTimePrimitive acts as the head of a substitution group for
    geometric and topological temporal primitives.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeTopologyPrimitiveType(AbstractTimePrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    complex: Optional[ReferenceType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractTopoPrimitive(AbstractTopoPrimitiveType):
    """Gml:AbstractTopoPrimitive acts as the base type for all topological
    primitives.

    Topology primitives are the atomic (smallest possible) units of a
    topology complex. Each topology primitive may contain references to
    other topology primitives of codimension 2 or more (gml:isolated).
    Conversely, nodes may have faces as containers and nodes and edges
    may have solids as containers (gml:container).
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Definition(DefinitionType):
    """The basic gml:Definition element specifies a definition, which can be
    included in or referenced by a dictionary.

    The content model for a generic definition is a derivation from
    gml:AbstractGMLType. The gml:description property element shall hold
    the definition if this can be captured in a simple text string, or
    the gml:descriptionReference property element may carry a link to a
    description elsewhere. The gml:identifier element shall provide one
    identifier identifying this definition. The identifier shall be
    unique within the dictionaries using this definition. The gml:name
    elements shall provide zero or more terms and synonyms for which
    this is the definition. The gml:remarks element shall be used to
    hold additional textual information that is not conceptually part of
    the definition but is useful in understanding the definition.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DefinitionProxyType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    definition_ref: Optional[DefinitionRef] = field(
        default=None,
        metadata={
            "name": "definitionRef",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class Grid(GridType):
    """The gml:Grid implicitly defines an unrectified grid, which is a network
    composed of two or more sets of curves in which the members of each set
    intersect the members of the other sets in an algorithmic way.

    The region of interest within the grid is given in terms of its
    gml:limits, being the grid coordinates of  diagonally opposed
    corners of a rectangular region.  gml:axisLabels is provided with a
    list of labels of the axes of the grid (gml:axisName has been
    deprecated). gml:dimension specifies the dimension of the grid. The
    gml:limits element contains a single gml:GridEnvelope. The gml:low
    and gml:high property elements of the envelope are each
    integerLists, which are coordinate tuples, the coordinates being
    measured as offsets from the origin of the grid along each axis, of
    the diagonally opposing corners of a "rectangular" region of
    interest.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class IdentifiedObjectType(DefinitionType):
    """Gml:IdentifiedObjectType provides identification properties of a CRS-related
    object.

    In gml:DefinitionType, the gml:identifier element shall be the
    primary name by which this object is identified, encoding the "name"
    attribute in the UML model. Zero or more of the gml:name elements
    can be an unordered set of "identifiers", encoding the "identifier"
    attribute in the UML model. Each of these gml:name elements can
    reference elsewhere the object's defining information or be an
    identifier by which this object can be referenced. Zero or more
    other gml:name elements can be an unordered set of "alias"
    alternative names by which this CRS related object is identified,
    encoding the "alias" attributes in the UML model. An object may have
    several aliases, typically used in different contexts. The context
    for an alias is indicated by the value of its (optional) codeSpace
    attribute. Any needed version information shall be included in the
    codeSpace attribute of a gml:identifier and gml:name elements. In
    this use, the gml:remarks element in the gml:DefinitionType shall
    contain comments on or information about this object, including data
    source information.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointType(AbstractGeometricPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: Optional[Pos] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeReferenceSystemType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    domain_of_validity: Optional[str] = field(
        default=None,
        metadata={
            "name": "domainOfValidity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class UnitDefinitionType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    quantity_type: Optional[QuantityType] = field(
        default=None,
        metadata={
            "name": "quantityType",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity_type_reference: Optional[QuantityTypeReference] = field(
        default=None,
        metadata={
            "name": "quantityTypeReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    catalog_symbol: Optional[CatalogSymbol] = field(
        default=None,
        metadata={
            "name": "catalogSymbol",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CiResponsiblePartyType(AbstractObjectType):
    """
    Identification of, and means of communication with, person(s) and organisations
    associated with the dataset.
    """

    class Meta:
        name = "CI_ResponsibleParty_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    individual_name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "individualName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    organisation_name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "organisationName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    position_name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "positionName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    contact_info: Optional[CiContactPropertyType] = field(
        default=None,
        metadata={
            "name": "contactInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    role: Optional[CiRoleCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class ExGeographicDescriptionPropertyType:
    """
    :ivar ex_geographic_description:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "EX_GeographicDescription_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_geographic_description: Optional[ExGeographicDescription] = field(
        default=None,
        metadata={
            "name": "EX_GeographicDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdRangeDimensionType(AbstractObjectType):
    """
    Set of adjacent wavelengths in the electro-magnetic spectrum with a common
    characteristic, such as the visible band.
    """

    class Meta:
        name = "MD_RangeDimension_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    sequence_identifier: Optional[MemberNamePropertyType] = field(
        default=None,
        metadata={
            "name": "sequenceIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    descriptor: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdReferenceSystemPropertyType:
    """
    :ivar md_reference_system:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_ReferenceSystem_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_reference_system: Optional[MdReferenceSystem] = field(
        default=None,
        metadata={
            "name": "MD_ReferenceSystem",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractCurve(AbstractCurveType):
    """
    The AbstractCurve element is the abstract head of the substitution group for
    all (continuous) curve elements.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeneralOperationParameterType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    minimum_occurs: Optional[MinimumOccurs] = field(
        default=None,
        metadata={
            "name": "minimumOccurs",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractRingType(AbstractCurveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSolid(AbstractSolidType):
    """
    The AbstractSolid element is the abstract head of the substituition group for
    all (continuous) solid elements.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSurface(AbstractSurfaceType):
    """
    The AbstractSurface element is the abstract head of the substitution group for
    all (continuous) surface elements.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeGeometricPrimitive(AbstractTimeGeometricPrimitiveType):
    """Gml:TimeGeometricPrimitive acts as the head of a substitution group for
    geometric temporal primitives.

    A temporal geometry shall be associated with a temporal reference
    system through the frame attribute that provides a URI reference
    that identifies a description of the reference system. Following ISO
    19108, the Gregorian calendar with UTC is the default reference
    system, but others may also be used. The GPS calendar is an
    alternative reference systems in common use. The two geometric
    primitives in the temporal dimension are the instant and the period.
    GML components are defined to support these as follows.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractTimeTopologyPrimitive(AbstractTimeTopologyPrimitiveType):
    """Gml:TimeTopologyPrimitive acts as the head of a substitution group for
    topological temporal primitives.

    Temporal topology primitives shall imply the ordering information
    between features or feature properties. The temporal connection of
    features can be examined if they have temporal topology primitives
    as values of their properties. Usually, an instantaneous feature
    associates with a time node, and a static feature associates with a
    time edge.  A feature with both modes associates with the temporal
    topology primitive: a supertype of time nodes and time edges. A
    topological primitive is always connected to one or more other
    topological primitives, and is, therefore, always a member of a
    topological complex. In a GML instance, this will often be indicated
    by the primitives being described by elements that are descendents
    of an element describing a complex. However, in order to support the
    case where a temporal topological primitive is described in another
    context, the optional complex property is provided, which carries a
    reference to the parent temporal topological complex.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BaseUnitType(UnitDefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    units_system: Optional[ReferenceType] = field(
        default=None,
        metadata={
            "name": "unitsSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class ConventionalUnitType(UnitDefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    conversion_to_preferred_unit: Optional[ConversionToPreferredUnit] = field(
        default=None,
        metadata={
            "name": "conversionToPreferredUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rough_conversion_to_preferred_unit: Optional[
        RoughConversionToPreferredUnit
    ] = field(
        default=None,
        metadata={
            "name": "roughConversionToPreferredUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derivation_unit_term: list[DerivationUnitTerm] = field(
        default_factory=list,
        metadata={
            "name": "derivationUnitTerm",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CoordinateSystemAxisType(IdentifiedObjectType):
    """
    :ivar axis_abbrev:
    :ivar axis_direction:
    :ivar minimum_value:
    :ivar maximum_value:
    :ivar range_meaning:
    :ivar uom: The uom attribute provides an identifier of the unit of
        measure used for this coordinate system axis. The value of this
        coordinate in a coordinate tuple shall be recorded using this
        unit of measure, whenever those coordinates use a coordinate
        reference system that uses a coordinate system that uses this
        axis.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    axis_abbrev: Optional[AxisAbbrev] = field(
        default=None,
        metadata={
            "name": "axisAbbrev",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    axis_direction: Optional[AxisDirection] = field(
        default=None,
        metadata={
            "name": "axisDirection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    minimum_value: Optional[MinimumValue] = field(
        default=None,
        metadata={
            "name": "minimumValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    maximum_value: Optional[MaximumValue] = field(
        default=None,
        metadata={
            "name": "maximumValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    range_meaning: Optional[RangeMeaning] = field(
        default=None,
        metadata={
            "name": "rangeMeaning",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        },
    )


@dataclass
class DefinitionProxy(DefinitionProxyType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivedUnitType(UnitDefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    derivation_unit_term: list[DerivationUnitTerm] = field(
        default_factory=list,
        metadata={
            "name": "derivationUnitTerm",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class EllipsoidType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    semi_major_axis: Optional[SemiMajorAxis] = field(
        default=None,
        metadata={
            "name": "semiMajorAxis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    second_defining_parameter: Optional[SecondDefiningParameter2] = field(
        default=None,
        metadata={
            "name": "secondDefiningParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class Point(PointType):
    """A Point is defined by a single coordinate tuple.

    The direct position of a point is specified by the pos element which
    is of type DirectPositionType.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PrimeMeridianType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    greenwich_longitude: Optional[GreenwichLongitude] = field(
        default=None,
        metadata={
            "name": "greenwichLongitude",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeInstantType(AbstractTimeGeometricPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_position: Optional[TimePosition] = field(
        default=None,
        metadata={
            "name": "timePosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeReferenceSystem(TimeReferenceSystemType):
    """A reference system is characterized in terms of its domain of validity: the spatial and temporal extent over which it is applicable. The basic GML element for temporal reference systems is gml:TimeReferenceSystem.  Its content model extends gml:DefinitionType with one additional property, gml:domainOfValidity."""

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UnitDefinition(UnitDefinitionType):
    """A gml:UnitDefinition is a general definition of a unit of measure.

    This generic element is used only for units for which no
    relationship with other units or units systems is known. The content
    model of gml:UnitDefinition adds three additional properties to
    gml:Definition, gml:quantityType, gml:quantityTypeReference and
    gml:catalogSymbol. The gml:catalogSymbol property optionally gives
    the short symbol used for this unit. This element is usually used
    when the relationship of this unit to other units or units systems
    is unknown.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiResponsibleParty(CiResponsiblePartyType):
    class Meta:
        name = "CI_ResponsibleParty"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdRangeDimension(MdRangeDimensionType):
    class Meta:
        name = "MD_RangeDimension"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class GmPointPropertyType:
    """
    :ivar point:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "GM_Point_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gss"

    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractGeneralOperationParameter(AbstractGeneralOperationParameterType):
    """
    Gml:GeneralOperationParameter is the abstract definition of a parameter or
    group of parameters used by an operation method.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractRing(AbstractRingType):
    """An abstraction of a ring to support surface boundaries of different
    complexity.

    The AbstractRing element is the abstract head of the substituition
    group for all closed boundaries of a surface patch.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BaseUnit(BaseUnitType):
    """A base unit is a unit of measure that cannot be derived by combination of
    other base units within a particular system of units.

    For example, in the SI system of units, the base units are metre,
    kilogram, second, Ampere, Kelvin, mole, and candela, for the
    physical quantity types length, mass, time interval, electric
    current, thermodynamic temperature, amount of substance and luminous
    intensity, respectively. gml:BaseUnit extends generic
    gml:UnitDefinition with the property gml:unitsSystem, which carries
    a reference to the units system to which this base unit is asserted
    to belong.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ConventionalUnit(ConventionalUnitType):
    """Conventional units that are neither base units nor defined by direct
    combination of base units are used in many application domains.

    For example electronVolt for energy, feet and nautical miles for
    length.  In most cases there is a known, usually linear, conversion
    to a preferred unit which is either a base unit or derived by direct
    combination of base units. The gml:ConventionalUnit extends
    gml:UnitDefinition with a property that describes a conversion to a
    preferred unit for this physical quantity.  When the conversion is
    exact, the element gml:conversionToPreferredUnit should be used, or
    when the conversion is not exact the element
    gml:roughConversionToPreferredUnit is available. Both of these
    elements have the same content model.  The gml:derivationUnitTerm
    property defined above is included to allow a user to optionally
    record how this unit may be derived from other ("more primitive")
    units.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordinateSystemAxis(CoordinateSystemAxisType):
    """
    Gml:CoordinateSystemAxis is a definition of a coordinate system axis.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivedUnit(DerivedUnitType):
    """Derived units are defined by combination of other units.

    Derived units are used for quantities other than those corresponding
    to the base units, such as hertz (s-1) for frequency, Newton
    (kg.m/s2) for force.  Derived units based directly on base units are
    usually preferred for quantities other than the fundamental
    quantities within a system. If a derived unit is not the preferred
    unit, the gml:ConventionalUnit element should be used instead. The
    gml:DerivedUnit extends gml:UnitDefinition with the property
    gml:derivationUnitTerms.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Ellipsoid1(EllipsoidType):
    """A gml:Ellipsoid is a geometric figure that may be used to describe the
    approximate shape of the earth.

    In mathematical terms, it is a surface formed by the rotation of an
    ellipse about its minor axis.
    """

    class Meta:
        name = "Ellipsoid"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class IndirectEntryType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    definition_proxy: Optional[DefinitionProxy] = field(
        default=None,
        metadata={
            "name": "DefinitionProxy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class OperationParameterType(AbstractGeneralOperationParameterType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointArrayPropertyType:
    """Gml:PointArrayPropertyType is a container for an array of points.

    The elements are always contained inline in the array property,
    referencing geometry elements or arrays of geometry elements via
    XLinks is not supported.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    point: list[Point] = field(
        default_factory=list,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class PointPropertyType:
    """A property that has a point as its value domain may either be an appropriate
    geometry element encapsulated in an element of this type or an XLink reference
    to a remote geometry element (where remote includes geometry elements located
    elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.

    :ivar point:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class PrimeMeridian1(PrimeMeridianType):
    """A gml:PrimeMeridian defines the origin from which longitude values are
    determined.

    The default value for the prime meridian gml:identifier value is
    "Greenwich".
    """

    class Meta:
        name = "PrimeMeridian"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeInstant(TimeInstantType):
    """
    Gml:TimeInstant acts as a zero-dimensional geometric primitive that represents
    an identifiable position in time.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UnitOfMeasurePropertyType:
    """
    :ivar conventional_unit:
    :ivar derived_unit:
    :ivar base_unit:
    :ivar unit_definition:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "UnitOfMeasure_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomAnglePropertyType:
    """
    :ivar conventional_unit:
    :ivar derived_unit:
    :ivar base_unit:
    :ivar unit_definition:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "UomAngle_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomAreaPropertyType:
    """
    :ivar conventional_unit:
    :ivar derived_unit:
    :ivar base_unit:
    :ivar unit_definition:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "UomArea_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomLengthPropertyType:
    """
    :ivar conventional_unit:
    :ivar derived_unit:
    :ivar base_unit:
    :ivar unit_definition:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "UomLength_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomScalePropertyType:
    """
    :ivar conventional_unit:
    :ivar derived_unit:
    :ivar base_unit:
    :ivar unit_definition:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "UomScale_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomTimePropertyType:
    """
    :ivar conventional_unit:
    :ivar derived_unit:
    :ivar base_unit:
    :ivar unit_definition:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "UomTime_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomVelocityPropertyType:
    """
    :ivar conventional_unit:
    :ivar derived_unit:
    :ivar base_unit:
    :ivar unit_definition:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "UomVelocity_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class UomVolumePropertyType:
    """
    :ivar conventional_unit:
    :ivar derived_unit:
    :ivar base_unit:
    :ivar unit_definition:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "UomVolume_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gco"

    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CiResponsiblePartyPropertyType:
    """
    :ivar ci_responsible_party:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "CI_ResponsibleParty_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_responsible_party: Optional[CiResponsibleParty] = field(
        default=None,
        metadata={
            "name": "CI_ResponsibleParty",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGeorectifiedType(MdGridSpatialRepresentationType):
    class Meta:
        name = "MD_Georectified_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    check_point_availability: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "checkPointAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    check_point_description: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "checkPointDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    corner_points: list[GmPointPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "cornerPoints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    center_point: Optional[GmPointPropertyType] = field(
        default=None,
        metadata={
            "name": "centerPoint",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    point_in_pixel: Optional[MdPixelOrientationCodePropertyType] = field(
        default=None,
        metadata={
            "name": "pointInPixel",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    transformation_dimension_description: Optional[
        CharacterStringPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "transformationDimensionDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    transformation_dimension_mapping: list[CharacterStringPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "transformationDimensionMapping",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
                "max_occurs": 2,
            },
        )
    )


@dataclass
class CoordinateSystemAxisPropertyType:
    """
    Gml:CoordinateSystemAxisPropertyType is a property type for association roles
    to a coordinate system axis, either referencing or containing the definition of
    that axis.

    :ivar coordinate_system_axis:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    coordinate_system_axis: Optional[CoordinateSystemAxis] = field(
        default=None,
        metadata={
            "name": "CoordinateSystemAxis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class EllipsoidPropertyType:
    """
    Gml:EllipsoidPropertyType is a property type for association roles to an
    ellipsoid, either referencing or containing the definition of that ellipsoid.

    :ivar ellipsoid:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    ellipsoid: Optional[Ellipsoid1] = field(
        default=None,
        metadata={
            "name": "Ellipsoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OperationParameter1(OperationParameterType):
    """Gml:OperationParameter is the definition of a parameter used by an operation
    method.

    Most parameter values are numeric, but other types of parameter
    values are possible. This complex type is expected to be used or
    extended for all operation methods, without defining operation-
    method-specialized element names.
    """

    class Meta:
        name = "OperationParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PrimeMeridianPropertyType:
    """
    Gml:PrimeMeridianPropertyType is a property type for association roles to a
    prime meridian, either referencing or containing the definition of that
    meridian.

    :ivar prime_meridian:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    prime_meridian: Optional[PrimeMeridian1] = field(
        default=None,
        metadata={
            "name": "PrimeMeridian",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class RectifiedGridType(GridType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    origin: Optional[PointPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    offset_vector: list[VectorType] = field(
        default_factory=list,
        metadata={
            "name": "offsetVector",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class TimeInstantPropertyType:
    """
    Gml:TimeInstantPropertyType provides for associating a gml:TimeInstant with an
    object.

    :ivar time_instant:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_instant: Optional[TimeInstant] = field(
        default=None,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CenterOf(PointPropertyType):
    class Meta:
        name = "centerOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class IndirectEntry(IndirectEntryType):
    class Meta:
        name = "indirectEntry"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointArrayProperty(PointArrayPropertyType):
    class Meta:
        name = "pointArrayProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointMember(PointPropertyType):
    """
    This property element either references a Point via the XLink-attributes or
    contains the Point element.
    """

    class Meta:
        name = "pointMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointMembers(PointArrayPropertyType):
    """This property element contains a list of points.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "pointMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointProperty(PointPropertyType):
    """This property element either references a point via the XLink-attributes or
    contains the point element.

    pointProperty is the predefined property which may be used by GML
    Application Schemas whenever a GML feature has a property with a
    value that is substitutable for Point.
    """

    class Meta:
        name = "pointProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PointRep(PointPropertyType):
    class Meta:
        name = "pointRep"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Position(PointPropertyType):
    class Meta:
        name = "position"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiCitationType(AbstractObjectType):
    """
    Standardized resource reference.
    """

    class Meta:
        name = "CI_Citation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    title: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    alternate_title: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "alternateTitle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    date: list[CiDatePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    edition: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    edition_date: Optional[DatePropertyType] = field(
        default=None,
        metadata={
            "name": "editionDate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    identifier: list[MdIdentifierPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    cited_responsible_party: list[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "citedResponsibleParty",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    presentation_form: list[CiPresentationFormCodePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "presentationForm",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    series: Optional[CiSeriesPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    other_citation_details: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "otherCitationDetails",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    collective_title: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "collectiveTitle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    isbn: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "ISBN",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    issn: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "ISSN",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class DqQuantitativeResultType(AbstractDqResultType):
    """Quantitative_conformance_measure from Quality Procedures.

    -  - Renamed to remove implied use limitation -  - OCL - -- result is type specified by valueDomain - result.tupleType = valueDomain
    """

    class Meta:
        name = "DQ_QuantitativeResult_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    value_type: Optional[RecordTypePropertyType] = field(
        default=None,
        metadata={
            "name": "valueType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    value_unit: Optional[UnitOfMeasurePropertyType] = field(
        default=None,
        metadata={
            "name": "valueUnit",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    error_statistic: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "errorStatistic",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    value: list[RecordPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class LiProcessStepType(AbstractObjectType):
    class Meta:
        name = "LI_ProcessStep_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    description: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    rationale: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    date_time: Optional[DateTimePropertyType] = field(
        default=None,
        metadata={
            "name": "dateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    processor: list[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source: list["LiSourcePropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdBandType(MdRangeDimensionType):
    class Meta:
        name = "MD_Band_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    max_value: Optional[RealPropertyType] = field(
        default=None,
        metadata={
            "name": "maxValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    min_value: Optional[RealPropertyType] = field(
        default=None,
        metadata={
            "name": "minValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    units: Optional[UomLengthPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    peak_response: Optional[RealPropertyType] = field(
        default=None,
        metadata={
            "name": "peakResponse",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    bits_per_value: Optional[IntegerPropertyType] = field(
        default=None,
        metadata={
            "name": "bitsPerValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    tone_gradation: Optional[IntegerPropertyType] = field(
        default=None,
        metadata={
            "name": "toneGradation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    scale_factor: Optional[RealPropertyType] = field(
        default=None,
        metadata={
            "name": "scaleFactor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    offset: Optional[RealPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdDistributorType(AbstractObjectType):
    """
    Information about the distributor.
    """

    class Meta:
        name = "MD_Distributor_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    distributor_contact: Optional[CiResponsiblePartyPropertyType] = field(
        default=None,
        metadata={
            "name": "distributorContact",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    distribution_order_process: list[MdStandardOrderProcessPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "distributionOrderProcess",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    distributor_format: list["MdFormatPropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "distributorFormat",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    distributor_transfer_options: list[
        MdDigitalTransferOptionsPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "distributorTransferOptions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdExtendedElementInformationType(AbstractObjectType):
    """
    New metadata element, not found in ISO 19115, which is required to describe
    geographic data.
    """

    class Meta:
        name = "MD_ExtendedElementInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    short_name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "shortName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    domain_code: Optional[IntegerPropertyType] = field(
        default=None,
        metadata={
            "name": "domainCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    definition: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    obligation: Optional[MdObligationCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    condition: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    data_type: Optional[MdDatatypeCodePropertyType] = field(
        default=None,
        metadata={
            "name": "dataType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    maximum_occurrence: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "maximumOccurrence",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    domain_value: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "domainValue",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    parent_entity: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "parentEntity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    rule: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    rationale: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source: list[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class MdGeorectified(MdGeorectifiedType):
    class Meta:
        name = "MD_Georectified"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMaintenanceInformationType(AbstractObjectType):
    """
    Information about the scope and frequency of updating.
    """

    class Meta:
        name = "MD_MaintenanceInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    maintenance_and_update_frequency: Optional[
        MdMaintenanceFrequencyCodePropertyType
    ] = field(
        default=None,
        metadata={
            "name": "maintenanceAndUpdateFrequency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    date_of_next_update: Optional[DatePropertyType] = field(
        default=None,
        metadata={
            "name": "dateOfNextUpdate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    user_defined_maintenance_frequency: Optional[
        TmPeriodDurationPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "userDefinedMaintenanceFrequency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    update_scope: list[MdScopeCodePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "updateScope",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    update_scope_description: list[MdScopeDescriptionPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "updateScopeDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    maintenance_note: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "maintenanceNote",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    contact: list[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdUsageType(AbstractObjectType):
    """
    Brief description of ways in which the dataset is currently used.
    """

    class Meta:
        name = "MD_Usage_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    specific_usage: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "specificUsage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    usage_date_time: Optional[DateTimePropertyType] = field(
        default=None,
        metadata={
            "name": "usageDateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    user_determined_limitations: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "userDeterminedLimitations",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    user_contact_info: list[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "userContactInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class PtLocaleContainerType:
    class Meta:
        name = "PT_LocaleContainer_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    description: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    locale: Optional[PtLocalePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    date: list[CiDatePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    responsible_party: list[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "responsibleParty",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    localised_string: list[LocalisedCharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "localisedString",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class AbstractGeneralOperationParameterPropertyType:
    """
    Gml:AbstractGeneralOperationParameterPropertyType is a property type for
    association roles to an operation parameter or group, either referencing or
    containing the definition of that parameter or group.

    :ivar operation_parameter_group:
    :ivar operation_parameter:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    operation_parameter_group: Optional["OperationParameterGroup"] = field(
        default=None,
        metadata={
            "name": "OperationParameterGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter: Optional[OperationParameter1] = field(
        default=None,
        metadata={
            "name": "OperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractGriddedSurfaceType(AbstractParametricCurveSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rows: Optional["AbstractGriddedSurfaceType.Rows"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    rows_attribute: Optional[int] = field(
        default=None,
        metadata={
            "name": "rows",
            "type": "Attribute",
        },
    )
    columns: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    @dataclass
    class Rows:
        row: list["AbstractGriddedSurfaceType.Rows.Row"] = field(
            default_factory=list,
            metadata={
                "name": "Row",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
                "min_occurs": 1,
            },
        )

        @dataclass
        class Row:
            pos_list: Optional[PosList] = field(
                default=None,
                metadata={
                    "name": "posList",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/gml/3.2",
                },
            )
            pos: list[Pos] = field(
                default_factory=list,
                metadata={
                    "type": "Element",
                    "namespace": "http://www.opengis.net/gml/3.2",
                },
            )
            point_property: list[PointProperty] = field(
                default_factory=list,
                metadata={
                    "name": "pointProperty",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/gml/3.2",
                },
            )


@dataclass
class ArcByCenterPointType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: Optional[Pos] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: Optional[PointProperty] = field(
        default=None,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: Optional[PointRep] = field(
        default=None,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    radius: Optional[LengthType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    start_angle: Optional[AngleType] = field(
        default=None,
        metadata={
            "name": "startAngle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    end_angle: Optional[AngleType] = field(
        default=None,
        metadata={
            "name": "endAngle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC_CENTER_POINT_WITH_RADIUS,
        metadata={
            "type": "Attribute",
        },
    )
    num_arc: int = field(
        init=False,
        default=1,
        metadata={
            "name": "numArc",
            "type": "Attribute",
            "required": True,
        },
    )


@dataclass
class ArcStringByBulgeType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: list[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: list[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: list[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    bulge: list[float] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    normal: list[VectorType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC2_POINT_WITH_BULGE,
        metadata={
            "type": "Attribute",
        },
    )
    num_arc: Optional[int] = field(
        default=None,
        metadata={
            "name": "numArc",
            "type": "Attribute",
        },
    )


@dataclass
class ArcStringType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: list[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: list[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: list[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC3_POINTS,
        metadata={
            "type": "Attribute",
        },
    )
    num_arc: Optional[int] = field(
        default=None,
        metadata={
            "name": "numArc",
            "type": "Attribute",
        },
    )


@dataclass
class BsplineType(AbstractCurveSegmentType):
    class Meta:
        name = "BSplineType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: list[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: list[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: list[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    degree: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    knot: list[KnotPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 2,
        },
    )
    interpolation: CurveInterpolationType = field(
        default=CurveInterpolationType.POLYNOMIAL_SPLINE,
        metadata={
            "type": "Attribute",
        },
    )
    is_polynomial: Optional[bool] = field(
        default=None,
        metadata={
            "name": "isPolynomial",
            "type": "Attribute",
        },
    )
    knot_type: Optional[KnotTypesType] = field(
        default=None,
        metadata={
            "name": "knotType",
            "type": "Attribute",
        },
    )


@dataclass
class CubicSplineType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: list[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: list[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: list[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vector_at_start: Optional[VectorType] = field(
        default=None,
        metadata={
            "name": "vectorAtStart",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    vector_at_end: Optional[VectorType] = field(
        default=None,
        metadata={
            "name": "vectorAtEnd",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CUBIC_SPLINE,
        metadata={
            "type": "Attribute",
        },
    )
    degree: int = field(
        init=False,
        default=3,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DictionaryType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    definition_member: list["DefinitionMember"] = field(
        default_factory=list,
        metadata={
            "name": "definitionMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dictionary_entry: list["DictionaryEntry"] = field(
        default_factory=list,
        metadata={
            "name": "dictionaryEntry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    indirect_entry: list[IndirectEntry] = field(
        default_factory=list,
        metadata={
            "name": "indirectEntry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class GeodesicStringType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos: list[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: list[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.GEODESIC,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LineStringSegmentType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: list[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: list[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: list[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.LINEAR,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LineStringType(AbstractCurveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: list[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: list[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: list[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LinearRingType(AbstractRingType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pos: list[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: list[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_rep: list[PointRep] = field(
        default_factory=list,
        metadata={
            "name": "pointRep",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinates: Optional[Coordinates] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MultiPointType(AbstractGeometricAggregateType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    point_member: list[PointMember] = field(
        default_factory=list,
        metadata={
            "name": "pointMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_members: Optional[PointMembers] = field(
        default=None,
        metadata={
            "name": "pointMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class NodeType(AbstractTopoPrimitiveType):
    """
    :ivar container:
    :ivar directed_edge: In the case of planar topology, a gml:Node must
        have a clockwise sequence of gml:directedEdge properties, to
        ensure a lossless topology representation as defined by
        Kuijpers, et. al. (see OGC 05-102 Topology IPR).
    :ivar point_property:
    :ivar aggregation_type:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    container: Optional[FaceOrTopoSolidPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_edge: list["DirectedEdge"] = field(
        default_factory=list,
        metadata={
            "name": "directedEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point_property: Optional[PointProperty] = field(
        default=None,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class OperationParameterPropertyType:
    """
    Gml:OperationParameterPropertyType is a property type for association roles to
    an operation parameter, either referencing or containing the definition of that
    parameter.

    :ivar operation_parameter:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    operation_parameter: Optional[OperationParameter1] = field(
        default=None,
        metadata={
            "name": "OperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class RectifiedGrid(RectifiedGridType):
    """A rectified grid is a grid for which there is an affine transformation
    between the grid coordinates and the coordinates of an external coordinate
    reference system.

    It is defined by specifying the position (in some geometric space)
    of the grid "origin" and of the vectors that specify the post
    locations. Note that the grid limits (post indexes) and axis name
    properties are inherited from gml:GridType and that
    gml:RectifiedGrid adds a gml:origin property (contains or references
    a gml:Point) and a set of gml:offsetVector properties.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCoordinateSystemType(TimeReferenceSystemType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    origin_position: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "originPosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    origin: Optional[TimeInstantPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interval: Optional[TimeIntervalLengthType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeNodeType(AbstractTimeTopologyPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    previous_edge: list["TimeEdgePropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "previousEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    next_edge: list["TimeEdgePropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "nextEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    position: Optional[TimeInstantPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimePeriodType(AbstractTimeGeometricPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    begin_position: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "beginPosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    begin: Optional[TimeInstantPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    end_position: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "endPosition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    end: Optional[TimeInstantPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    duration: Optional[Duration] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_interval: Optional[TimeInterval] = field(
        default=None,
        metadata={
            "name": "timeInterval",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Axis(CoordinateSystemAxisPropertyType):
    """The gml:axis property is an association role (ordered sequence) to the
    coordinate system axes included in this coordinate system.

    The coordinate values in a coordinate tuple shall be recorded in the
    order in which the coordinate system axes associations are recorded,
    whenever those coordinates use a coordinate reference system that
    uses this coordinate system. The gml:AggregationAttributeGroup
    should be used to specify that the axis objects are ordered.
    """

    class Meta:
        name = "axis"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordinateSystemAxisRef(CoordinateSystemAxisPropertyType):
    class Meta:
        name = "coordinateSystemAxisRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EllipsoidRef(EllipsoidPropertyType):
    class Meta:
        name = "ellipsoidRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Ellipsoid2(EllipsoidPropertyType):
    """
    Gml:ellipsoid is an association role to the ellipsoid used by this geodetic
    datum.
    """

    class Meta:
        name = "ellipsoid"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PrimeMeridianRef(PrimeMeridianPropertyType):
    class Meta:
        name = "primeMeridianRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PrimeMeridian2(PrimeMeridianPropertyType):
    """
    Gml:primeMeridian is an association role to the prime meridian used by this
    geodetic datum.
    """

    class Meta:
        name = "primeMeridian"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesAxis(CoordinateSystemAxisPropertyType):
    class Meta:
        name = "usesAxis"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesEllipsoid(EllipsoidPropertyType):
    class Meta:
        name = "usesEllipsoid"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesPrimeMeridian(PrimeMeridianPropertyType):
    class Meta:
        name = "usesPrimeMeridian"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiCitation(CiCitationType):
    class Meta:
        name = "CI_Citation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqQuantitativeResult(DqQuantitativeResultType):
    class Meta:
        name = "DQ_QuantitativeResult"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class LiProcessStep(LiProcessStepType):
    class Meta:
        name = "LI_ProcessStep"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdBand(MdBandType):
    class Meta:
        name = "MD_Band"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDistributor(MdDistributorType):
    class Meta:
        name = "MD_Distributor"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdExtendedElementInformation(MdExtendedElementInformationType):
    class Meta:
        name = "MD_ExtendedElementInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdGeorectifiedPropertyType:
    """
    :ivar md_georectified:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Georectified_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_georectified: Optional[MdGeorectified] = field(
        default=None,
        metadata={
            "name": "MD_Georectified",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMaintenanceInformation(MdMaintenanceInformationType):
    class Meta:
        name = "MD_MaintenanceInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdUsage(MdUsageType):
    class Meta:
        name = "MD_Usage"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class PtLocaleContainer(PtLocaleContainerType):
    class Meta:
        name = "PT_LocaleContainer"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractCoordinateSystemType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_axis: list[UsesAxis] = field(
        default_factory=list,
        metadata={
            "name": "usesAxis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    axis: list[Axis] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class AbstractGriddedSurface(AbstractGriddedSurfaceType):
    """If provided, rows gives the number of rows, columns the number of columns in
    the parameter grid.

    The parameter grid is represented by an instance of the
    gml:PointGrid group. The element provides a substitution group head
    for the surface patches based on a grid. All derived subtypes shall
    conform to the constraints specified in ISO 19107:2003, 6.4.41.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcByBulgeType(ArcStringByBulgeType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    num_arc: int = field(
        init=False,
        default=1,
        metadata={
            "name": "numArc",
            "type": "Attribute",
        },
    )


@dataclass
class ArcByCenterPoint(ArcByCenterPointType):
    """This variant of the arc requires that the points on the arc shall be
    computed instead of storing the coordinates directly.

    The single control point is the center point of the arc plus the
    radius and the bearing at start and end. This representation can be
    used only in 2D. The element radius specifies the radius of the arc.
    The element startAngle specifies the bearing of the arc at the
    start. The element endAngle specifies the bearing of the arc at the
    end. The interpolation is fixed as
    "circularArcCenterPointWithRadius". Since this type describes always
    a single arc, the attribute "numArc" is fixed to "1". The content
    model follows the general pattern for the encoding of curve
    segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcString(ArcStringType):
    """An ArcString is a curve segment that uses three-point circular arc
    interpolation ("circularArc3Points").

    The number of arcs in the arc string may be explicitly stated in the
    attribute numArc. The number of control points in the arc string
    shall be 2 * numArc + 1. The content model follows the general
    pattern for the encoding of curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcStringByBulge(ArcStringByBulgeType):
    """This variant of the arc computes the mid points of the arcs instead of
    storing the coordinates directly.

    The control point sequence consists of the start and end points of
    each arc plus the bulge (see ISO 19107:2003, 6.4.17.2). The normal
    is a vector normal (perpendicular) to the chord of the arc (see ISO
    19107:2003, 6.4.17.4). The interpolation is fixed as
    "circularArc2PointWithBulge". The number of arcs in the arc string
    may be explicitly stated in the attribute numArc. The number of
    control points in the arc string shall be numArc + 1. The content
    model follows the general pattern for the encoding of curve
    segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcType1(ArcStringType):
    class Meta:
        name = "ArcType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    num_arc: int = field(
        init=False,
        default=1,
        metadata={
            "name": "numArc",
            "type": "Attribute",
        },
    )


@dataclass
class Bspline(BsplineType):
    """A B-Spline is a piecewise parametric polynomial or rational curve described
    in terms of control points and basis functions as specified in ISO 19107:2003,
    6.4.30.

    Therefore, interpolation may be either "polynomialSpline" or
    "rationalSpline" depending on the interpolation type; default is
    "polynomialSpline". degree shall be the degree of the polynomial
    used for interpolation in this spline. knot shall be the sequence of
    distinct knots used to define the spline basis functions (see ISO
    19107:2003, 6.4.26.2). The attribute isPolynomial shall be set to
    "true" if this is a polynomial spline (see ISO 19107:2003,
    6.4.30.5). The attribute knotType shall provide the type of knot
    distribution used in defining this spline (see ISO 19107:2003,
    6.4.30.4). The content model follows the general pattern for the
    encoding of curve segments.
    """

    class Meta:
        name = "BSpline"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BezierType(BsplineType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    interpolation: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.POLYNOMIAL_SPLINE,
        metadata={
            "type": "Attribute",
        },
    )
    is_polynomial: bool = field(
        init=False,
        default=True,
        metadata={
            "name": "isPolynomial",
            "type": "Attribute",
        },
    )
    knot_type: Any = field(
        init=False,
        default=None,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class CircleByCenterPointType(ArcByCenterPointType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    start_angle: Any = field(
        init=False,
        default=None,
        metadata={
            "type": "Ignore",
        },
    )
    end_angle: Any = field(
        init=False,
        default=None,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class ConeType(AbstractGriddedSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    horizontal_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC3_POINTS,
        metadata={
            "name": "horizontalCurveType",
            "type": "Attribute",
        },
    )
    vertical_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.LINEAR,
        metadata={
            "name": "verticalCurveType",
            "type": "Attribute",
        },
    )


@dataclass
class CubicSpline(CubicSplineType):
    """The number of control points shall be at least three.

    vectorAtStart is the unit tangent vector at the start point of the
    spline. vectorAtEnd is the unit tangent vector at the end point of
    the spline. Only the direction of the vectors shall be used to
    determine the shape of the cubic spline, not their length.
    interpolation is fixed as "cubicSpline". degree shall be the degree
    of the polynomial used for the interpolation in this spline.
    Therefore the degree for a cubic spline is fixed to "3". The content
    model follows the general pattern for the encoding of curve
    segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CylinderType(AbstractGriddedSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    horizontal_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC3_POINTS,
        metadata={
            "name": "horizontalCurveType",
            "type": "Attribute",
        },
    )
    vertical_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.LINEAR,
        metadata={
            "name": "verticalCurveType",
            "type": "Attribute",
        },
    )


@dataclass
class DefinitionCollection(DictionaryType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Dictionary(DictionaryType):
    """Sets of definitions may be collected into dictionaries or collections.

    A gml:Dictionary is a non-abstract collection of definitions. The
    gml:Dictionary content model adds a list of gml:dictionaryEntry
    properties that contain or reference gml:Definition objects.  A
    database handle (gml:id attribute) is required, in order that this
    collection may be referred to. The standard gml:identifier,
    gml:description, gml:descriptionReference and gml:name properties
    are available to reference or contain more information about this
    dictionary. The gml:description and gml:descriptionReference
    property elements may be used for a description of this dictionary.
    The derived gml:name element may be used for the name(s) of this
    dictionary. for remote definiton references gml:dictionaryEntry
    shall be used. If a Definition object contained within a Dictionary
    uses the descriptionReference property to refer to a remote
    definition, then this enables the inclusion of a remote definition
    in a local dictionary, giving a handle and identifier in the context
    of the local dictionary.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodesicString(GeodesicStringType):
    """A sequence of geodesic segments.

    The number of control points shall be at least two. interpolation is
    fixed as "geodesic". The content model follows the general pattern
    for the encoding of curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodesicType(GeodesicStringType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LineString(LineStringType):
    """A LineString is a special curve that consists of a single segment with
    linear interpolation.

    It is defined by two or more coordinate tuples, with linear
    interpolation between them. The number of direct positions in the
    list shall be at least two.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LineStringSegment(LineStringSegmentType):
    """A LineStringSegment is a curve segment that is defined by two or more
    control points including the start and end point, with linear interpolation
    between them.

    The content model follows the general pattern for the encoding of
    curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LinearRing(LinearRingType):
    """A LinearRing is defined by four or more coordinate tuples, with linear
    interpolation between them; the first and last coordinates shall be coincident.

    The number of direct positions in the list shall be at least four.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiPoint(MultiPointType):
    """A gml:MultiPoint consists of one or more gml:Points.

    The members of the geometric aggregate may be specified either using
    the "standard" property (gml:pointMember) or the array property
    (gml:pointMembers). It is also valid to use both the "standard" and
    the array properties in the same collection.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Node(NodeType):
    """Gml:Node represents the 0-dimensional primitive.

    The optional coboundary of a node (gml:directedEdge) is a sequence
    of directed edges which are incident on this node. Edges emanating
    from this node appear in the node coboundary with a negative
    orientation. If provided, the aggregationType attribute shall have
    the value "sequence". A node may optionally be realised by a
    0-dimensional geometric primitive (gml:pointProperty).
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SphereType(AbstractGriddedSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    horizontal_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC3_POINTS,
        metadata={
            "name": "horizontalCurveType",
            "type": "Attribute",
        },
    )
    vertical_curve_type: CurveInterpolationType = field(
        init=False,
        default=CurveInterpolationType.CIRCULAR_ARC3_POINTS,
        metadata={
            "name": "verticalCurveType",
            "type": "Attribute",
        },
    )


@dataclass
class TimeCoordinateSystem(TimeCoordinateSystemType):
    """A temporal coordinate system shall be based on a continuous interval scale
    defined in terms of a single time interval.

    The differences to ISO 19108 TM_CoordinateSystem are:
    -       the origin is specified either using the property gml:originPosition whose value is a direct time position, or using the property gml:origin whose model is gml:TimeInstantPropertyType; this permits more flexibility in representation and also supports referring to a value fixed elsewhere;
    -       the interval uses gml:TimeIntervalLengthType.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeNode(TimeNodeType):
    """A time node is a zero-dimensional topological primitive that represents an
    identifiable node in time (it is equivalent to a point in space).

    A node may act as the termination or initiation of any number of
    time edges. A time node may be realised as a geometry, its position,
    whose value is a time instant.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimePeriod(TimePeriodType):
    """Gml:TimePeriod acts as a one-dimensional geometric primitive that represents
    an identifiable extent in time.

    The location in of a gml:TimePeriod is described by the temporal
    positions of the instants at which it begins and ends. The length of
    the period is equal to the temporal distance between the two
    bounding temporal positions. Both beginning and end may be described
    in terms of their direct position using gml:TimePositionType which
    is an XML Schema simple content type, or by reference to an
    indentifiable time instant using gml:TimeInstantPropertyType.
    Alternatively a limit of a gml:TimePeriod may use the conventional
    GML property model to make a reference to a time instant described
    elsewhere, or a limit may be indicated as a direct position.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeneralOperationParameterRef(
    AbstractGeneralOperationParameterPropertyType
):
    class Meta:
        name = "abstractGeneralOperationParameterRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeneralOperationParameter(AbstractGeneralOperationParameterPropertyType):
    class Meta:
        name = "generalOperationParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class IncludesParameter(AbstractGeneralOperationParameterPropertyType):
    class Meta:
        name = "includesParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationParameterGroupRef(OperationParameterPropertyType):
    class Meta:
        name = "operationParameterGroupRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationParameterRef(OperationParameterPropertyType):
    class Meta:
        name = "operationParameterRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationParameter2(OperationParameterPropertyType):
    """
    Gml:operationParameter is an association role to the operation parameter of
    which this is a value.
    """

    class Meta:
        name = "operationParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Parameter(AbstractGeneralOperationParameterPropertyType):
    """
    Gml:parameter is an association to an operation parameter or parameter group.
    """

    class Meta:
        name = "parameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesParameter(AbstractGeneralOperationParameterPropertyType):
    class Meta:
        name = "usesParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValueOfParameter(OperationParameterPropertyType):
    class Meta:
        name = "valueOfParameter"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CiCitationPropertyType:
    """
    :ivar ci_citation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "CI_Citation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ci_citation: Optional[CiCitation] = field(
        default=None,
        metadata={
            "name": "CI_Citation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqQuantitativeResultPropertyType:
    """
    :ivar dq_quantitative_result:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_QuantitativeResult_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_quantitative_result: Optional[DqQuantitativeResult] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeResult",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LiProcessStepPropertyType:
    """
    :ivar li_process_step:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "LI_ProcessStep_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    li_process_step: Optional[LiProcessStep] = field(
        default=None,
        metadata={
            "name": "LI_ProcessStep",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdBandPropertyType:
    """
    :ivar md_band:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Band_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_band: Optional[MdBand] = field(
        default=None,
        metadata={
            "name": "MD_Band",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDistributorPropertyType:
    """
    :ivar md_distributor:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Distributor_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_distributor: Optional[MdDistributor] = field(
        default=None,
        metadata={
            "name": "MD_Distributor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdExtendedElementInformationPropertyType:
    """
    :ivar md_extended_element_information:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_ExtendedElementInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_extended_element_information: Optional[MdExtendedElementInformation] = (
        field(
            default=None,
            metadata={
                "name": "MD_ExtendedElementInformation",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMaintenanceInformationPropertyType:
    """
    :ivar md_maintenance_information:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_MaintenanceInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_maintenance_information: Optional[MdMaintenanceInformation] = field(
        default=None,
        metadata={
            "name": "MD_MaintenanceInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdRangeDimensionPropertyType:
    """
    :ivar md_band:
    :ivar md_range_dimension:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_RangeDimension_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_band: Optional[MdBand] = field(
        default=None,
        metadata={
            "name": "MD_Band",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_range_dimension: Optional[MdRangeDimension] = field(
        default=None,
        metadata={
            "name": "MD_RangeDimension",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdUsagePropertyType:
    """
    :ivar md_usage:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Usage_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_usage: Optional[MdUsage] = field(
        default=None,
        metadata={
            "name": "MD_Usage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class PtLocaleContainerPropertyType:
    """
    :ivar pt_locale_container:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "PT_LocaleContainer_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    pt_locale_container: Optional[PtLocaleContainer] = field(
        default=None,
        metadata={
            "name": "PT_LocaleContainer",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractCoordinateSystem(AbstractCoordinateSystemType):
    """Gml:AbstractCoordinateSystem is a coordinate system (CS) is the non-
    repeating sequence of coordinate system axes that spans a given coordinate
    space.

    A CS is derived from a set of mathematical rules for specifying how
    coordinates in a given space are to be assigned to points. The
    coordinate values in a coordinate tuple shall be recorded in the
    order in which the coordinate system axes associations are recorded.
    This abstract complex type shall not be used, extended, or
    restricted, in an Application Schema, to define a concrete subtype
    with a meaning equivalent to a concrete subtype specified in this
    document.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AffineCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "AffineCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Arc(ArcType1):
    """An Arc is an arc string with only one arc unit, i.e. three control points
    including the start and end point.

    As arc is an arc string consisting of a single arc, the attribute
    "numArc" is fixed to "1".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArcByBulge(ArcByBulgeType):
    """An ArcByBulge is an arc string with only one arc unit, i.e. two control
    points, one bulge and one normal vector.

    As arc is an arc string consisting of a single arc, the attribute
    "numArc" is fixed to "1".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Bezier(BezierType):
    """Bezier curves are polynomial splines that use Bezier or Bernstein
    polynomials for interpolation purposes.

    It is a special case of the B-Spline curve with two knots. degree
    shall be the degree of the polynomial used for interpolation in this
    spline. knot shall be the sequence of distinct knots used to define
    the spline basis functions. interpolation is fixed as
    "polynomialSpline". isPolynomial is fixed as "true". knotType is not
    relevant for Bezier curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CartesianCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "CartesianCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CircleByCenterPoint(CircleByCenterPointType):
    """A gml:CircleByCenterPoint is an gml:ArcByCenterPoint with identical start
    and end angle to form a full circle.

    Again, this representation can be used only in 2D.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CircleType(ArcType1):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Cone(ConeType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CurvePropertyType:
    """A property that has a curve as its value domain may either be an appropriate
    geometry element encapsulated in an element of this type or an XLink reference
    to a remote geometry element (where remote includes geometry elements located
    elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.

    :ivar composite_curve:
    :ivar orientable_curve:
    :ivar curve:
    :ivar ring:
    :ivar linear_ring:
    :ivar line_string:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_curve: Optional["CompositeCurve"] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional["OrientableCurve"] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional["Curve"] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional["Ring"] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Cylinder(CylinderType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CylindricalCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "CylindricalCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectedNodePropertyType:
    """
    :ivar node:
    :ivar orientation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    node: Optional[Node] = field(
        default=None,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientation: SignType = field(
        default=SignType.PLUS_SIGN,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class EllipsoidalCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "EllipsoidalCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Geodesic(GeodesicType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LineStringSegmentArrayPropertyType:
    """
    Gml:LineStringSegmentArrayPropertyType provides a container for line strings.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    line_string_segment: list[LineStringSegment] = field(
        default_factory=list,
        metadata={
            "name": "LineStringSegment",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LinearCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "LinearCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LinearRingPropertyType:
    """
    A property with the content model of gml:LinearRingPropertyType encapsulates a
    linear ring to represent a component of a surface boundary.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class MultiPointPropertyType:
    """A property that has a collection of points as its value domain may either be
    an appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.

    :ivar multi_point:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ObliqueCartesianCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "ObliqueCartesianCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationParameterGroupType(AbstractGeneralOperationParameterType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    maximum_occurs: Optional[MaximumOccurs] = field(
        default=None,
        metadata={
            "name": "maximumOccurs",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_parameter: list[UsesParameter] = field(
        default_factory=list,
        metadata={
            "name": "usesParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    general_operation_parameter: list[GeneralOperationParameter] = field(
        default_factory=list,
        metadata={
            "name": "generalOperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    includes_parameter: list[IncludesParameter] = field(
        default_factory=list,
        metadata={
            "name": "includesParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter: list[Parameter] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ParameterValueType(AbstractGeneralParameterValueType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[Value] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dms_angle_value: Optional[DmsAngleValue] = field(
        default=None,
        metadata={
            "name": "dmsAngleValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    string_value: Optional[StringValue] = field(
        default=None,
        metadata={
            "name": "stringValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    integer_value: Optional[IntegerValue] = field(
        default=None,
        metadata={
            "name": "integerValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    boolean_value: Optional[BooleanValue] = field(
        default=None,
        metadata={
            "name": "booleanValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_list: Optional[ValueList] = field(
        default=None,
        metadata={
            "name": "valueList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    integer_value_list: Optional[IntegerValueList] = field(
        default=None,
        metadata={
            "name": "integerValueList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_file: Optional[ValueFile] = field(
        default=None,
        metadata={
            "name": "valueFile",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_of_parameter: Optional[ValueOfParameter] = field(
        default=None,
        metadata={
            "name": "valueOfParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter: Optional[OperationParameter2] = field(
        default=None,
        metadata={
            "name": "operationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class PolarCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "PolarCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Sphere(SphereType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SphericalCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "SphericalCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "TemporalCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "TimeCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeNodePropertyType:
    """
    Gml:TimeNodePropertyType provides for associating a gml:TimeNode with an
    object.

    :ivar time_node:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimePeriodPropertyType:
    """
    Gml:TimePeriodPropertyType provides for associating a gml:TimePeriod with an
    object.

    :ivar time_period:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_period: Optional[TimePeriod] = field(
        default=None,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class UserDefinedCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "UserDefinedCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCstype(AbstractCoordinateSystemType):
    class Meta:
        name = "VerticalCSType"
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FormulaCitation:
    """
    Gml:formulaCitation provides a reference to a publication giving the formula(s)
    or procedure used by an coordinate operation method.

    :ivar ci_citation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "formulaCitation"
        namespace = "http://www.opengis.net/gml/3.2"

    ci_citation: Optional[CiCitation] = field(
        default=None,
        metadata={
            "name": "CI_Citation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DqConformanceResultType(AbstractDqResultType):
    """quantitative_result from Quality Procedures -  - renamed to remove implied use limitiation."""

    class Meta:
        name = "DQ_ConformanceResult_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    specification: Optional[CiCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    explanation: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    pass_value: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "pass",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class MdAggregateInformationType(AbstractObjectType):
    """
    Encapsulates the dataset aggregation information.
    """

    class Meta:
        name = "MD_AggregateInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    aggregate_data_set_name: Optional[CiCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "aggregateDataSetName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    aggregate_data_set_identifier: Optional[MdIdentifierPropertyType] = field(
        default=None,
        metadata={
            "name": "aggregateDataSetIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    association_type: Optional[DsAssociationTypeCodePropertyType] = field(
        default=None,
        metadata={
            "name": "associationType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    initiative_type: Optional[DsInitiativeTypeCodePropertyType] = field(
        default=None,
        metadata={
            "name": "initiativeType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdApplicationSchemaInformationType(AbstractObjectType):
    """
    Information about the application schema used to build the dataset.
    """

    class Meta:
        name = "MD_ApplicationSchemaInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[CiCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    schema_language: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "schemaLanguage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    constraint_language: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "constraintLanguage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    schema_ascii: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "schemaAscii",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    graphics_file: Optional[BinaryPropertyType] = field(
        default=None,
        metadata={
            "name": "graphicsFile",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    software_development_file: Optional[BinaryPropertyType] = field(
        default=None,
        metadata={
            "name": "softwareDevelopmentFile",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    software_development_file_format: Optional[CharacterStringPropertyType] = (
        field(
            default=None,
            metadata={
                "name": "softwareDevelopmentFileFormat",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )


@dataclass
class MdCoverageDescriptionType(AbstractMdContentInformationType):
    """
    Information about the domain of the raster cell.
    """

    class Meta:
        name = "MD_CoverageDescription_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    attribute_description: Optional[RecordTypePropertyType] = field(
        default=None,
        metadata={
            "name": "attributeDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    content_type: Optional[MdCoverageContentTypeCodePropertyType] = field(
        default=None,
        metadata={
            "name": "contentType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    dimension: list[MdRangeDimensionPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdFeatureCatalogueDescriptionType(AbstractMdContentInformationType):
    """
    Information identifing the feature catalogue.
    """

    class Meta:
        name = "MD_FeatureCatalogueDescription_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    compliance_code: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "complianceCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    language: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    included_with_dataset: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "includedWithDataset",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    feature_types: list[GenericNamePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "featureTypes",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    feature_catalogue_citation: list[CiCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "featureCatalogueCitation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class MdFormatType(AbstractObjectType):
    """
    Description of the form of the data to be distributed.
    """

    class Meta:
        name = "MD_Format_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    version: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    amendment_number: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "amendmentNumber",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    specification: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    file_decompression_technique: Optional[CharacterStringPropertyType] = (
        field(
            default=None,
            metadata={
                "name": "fileDecompressionTechnique",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    format_distributor: list[MdDistributorPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "formatDistributor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdGeoreferenceableType(MdGridSpatialRepresentationType):
    class Meta:
        name = "MD_Georeferenceable_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    control_point_availability: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "controlPointAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    orientation_parameter_availability: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "orientationParameterAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    orientation_parameter_description: Optional[
        CharacterStringPropertyType
    ] = field(
        default=None,
        metadata={
            "name": "orientationParameterDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    georeferenced_parameters: Optional[RecordPropertyType] = field(
        default=None,
        metadata={
            "name": "georeferencedParameters",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    parameter_citation: list[CiCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "parameterCitation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdKeywordsType(AbstractObjectType):
    """
    Keywords, their type and reference source.
    """

    class Meta:
        name = "MD_Keywords_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    keyword: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    type_value: Optional[MdKeywordTypeCodePropertyType] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    thesaurus_name: Optional[CiCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "thesaurusName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdMetadataExtensionInformationType(AbstractObjectType):
    """
    Information describing metadata extensions.
    """

    class Meta:
        name = "MD_MetadataExtensionInformation_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    extension_on_line_resource: Optional[CiOnlineResourcePropertyType] = field(
        default=None,
        metadata={
            "name": "extensionOnLineResource",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    extended_element_information: list[
        MdExtendedElementInformationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "extendedElementInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdPortrayalCatalogueReferenceType(AbstractObjectType):
    """
    Information identifing the portrayal catalogue used.
    """

    class Meta:
        name = "MD_PortrayalCatalogueReference_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    portrayal_catalogue_citation: list[CiCitationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "portrayalCatalogueCitation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class AffineCs1(AffineCstype):
    """Gml:AffineCS is a two- or three-dimensional coordinate system with straight
    axes that are not necessarily orthogonal.

    An AffineCS shall have two or three gml:axis property elements; the
    number of property elements shall equal the dimension of the CS.
    """

    class Meta:
        name = "AffineCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CartesianCs1(CartesianCstype):
    """Gml:CartesianCS is a 1-, 2-, or 3-dimensional coordinate system.

    In the 1-dimensional case, it contains a single straight coordinate
    axis. In the 2- and 3-dimensional cases gives the position of points
    relative to orthogonal straight axes. In the multi-dimensional case,
    all axes shall have the same length unit of measure. A CartesianCS
    shall have one, two, or three gml:axis property elements.
    """

    class Meta:
        name = "CartesianCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Circle(CircleType):
    """A Circle is an arc whose ends coincide to form a simple closed loop.

    The three control points shall be distinct non-co-linear points for
    the circle to be unambiguously defined. The arc is simply extended
    past the third control point until the first control point is
    encountered.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CylindricalCs1(CylindricalCstype):
    """Gml:CylindricalCS is a three-dimensional coordinate system consisting of a
    polar coordinate system extended by a straight coordinate axis perpendicular to
    the plane spanned by the polar coordinate system.

    A CylindricalCS shall have three gml:axis property elements.
    """

    class Meta:
        name = "CylindricalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EllipsoidalCs1(EllipsoidalCstype):
    """Gml:EllipsoidalCS is a two- or three-dimensional coordinate system in which
    position is specified by geodetic latitude, geodetic longitude, and (in the
    three-dimensional case) ellipsoidal height.

    An EllipsoidalCS shall have two or three gml:axis property elements;
    the number of associations shall equal the dimension of the CS.
    """

    class Meta:
        name = "EllipsoidalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LinearCs1(LinearCstype):
    """Gml:LinearCS is a one-dimensional coordinate system that consists of the
    points that lie on the single axis described.

    The associated coordinate is the distance – with or without offset –
    from the specified datum to the point along the axis. A LinearCS
    shall have one gml:axis property element.
    """

    class Meta:
        name = "LinearCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ObliqueCartesianCs(ObliqueCartesianCstype):
    class Meta:
        name = "ObliqueCartesianCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OffsetCurveType(AbstractCurveSegmentType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    offset_base: Optional[CurvePropertyType] = field(
        default=None,
        metadata={
            "name": "offsetBase",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    distance: Optional[LengthType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    ref_direction: Optional[VectorType] = field(
        default=None,
        metadata={
            "name": "refDirection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OperationMethodType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    formula_citation: Optional[FormulaCitation] = field(
        default=None,
        metadata={
            "name": "formulaCitation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    method_formula: Optional[MethodFormula] = field(
        default=None,
        metadata={
            "name": "methodFormula",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    formula: Optional[Formula] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    source_dimensions: Optional[SourceDimensions] = field(
        default=None,
        metadata={
            "name": "sourceDimensions",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    target_dimensions: Optional[TargetDimensions] = field(
        default=None,
        metadata={
            "name": "targetDimensions",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_parameter: list[UsesParameter] = field(
        default_factory=list,
        metadata={
            "name": "usesParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    general_operation_parameter: list[GeneralOperationParameter] = field(
        default_factory=list,
        metadata={
            "name": "generalOperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    includes_parameter: list[IncludesParameter] = field(
        default_factory=list,
        metadata={
            "name": "includesParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter: list[Parameter] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OperationParameterGroup(OperationParameterGroupType):
    """Gml:OperationParameterGroup is the definition of a group of parameters used
    by an operation method.

    This complex type is expected to be used or extended for all
    applicable operation methods, without defining operation-method-
    specialized element names. The generalOperationParameter elements
    are an unordered list of associations to the set of operation
    parameters that are members of this group.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ParameterValue1(ParameterValueType):
    """Gml:ParameterValue is a parameter value, an ordered sequence of values, or a
    reference to a file of parameter values.

    This concrete complex type may be used for operation methods without
    using an Application Schema that defines operation-method-
    specialized element names and contents, especially for methods with
    only one instance. This complex type may be used, extended, or
    restricted for well-known operation methods, especially for methods
    with many instances.
    """

    class Meta:
        name = "ParameterValue"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolarCs1(PolarCstype):
    """Gml:PolarCS ia s two-dimensional coordinate system in which position is
    specified by the distance from the origin and the angle between the line from
    the origin to a point and a reference direction.

    A PolarCS shall have two gml:axis property elements.
    """

    class Meta:
        name = "PolarCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SphericalCs1(SphericalCstype):
    """Gml:SphericalCS is a three-dimensional coordinate system with one distance
    measured from the origin and two angular coordinates.

    A SphericalCS shall have three gml:axis property elements.
    """

    class Meta:
        name = "SphericalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalCs(TemporalCstype):
    class Meta:
        name = "TemporalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCs1(TimeCstype):
    """Gml:TimeCS is a one-dimensional coordinate system containing a time axis,
    used to describe the temporal position of a point in the specified time units
    from a specified time origin.

    A TimeCS shall have one gml:axis property element.
    """

    class Meta:
        name = "TimeCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCalendarEraType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    reference_event: Optional[StringOrRefType] = field(
        default=None,
        metadata={
            "name": "referenceEvent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    reference_date: Optional[Union[XmlDate, XmlPeriod]] = field(
        default=None,
        metadata={
            "name": "referenceDate",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    julian_reference: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "julianReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    epoch_of_use: Optional[TimePeriodPropertyType] = field(
        default=None,
        metadata={
            "name": "epochOfUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeEdgeType(AbstractTimeTopologyPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    start: Optional[TimeNodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    end: Optional[TimeNodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    extent: Optional[TimePeriodPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class UserDefinedCs1(UserDefinedCstype):
    """Gml:UserDefinedCS is a two- or three-dimensional coordinate system that
    consists of any combination of coordinate axes not covered by any other
    coordinate system type.

    A UserDefinedCS shall have two or three gml:axis property elements;
    the number of property elements shall equal the dimension of the CS.
    """

    class Meta:
        name = "UserDefinedCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCs1(VerticalCstype):
    """Gml:VerticalCS is a one-dimensional coordinate system used to record the
    heights or depths of points.

    Such a coordinate system is usually dependent on the Earth's gravity
    field, perhaps loosely as when atmospheric pressure is the basis for
    the vertical coordinate system axis. A VerticalCS shall have one
    gml:axis property element.
    """

    class Meta:
        name = "VerticalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BaseCurve(CurvePropertyType):
    """The property baseCurve references or contains the base curve, i.e. it either
    references the base curve via the XLink-attributes or contains the curve
    element.

    A curve element is any element which is substitutable for
    AbstractCurve. The base curve has positive orientation.
    """

    class Meta:
        name = "baseCurve"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CenterLineOf(CurvePropertyType):
    class Meta:
        name = "centerLineOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CurveMember(CurvePropertyType):
    class Meta:
        name = "curveMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CurveProperty(CurvePropertyType):
    """This property element either references a curve via the XLink-attributes or
    contains the curve element.

    curveProperty is the predefined property which may be used by GML
    Application Schemas whenever a GML feature has a property with a
    value that is substitutable for AbstractCurve.
    """

    class Meta:
        name = "curveProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectedNode(DirectedNodePropertyType):
    """A gml:directedNode property element describes the boundary of topology edges
    and is used in the support of topological point features via the gml:TopoPoint
    expression, see below.

    The orientation attribute of type gml:SignType expresses the sense
    in which the included node is used: start ("-") or end ("+") node.
    """

    class Meta:
        name = "directedNode"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EdgeOf(CurvePropertyType):
    class Meta:
        name = "edgeOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCenterOf(MultiPointPropertyType):
    class Meta:
        name = "multiCenterOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiLocation(MultiPointPropertyType):
    class Meta:
        name = "multiLocation"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiPointProperty(MultiPointPropertyType):
    class Meta:
        name = "multiPointProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiPosition(MultiPointPropertyType):
    class Meta:
        name = "multiPosition"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DqConformanceResult(DqConformanceResultType):
    class Meta:
        name = "DQ_ConformanceResult"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdAggregateInformation(MdAggregateInformationType):
    class Meta:
        name = "MD_AggregateInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdApplicationSchemaInformation(MdApplicationSchemaInformationType):
    class Meta:
        name = "MD_ApplicationSchemaInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdCoverageDescription(MdCoverageDescriptionType):
    class Meta:
        name = "MD_CoverageDescription"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdFeatureCatalogueDescription(MdFeatureCatalogueDescriptionType):
    class Meta:
        name = "MD_FeatureCatalogueDescription"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdFormat(MdFormatType):
    class Meta:
        name = "MD_Format"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdGeoreferenceable(MdGeoreferenceableType):
    class Meta:
        name = "MD_Georeferenceable"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdImageDescriptionType(MdCoverageDescriptionType):
    """
    Information about an image's suitability for use.
    """

    class Meta:
        name = "MD_ImageDescription_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    illumination_elevation_angle: Optional[RealPropertyType] = field(
        default=None,
        metadata={
            "name": "illuminationElevationAngle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    illumination_azimuth_angle: Optional[RealPropertyType] = field(
        default=None,
        metadata={
            "name": "illuminationAzimuthAngle",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    imaging_condition: Optional[MdImagingConditionCodePropertyType] = field(
        default=None,
        metadata={
            "name": "imagingCondition",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    image_quality_code: Optional[MdIdentifierPropertyType] = field(
        default=None,
        metadata={
            "name": "imageQualityCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    cloud_cover_percentage: Optional[RealPropertyType] = field(
        default=None,
        metadata={
            "name": "cloudCoverPercentage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    processing_level_code: Optional[MdIdentifierPropertyType] = field(
        default=None,
        metadata={
            "name": "processingLevelCode",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    compression_generation_quantity: Optional[IntegerPropertyType] = field(
        default=None,
        metadata={
            "name": "compressionGenerationQuantity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    triangulation_indicator: Optional[BooleanPropertyType2] = field(
        default=None,
        metadata={
            "name": "triangulationIndicator",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    radiometric_calibration_data_availability: Optional[
        BooleanPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "radiometricCalibrationDataAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    camera_calibration_information_availability: Optional[
        BooleanPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "cameraCalibrationInformationAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    film_distortion_information_availability: Optional[
        BooleanPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "filmDistortionInformationAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    lens_distortion_information_availability: Optional[
        BooleanPropertyType2
    ] = field(
        default=None,
        metadata={
            "name": "lensDistortionInformationAvailability",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdKeywords(MdKeywordsType):
    class Meta:
        name = "MD_Keywords"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdMetadataExtensionInformation(MdMetadataExtensionInformationType):
    class Meta:
        name = "MD_MetadataExtensionInformation"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdPortrayalCatalogueReference(MdPortrayalCatalogueReferenceType):
    class Meta:
        name = "MD_PortrayalCatalogueReference"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractGeneralParameterValuePropertyType:
    """
    Gml:AbstractGeneralParameterValuePropertyType is a  property type for inline
    association roles to a parameter value or group of parameter values, always
    containing the values.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    parameter_value_group: Optional["ParameterValueGroup"] = field(
        default=None,
        metadata={
            "name": "ParameterValueGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value: Optional[ParameterValue1] = field(
        default=None,
        metadata={
            "name": "ParameterValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AffineCspropertyType:
    """
    Gml:AffineCSPropertyType is a property type for association roles to an affine
    coordinate system, either referencing or containing the definition of that
    coordinate system.

    :ivar affine_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "AffineCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    affine_cs: Optional[AffineCs1] = field(
        default=None,
        metadata={
            "name": "AffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CartesianCspropertyType:
    """
    Gml:CartesianCSPropertyType is a property type for association roles to a
    Cartesian coordinate system, either referencing or containing the definition of
    that coordinate system.

    :ivar cartesian_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "CartesianCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    cartesian_cs: Optional[CartesianCs1] = field(
        default=None,
        metadata={
            "name": "CartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CompositeCurveType(AbstractCurveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    curve_member: list[CurveMember] = field(
        default_factory=list,
        metadata={
            "name": "curveMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class CoordinateSystemPropertyType:
    """
    Gml:CoordinateSystemPropertyType is a property type for association roles to a
    coordinate system, either referencing or containing the definition of that
    coordinate system.

    :ivar oblique_cartesian_cs:
    :ivar temporal_cs:
    :ivar affine_cs:
    :ivar cylindrical_cs:
    :ivar polar_cs:
    :ivar spherical_cs:
    :ivar user_defined_cs:
    :ivar linear_cs:
    :ivar time_cs:
    :ivar vertical_cs:
    :ivar cartesian_cs:
    :ivar ellipsoidal_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    oblique_cartesian_cs: Optional[ObliqueCartesianCs] = field(
        default=None,
        metadata={
            "name": "ObliqueCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_cs: Optional[TemporalCs] = field(
        default=None,
        metadata={
            "name": "TemporalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    affine_cs: Optional[AffineCs1] = field(
        default=None,
        metadata={
            "name": "AffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cylindrical_cs: Optional[CylindricalCs1] = field(
        default=None,
        metadata={
            "name": "CylindricalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polar_cs: Optional[PolarCs1] = field(
        default=None,
        metadata={
            "name": "PolarCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    spherical_cs: Optional[SphericalCs1] = field(
        default=None,
        metadata={
            "name": "SphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    user_defined_cs: Optional[UserDefinedCs1] = field(
        default=None,
        metadata={
            "name": "UserDefinedCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_cs: Optional[LinearCs1] = field(
        default=None,
        metadata={
            "name": "LinearCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_cs: Optional[TimeCs1] = field(
        default=None,
        metadata={
            "name": "TimeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_cs: Optional[VerticalCs1] = field(
        default=None,
        metadata={
            "name": "VerticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs1] = field(
        default=None,
        metadata={
            "name": "CartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoidal_cs: Optional[EllipsoidalCs1] = field(
        default=None,
        metadata={
            "name": "EllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CylindricalCspropertyType:
    """
    Gml:CylindricalCSPropertyType is a property type for association roles to a
    cylindrical coordinate system, either referencing or containing the definition
    of that coordinate system.

    :ivar cylindrical_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "CylindricalCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    cylindrical_cs: Optional[CylindricalCs1] = field(
        default=None,
        metadata={
            "name": "CylindricalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class EdgeType(AbstractTopoPrimitiveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    container: Optional[TopoSolidPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_node: list[DirectedNode] = field(
        default_factory=list,
        metadata={
            "name": "directedNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 2,
            "max_occurs": 2,
        },
    )
    directed_face: list["DirectedFace"] = field(
        default_factory=list,
        metadata={
            "name": "directedFace",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve_property: Optional[CurveProperty] = field(
        default=None,
        metadata={
            "name": "curveProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class EllipsoidalCspropertyType:
    """
    Gml:EllipsoidalCSPropertyType is a property type for association roles to an
    ellipsoidal coordinate system, either referencing or containing the definition
    of that coordinate system.

    :ivar ellipsoidal_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "EllipsoidalCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    ellipsoidal_cs: Optional[EllipsoidalCs1] = field(
        default=None,
        metadata={
            "name": "EllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LinearCspropertyType:
    """
    Gml:LinearCSPropertyType is a property type for association roles to a linear
    coordinate system, either referencing or containing the definition of that
    coordinate system.

    :ivar linear_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "LinearCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    linear_cs: Optional[LinearCs1] = field(
        default=None,
        metadata={
            "name": "LinearCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ObliqueCartesianCspropertyType:
    """
    :ivar oblique_cartesian_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "ObliqueCartesianCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    oblique_cartesian_cs: Optional[ObliqueCartesianCs] = field(
        default=None,
        metadata={
            "name": "ObliqueCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OffsetCurve(OffsetCurveType):
    """An offset curve is a curve at a constant distance from the basis curve.

    offsetBase is the base curve from which this curve is defined as an
    offset. distance and refDirection have the same meaning as specified
    in ISO 19107:2003, 6.4.23. The content model follows the general
    pattern for the encoding of curve segments.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationMethod(OperationMethodType):
    """Gml:OperationMethod is a method (algorithm or procedure) used to perform a
    coordinate operation.

    Most operation methods use a number of operation parameters,
    although some coordinate conversions use none. Each coordinate
    operation using the method assigns values to these parameters. The
    parameter elements are an unordered list of associations to the set
    of operation parameters and parameter groups used by this operation
    method.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationParameterGroupPropertyType:
    """
    Gml:OperationParameterPropertyType is a property type for association roles to
    an operation parameter group, either referencing or containing the definition
    of that parameter group.

    :ivar operation_parameter_group:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    operation_parameter_group: Optional[OperationParameterGroup] = field(
        default=None,
        metadata={
            "name": "OperationParameterGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OrientableCurveType(AbstractCurveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    base_curve: Optional[BaseCurve] = field(
        default=None,
        metadata={
            "name": "baseCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    orientation: SignType = field(
        default=SignType.PLUS_SIGN,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class PolarCspropertyType:
    """
    Gml:PolarCSPropertyType is a property type for association roles to a polar
    coordinate system, either referencing or containing the definition of that
    coordinate system.

    :ivar polar_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "PolarCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    polar_cs: Optional[PolarCs1] = field(
        default=None,
        metadata={
            "name": "PolarCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class RingType(AbstractRingType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    curve_member: list[CurveMember] = field(
        default_factory=list,
        metadata={
            "name": "curveMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class SphericalCspropertyType:
    """
    Gml:SphericalCSPropertyType is property type for association roles to a
    spherical coordinate system, either referencing or containing the definition of
    that coordinate system.

    :ivar spherical_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "SphericalCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    spherical_cs: Optional[SphericalCs1] = field(
        default=None,
        metadata={
            "name": "SphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TemporalCspropertyType:
    """
    :ivar temporal_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "TemporalCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    temporal_cs: Optional[TemporalCs] = field(
        default=None,
        metadata={
            "name": "TemporalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeCspropertyType:
    """
    Gml:TimeCSPropertyType is a property type for association roles to a time
    coordinate system, either referencing or containing the definition of that
    coordinate system.

    :ivar time_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "TimeCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_cs: Optional[TimeCs1] = field(
        default=None,
        metadata={
            "name": "TimeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeCalendarEra(TimeCalendarEraType):
    """Gml:TimeCalendarEra inherits basic properties from gml:DefinitionType and
    has the following additional properties:

    -       gml:referenceEvent is the name or description of a mythical or historic event which fixes the position of the base scale of the calendar era.  This is given as text or using a link to description held elsewhere.
    -       gml:referenceDate specifies the date of the referenceEvent expressed as a date in the given calendar.  In most calendars, this date is the origin (i.e., the first day) of the scale, but this is not always true.
    -       gml:julianReference specifies the Julian date that corresponds to the reference date.  The Julian day number is an integer value; the Julian date is a decimal value that allows greater resolution.  Transforming calendar dates to and from Julian dates provides a relatively simple basis for transforming dates from one calendar to another.
    -       gml:epochOfUse is the period for which the calendar era was used as a basis for dating.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeEdge(TimeEdgeType):
    """A time edge is a one-dimensional topological primitive.

    It is an open interval that starts and ends at a node. The edge may
    be realised as a geometry whose value is a time period.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoPointType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    directed_node: Optional[DirectedNode] = field(
        default=None,
        metadata={
            "name": "directedNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class UserDefinedCspropertyType:
    """
    Gml:UserDefinedCSPropertyType is a property type for association roles to a
    user-defined coordinate system, either referencing or containing the definition
    of that coordinate system.

    :ivar user_defined_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "UserDefinedCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    user_defined_cs: Optional[UserDefinedCs1] = field(
        default=None,
        metadata={
            "name": "UserDefinedCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class VerticalCspropertyType:
    """
    Gml:VerticalCSPropertyType is a property type for association roles to a
    vertical coordinate system, either referencing or containing the definition of
    that coordinate system.

    :ivar vertical_cs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "VerticalCSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    vertical_cs: Optional[VerticalCs1] = field(
        default=None,
        metadata={
            "name": "VerticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DqConformanceResultPropertyType:
    """
    :ivar dq_conformance_result:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_ConformanceResult_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_conformance_result: Optional[DqConformanceResult] = field(
        default=None,
        metadata={
            "name": "DQ_ConformanceResult",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqResultPropertyType:
    """
    :ivar dq_quantitative_result:
    :ivar dq_conformance_result:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_Result_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_quantitative_result: Optional[DqQuantitativeResult] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeResult",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_conformance_result: Optional[DqConformanceResult] = field(
        default=None,
        metadata={
            "name": "DQ_ConformanceResult",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdAggregateInformationPropertyType:
    """
    :ivar md_aggregate_information:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_AggregateInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_aggregate_information: Optional[MdAggregateInformation] = field(
        default=None,
        metadata={
            "name": "MD_AggregateInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdApplicationSchemaInformationPropertyType:
    """
    :ivar md_application_schema_information:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_ApplicationSchemaInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_application_schema_information: Optional[
        MdApplicationSchemaInformation
    ] = field(
        default=None,
        metadata={
            "name": "MD_ApplicationSchemaInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdFeatureCatalogueDescriptionPropertyType:
    """
    :ivar md_feature_catalogue_description:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_FeatureCatalogueDescription_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_feature_catalogue_description: Optional[
        MdFeatureCatalogueDescription
    ] = field(
        default=None,
        metadata={
            "name": "MD_FeatureCatalogueDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdFormatPropertyType:
    """
    :ivar md_format:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Format_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_format: Optional[MdFormat] = field(
        default=None,
        metadata={
            "name": "MD_Format",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGeoreferenceablePropertyType:
    """
    :ivar md_georeferenceable:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Georeferenceable_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_georeferenceable: Optional[MdGeoreferenceable] = field(
        default=None,
        metadata={
            "name": "MD_Georeferenceable",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdGridSpatialRepresentationPropertyType:
    """
    :ivar md_georectified:
    :ivar md_georeferenceable:
    :ivar md_grid_spatial_representation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_GridSpatialRepresentation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_georectified: Optional[MdGeorectified] = field(
        default=None,
        metadata={
            "name": "MD_Georectified",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_georeferenceable: Optional[MdGeoreferenceable] = field(
        default=None,
        metadata={
            "name": "MD_Georeferenceable",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_grid_spatial_representation: Optional[MdGridSpatialRepresentation] = (
        field(
            default=None,
            metadata={
                "name": "MD_GridSpatialRepresentation",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdImageDescription(MdImageDescriptionType):
    class Meta:
        name = "MD_ImageDescription"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdKeywordsPropertyType:
    """
    :ivar md_keywords:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Keywords_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_keywords: Optional[MdKeywords] = field(
        default=None,
        metadata={
            "name": "MD_Keywords",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdMetadataExtensionInformationPropertyType:
    """
    :ivar md_metadata_extension_information:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_MetadataExtensionInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_metadata_extension_information: Optional[
        MdMetadataExtensionInformation
    ] = field(
        default=None,
        metadata={
            "name": "MD_MetadataExtensionInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdPortrayalCatalogueReferencePropertyType:
    """
    :ivar md_portrayal_catalogue_reference:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_PortrayalCatalogueReference_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_portrayal_catalogue_reference: Optional[
        MdPortrayalCatalogueReference
    ] = field(
        default=None,
        metadata={
            "name": "MD_PortrayalCatalogueReference",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdSpatialRepresentationPropertyType:
    """
    :ivar md_vector_spatial_representation:
    :ivar md_georectified:
    :ivar md_georeferenceable:
    :ivar md_grid_spatial_representation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_SpatialRepresentation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_vector_spatial_representation: Optional[
        MdVectorSpatialRepresentation
    ] = field(
        default=None,
        metadata={
            "name": "MD_VectorSpatialRepresentation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_georectified: Optional[MdGeorectified] = field(
        default=None,
        metadata={
            "name": "MD_Georectified",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_georeferenceable: Optional[MdGeoreferenceable] = field(
        default=None,
        metadata={
            "name": "MD_Georeferenceable",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_grid_spatial_representation: Optional[MdGridSpatialRepresentation] = (
        field(
            default=None,
            metadata={
                "name": "MD_GridSpatialRepresentation",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class TmPrimitivePropertyType:
    """
    :ivar time_edge:
    :ivar time_node:
    :ivar time_period:
    :ivar time_instant:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "TM_Primitive_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gts"

    time_edge: Optional[TimeEdge] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_period: Optional[TimePeriod] = field(
        default=None,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_instant: Optional[TimeInstant] = field(
        default=None,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CompositeCurve(CompositeCurveType):
    """A gml:CompositeCurve is represented by a sequence of (orientable) curves
    such that each curve in the sequence terminates at the start point of the
    subsequent curve in the list.

    curveMember references or contains inline one curve in the composite
    curve. The curves are contiguous, the collection of curves is
    ordered. Therefore, if provided, the aggregationType attribute shall
    have the value "sequence".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CurveSegmentArrayPropertyType:
    """
    Gml:CurveSegmentArrayPropertyType is a container for an array of curve
    segments.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    geodesic: list[Geodesic] = field(
        default_factory=list,
        metadata={
            "name": "Geodesic",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    geodesic_string: list[GeodesicString] = field(
        default_factory=list,
        metadata={
            "name": "GeodesicString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    clothoid: list[Clothoid] = field(
        default_factory=list,
        metadata={
            "name": "Clothoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    offset_curve: list[OffsetCurve] = field(
        default_factory=list,
        metadata={
            "name": "OffsetCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    bezier: list[Bezier] = field(
        default_factory=list,
        metadata={
            "name": "Bezier",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    bspline: list[Bspline] = field(
        default_factory=list,
        metadata={
            "name": "BSpline",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    cubic_spline: list[CubicSpline] = field(
        default_factory=list,
        metadata={
            "name": "CubicSpline",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    circle_by_center_point: list[CircleByCenterPoint] = field(
        default_factory=list,
        metadata={
            "name": "CircleByCenterPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    arc_by_center_point: list[ArcByCenterPoint] = field(
        default_factory=list,
        metadata={
            "name": "ArcByCenterPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    arc_by_bulge: list[ArcByBulge] = field(
        default_factory=list,
        metadata={
            "name": "ArcByBulge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    arc_string_by_bulge: list[ArcStringByBulge] = field(
        default_factory=list,
        metadata={
            "name": "ArcStringByBulge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    circle: list[Circle] = field(
        default_factory=list,
        metadata={
            "name": "Circle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    arc: list[Arc] = field(
        default_factory=list,
        metadata={
            "name": "Arc",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    arc_string: list[ArcString] = field(
        default_factory=list,
        metadata={
            "name": "ArcString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    line_string_segment: list[LineStringSegment] = field(
        default_factory=list,
        metadata={
            "name": "LineStringSegment",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )


@dataclass
class Edge(EdgeType):
    """Gml:Edge represents the 1-dimensional primitive.

    The topological boundary of an Edge (gml:directedNode) consists of a
    negatively directed start Node and a positively directed end Node.
    The optional coboundary of an edge (gml:directedFace) is a circular
    sequence of directed faces which are incident on this edge in
    document order. In the 2D case, the orientation of the face on the
    left of the edge is "+"; the orientation of the face on the right on
    its right is "-". If provided, the aggregationType attribute shall
    have the value "sequence". An edge may optionally be realised by a
    1-dimensional geometric primitive (gml:curveProperty).
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationMethodPropertyType:
    """
    Gml:OperationMethodPropertyType is a property type for association roles to a
    concrete general-purpose operation method, either referencing or containing the
    definition of that method.

    :ivar operation_method:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    operation_method: Optional[OperationMethod] = field(
        default=None,
        metadata={
            "name": "OperationMethod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OrientableCurve(OrientableCurveType):
    """OrientableCurve consists of a curve and an orientation.

    If the orientation is "+", then the OrientableCurve is identical to
    the baseCurve. If the orientation is "-", then the OrientableCurve
    is related to another AbstractCurve with a parameterization that
    reverses the sense of the curve traversal.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Ring(RingType):
    """A ring is used to represent a single connected component of a surface
    boundary as specified in ISO 19107:2003, 6.3.6.

    Every gml:curveMember references or contains one curve, i.e. any
    element which is substitutable for gml:AbstractCurve. In the context
    of a ring, the curves describe the boundary of the surface. The
    sequence of curves shall be contiguous and connected in a cycle. If
    provided, the aggregationType attribute shall have the value
    "sequence".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCalendarEraPropertyType:
    """
    Gml:TimeCalendarEraPropertyType provides for associating a gml:TimeCalendarEra
    with an object.

    :ivar time_calendar_era:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_calendar_era: Optional[TimeCalendarEra] = field(
        default=None,
        metadata={
            "name": "TimeCalendarEra",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeEdgePropertyType:
    """
    Gml:TimeEdgePropertyType provides for associating a gml:TimeEdge with an
    object.

    :ivar time_edge:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_edge: Optional[TimeEdge] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimePrimitivePropertyType:
    """
    Gml:TimePrimitivePropertyType provides a standard content model for
    associations between an arbitrary member of the substitution group whose head
    is gml:AbstractTimePrimitive and another object.

    :ivar time_edge:
    :ivar time_node:
    :ivar time_period:
    :ivar time_instant:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_edge: Optional[TimeEdge] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_period: Optional[TimePeriod] = field(
        default=None,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_instant: Optional[TimeInstant] = field(
        default=None,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimeTopologyPrimitivePropertyType:
    """
    Gml:TimeTopologyPrimitivePropertyType provides for associating a
    gml:AbstractTimeTopologyPrimitive with an object.

    :ivar time_edge:
    :ivar time_node:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_edge: Optional[TimeEdge] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoPoint(TopoPointType):
    """
    The intended use of gml:TopoPoint is to appear within a point feature to
    express the structural and possibly geometric relationships of this feature to
    other features via shared node definitions.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AffineCs2(AffineCspropertyType):
    """
    Gml:affineCS is an association role to the affine coordinate system used by
    this CRS.
    """

    class Meta:
        name = "affineCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CartesianCsref(CartesianCspropertyType):
    class Meta:
        name = "cartesianCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CartesianCs2(CartesianCspropertyType):
    """
    Gml:cartesianCS is an association role to the Cartesian coordinate system used
    by this CRS.
    """

    class Meta:
        name = "cartesianCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordinateSystem(CoordinateSystemPropertyType):
    """
    An association role to the coordinate system used by this CRS.
    """

    class Meta:
        name = "coordinateSystem"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordinateSystemRef(CoordinateSystemPropertyType):
    class Meta:
        name = "coordinateSystemRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CylindricalCsref(CylindricalCspropertyType):
    class Meta:
        name = "cylindricalCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CylindricalCs2(CylindricalCspropertyType):
    """
    Gml:cylindricalCS is an association role to the cylindrical coordinate system
    used by this CRS.
    """

    class Meta:
        name = "cylindricalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EllipsoidalCsref(EllipsoidalCspropertyType):
    class Meta:
        name = "ellipsoidalCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EllipsoidalCs2(EllipsoidalCspropertyType):
    """
    Gml:ellipsoidalCS is an association role to the ellipsoidal coordinate system
    used by this CRS.
    """

    class Meta:
        name = "ellipsoidalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Group(OperationParameterGroupPropertyType):
    """
    Gml:group is an association role to the operation parameter group for which
    this element provides parameter values.
    """

    class Meta:
        name = "group"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class IncludesValue(AbstractGeneralParameterValuePropertyType):
    class Meta:
        name = "includesValue"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LinearCsref(LinearCspropertyType):
    class Meta:
        name = "linearCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LinearCs2(LinearCspropertyType):
    """
    Gml:linearCS is an association role to the linear coordinate system used by
    this CRS.
    """

    class Meta:
        name = "linearCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ObliqueCartesianCsref(ObliqueCartesianCspropertyType):
    class Meta:
        name = "obliqueCartesianCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ParameterValue2(AbstractGeneralParameterValuePropertyType):
    """
    Gml:parameterValue is a composition association to a parameter value or group
    of parameter values used by a coordinate operation.
    """

    class Meta:
        name = "parameterValue"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolarCsref(PolarCspropertyType):
    class Meta:
        name = "polarCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolarCs2(PolarCspropertyType):
    """
    Gml:polarCS is an association role to the polar coordinate system used by this
    CRS.
    """

    class Meta:
        name = "polarCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SphericalCsref(SphericalCspropertyType):
    class Meta:
        name = "sphericalCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SphericalCs2(SphericalCspropertyType):
    """
    Gml:sphericalCS is an association role to the spherical coordinate system used
    by this CRS.
    """

    class Meta:
        name = "sphericalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalCsref(TemporalCspropertyType):
    class Meta:
        name = "temporalCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCs2(TimeCspropertyType):
    """
    Gml:timeCS is an association role to the time coordinate system used by this
    CRS.
    """

    class Meta:
        name = "timeCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UserDefinedCsref(UserDefinedCspropertyType):
    class Meta:
        name = "userDefinedCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UserDefinedCs2(UserDefinedCspropertyType):
    """
    Gml:userDefinedCS is an association role to the user defined coordinate system
    used by this CRS.
    """

    class Meta:
        name = "userDefinedCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesAffineCs(AffineCspropertyType):
    class Meta:
        name = "usesAffineCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesCs(CoordinateSystemPropertyType):
    class Meta:
        name = "usesCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesCartesianCs(CartesianCspropertyType):
    class Meta:
        name = "usesCartesianCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesEllipsoidalCs(EllipsoidalCspropertyType):
    class Meta:
        name = "usesEllipsoidalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesObliqueCartesianCs(ObliqueCartesianCspropertyType):
    class Meta:
        name = "usesObliqueCartesianCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesSphericalCs(SphericalCspropertyType):
    class Meta:
        name = "usesSphericalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesTemporalCs(TemporalCspropertyType):
    class Meta:
        name = "usesTemporalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesTimeCs(TimeCspropertyType):
    class Meta:
        name = "usesTimeCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesValue(AbstractGeneralParameterValuePropertyType):
    class Meta:
        name = "usesValue"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesVerticalCs(VerticalCspropertyType):
    class Meta:
        name = "usesVerticalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValuesOfGroup(OperationParameterGroupPropertyType):
    class Meta:
        name = "valuesOfGroup"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCsref(VerticalCspropertyType):
    class Meta:
        name = "verticalCSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCs2(VerticalCspropertyType):
    """
    Gml:verticalCS is an association role to the vertical coordinate system used by
    this CRS.
    """

    class Meta:
        name = "verticalCS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractDqElementType(AbstractObjectType):
    class Meta:
        name = "AbstractDQ_Element_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name_of_measure: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "nameOfMeasure",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    measure_identification: Optional[MdIdentifierPropertyType] = field(
        default=None,
        metadata={
            "name": "measureIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    measure_description: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "measureDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    evaluation_method_type: Optional[
        DqEvaluationMethodTypeCodePropertyType
    ] = field(
        default=None,
        metadata={
            "name": "evaluationMethodType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    evaluation_method_description: Optional[CharacterStringPropertyType] = (
        field(
            default=None,
            metadata={
                "name": "evaluationMethodDescription",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    evaluation_procedure: Optional[CiCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "evaluationProcedure",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    date_time: list[DateTimePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "dateTime",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    result: list[DqResultPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
            "max_occurs": 2,
        },
    )


@dataclass
class AbstractMdIdentificationType(AbstractObjectType):
    """
    Basic information about data.
    """

    class Meta:
        name = "AbstractMD_Identification_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    citation: Optional[CiCitationPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    abstract: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    purpose: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    credit: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    status: list[MdProgressCodePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    point_of_contact: list[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "pointOfContact",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    resource_maintenance: list[MdMaintenanceInformationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "resourceMaintenance",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    graphic_overview: list[MdBrowseGraphicPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "graphicOverview",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    resource_format: list[MdFormatPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "resourceFormat",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    descriptive_keywords: list[MdKeywordsPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "descriptiveKeywords",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    resource_specific_usage: list[MdUsagePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "resourceSpecificUsage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    resource_constraints: list[MdConstraintsPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "resourceConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    aggregation_info: list[MdAggregateInformationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "aggregationInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class ExTemporalExtentType(AbstractObjectType):
    """
    Time period covered by the content of the dataset.
    """

    class Meta:
        name = "EX_TemporalExtent_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    extent: Optional[TmPrimitivePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )


@dataclass
class MdContentInformationPropertyType:
    """
    :ivar md_image_description:
    :ivar md_coverage_description:
    :ivar md_feature_catalogue_description:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_ContentInformation_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_image_description: Optional[MdImageDescription] = field(
        default=None,
        metadata={
            "name": "MD_ImageDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_coverage_description: Optional[MdCoverageDescription] = field(
        default=None,
        metadata={
            "name": "MD_CoverageDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_feature_catalogue_description: Optional[
        MdFeatureCatalogueDescription
    ] = field(
        default=None,
        metadata={
            "name": "MD_FeatureCatalogueDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdCoverageDescriptionPropertyType:
    """
    :ivar md_image_description:
    :ivar md_coverage_description:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_CoverageDescription_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_image_description: Optional[MdImageDescription] = field(
        default=None,
        metadata={
            "name": "MD_ImageDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_coverage_description: Optional[MdCoverageDescription] = field(
        default=None,
        metadata={
            "name": "MD_CoverageDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDistributionType(AbstractObjectType):
    """
    Information about the distributor of and options for obtaining the dataset.
    """

    class Meta:
        name = "MD_Distribution_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    distribution_format: list[MdFormatPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "distributionFormat",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    distributor: list[MdDistributorPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    transfer_options: list[MdDigitalTransferOptionsPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "transferOptions",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdImageDescriptionPropertyType:
    """
    :ivar md_image_description:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_ImageDescription_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_image_description: Optional[MdImageDescription] = field(
        default=None,
        metadata={
            "name": "MD_ImageDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractRingPropertyType:
    """
    A property with the content model of gml:AbstractRingPropertyType encapsulates
    a ring to represent the surface boundary property of a surface.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DirectedEdgePropertyType:
    """
    :ivar edge:
    :ivar orientation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    edge: Optional[Edge] = field(
        default=None,
        metadata={
            "name": "Edge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientation: SignType = field(
        default=SignType.PLUS_SIGN,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ParameterValueGroupType(AbstractGeneralParameterValueType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    includes_value: list[IncludesValue] = field(
        default_factory=list,
        metadata={
            "name": "includesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_value: list[UsesValue] = field(
        default_factory=list,
        metadata={
            "name": "usesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value: list[ParameterValue2] = field(
        default_factory=list,
        metadata={
            "name": "parameterValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    values_of_group: Optional[ValuesOfGroup] = field(
        default=None,
        metadata={
            "name": "valuesOfGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    group: Optional[Group] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class RelatedTimeType(TimePrimitivePropertyType):
    """Gml:RelatedTimeType provides a content model for indicating the relative
    position of an arbitrary member of the substitution group whose head is
    gml:AbstractTimePrimitive.

    It extends the generic gml:TimePrimitivePropertyType with an XML
    attribute relativePosition, whose value is selected from the set of
    13 temporal relationships identified by Allen (1983)
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    relative_position: Optional[RelatedTimeTypeRelativePosition] = field(
        default=None,
        metadata={
            "name": "relativePosition",
            "type": "Attribute",
        },
    )


@dataclass
class RingPropertyType:
    """
    A property with the content model of gml:RingPropertyType encapsulates a ring
    to represent a component of a surface boundary.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TimeCalendarType(TimeReferenceSystemType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    reference_frame: list[TimeCalendarEraPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "referenceFrame",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class TimeTopologyComplexType(AbstractTimeComplexType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    primitive: list[TimeTopologyPrimitivePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class TopoPointPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_point: Optional[TopoPoint] = field(
        default=None,
        metadata={
            "name": "TopoPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Method(OperationMethodPropertyType):
    """
    Gml:method is an association role to the operation method used by a coordinate
    operation.
    """

    class Meta:
        name = "method"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationMethodRef(OperationMethodPropertyType):
    class Meta:
        name = "operationMethodRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Segments(CurveSegmentArrayPropertyType):
    """This property element contains a list of curve segments.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "segments"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesMethod(OperationMethodPropertyType):
    class Meta:
        name = "usesMethod"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValidTime(TimePrimitivePropertyType):
    """
    Gml:validTime is a convenience property element.
    """

    class Meta:
        name = "validTime"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractDqCompletenessType(AbstractDqElementType):
    class Meta:
        name = "AbstractDQ_Completeness_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqElement(AbstractDqElementType):
    class Meta:
        name = "AbstractDQ_Element"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqLogicalConsistencyType(AbstractDqElementType):
    class Meta:
        name = "AbstractDQ_LogicalConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqPositionalAccuracyType(AbstractDqElementType):
    class Meta:
        name = "AbstractDQ_PositionalAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqTemporalAccuracyType(AbstractDqElementType):
    class Meta:
        name = "AbstractDQ_TemporalAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqThematicAccuracyType(AbstractDqElementType):
    class Meta:
        name = "AbstractDQ_ThematicAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractMdIdentification(AbstractMdIdentificationType):
    class Meta:
        name = "AbstractMD_Identification"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class ExTemporalExtent(ExTemporalExtentType):
    class Meta:
        name = "EX_TemporalExtent"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDistribution(MdDistributionType):
    class Meta:
        name = "MD_Distribution"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdServiceIdentificationType(AbstractMdIdentificationType):
    """
    See 19119 for further info.
    """

    class Meta:
        name = "MD_ServiceIdentification_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractTimeSliceType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    valid_time: Optional[ValidTime] = field(
        default=None,
        metadata={
            "name": "validTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    data_source: Optional[DataSource] = field(
        default=None,
        metadata={
            "name": "dataSource",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CurveType(AbstractCurveType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    segments: Optional[Segments] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class ParameterValueGroup(ParameterValueGroupType):
    """Gml:ParameterValueGroup is a group of related parameter values.

    The same group can be repeated more than once in a Conversion,
    Transformation, or higher level ParameterValueGroup, if those
    instances contain different values of one or more parameterValues
    which suitably distinquish among those groups. This concrete complex
    type can be used for operation methods without using an Application
    Schema that defines operation-method-specialized element names and
    contents. This complex type may be used, extended, or restricted for
    well-known operation methods, especially for methods with only one
    instance. The parameterValue elements are an unordered set of
    composition association roles to the parameter values and groups of
    values included in this group.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeCalendar(TimeCalendarType):
    """A calendar is a discrete temporal reference system that provides a basis for
    defining temporal position to a resolution of one day.

    gml:TimeCalendar adds one property to those inherited from
    gml:TimeReferenceSystem. A gml:referenceFrame provides a link to a
    gml:TimeCalendarEra that it uses. A  gml:TimeCalendar may reference
    more than one calendar era. The referenceFrame element follows the
    standard GML property model, allowing the association to be
    instantiated either using an inline description using the
    gml:TimeCalendarEra element, or a link to a gml:TimeCalendarEra
    which is explicit elsewhere.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeOrdinalEraType(DefinitionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    related_time: list[RelatedTimeType] = field(
        default_factory=list,
        metadata={
            "name": "relatedTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    start: Optional[TimeNodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    end: Optional[TimeNodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    extent: Optional[TimePeriodPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    member: list["TimeOrdinalEraPropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    group: Optional[ReferenceType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeTopologyComplex(TimeTopologyComplexType):
    """A temporal topology complex shall be the connected acyclic directed graph
    composed of temporal topological primitives, i.e. time nodes and time edges.

    Because a time edge may not exist without two time nodes on its
    boundaries, static features have time edges from a temporal topology
    complex as the values of their temporal properties, regardless of
    explicit declarations. A temporal topology complex expresses a
    linear or a non-linear graph. A temporal linear graph, composed of a
    sequence of time edges, provides a lineage described only by
    "substitution" of feature instances or feature element values. A
    time node as the start or the end of the graph connects with at
    least one time edge. A time node other than the start and the end
    shall connect to at least two time edges: one of starting from the
    node, and another ending at the node. A temporal topological complex
    is a set of connected temporal topological primitives. The member
    primtives are indicated, either by reference or by value, using the
    primitive property.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectedEdge(DirectedEdgePropertyType):
    """A gml:directedEdge property element describes the boundary of topology
    faces, the coBoundary of topology nodes and is used in the support of
    topological line features via the gml:TopoCurve expression, see below.

    The orientation attribute of type gml:SignType expresses the sense
    in which the included edge is used, i.e. forward or reverse.
    """

    class Meta:
        name = "directedEdge"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Exterior(AbstractRingPropertyType):
    """A boundary of a surface consists of a number of rings.

    In the normal 2D case, one of these rings is distinguished as being
    the exterior boundary. In a general manifold this is not always
    possible, in which case all boundaries shall be listed as interior
    boundaries, and the exterior will be empty.
    """

    class Meta:
        name = "exterior"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Interior(AbstractRingPropertyType):
    """A boundary of a surface consists of a number of rings.

    The "interior" rings separate the surface / surface patch from the
    area enclosed by the rings.
    """

    class Meta:
        name = "interior"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoPointProperty(TopoPointPropertyType):
    """
    The gml:topoPointProperty property element may be used in features to express
    their relationship to the referenced topology node.
    """

    class Meta:
        name = "topoPointProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractDqCompleteness(AbstractDqCompletenessType):
    class Meta:
        name = "AbstractDQ_Completeness"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqLogicalConsistency(AbstractDqLogicalConsistencyType):
    class Meta:
        name = "AbstractDQ_LogicalConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqPositionalAccuracy(AbstractDqPositionalAccuracyType):
    class Meta:
        name = "AbstractDQ_PositionalAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqTemporalAccuracy(AbstractDqTemporalAccuracyType):
    class Meta:
        name = "AbstractDQ_TemporalAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractDqThematicAccuracy(AbstractDqThematicAccuracyType):
    class Meta:
        name = "AbstractDQ_ThematicAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqAbsoluteExternalPositionalAccuracyType(
    AbstractDqPositionalAccuracyType
):
    class Meta:
        name = "DQ_AbsoluteExternalPositionalAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqAccuracyOfAtimeMeasurementType(AbstractDqTemporalAccuracyType):
    class Meta:
        name = "DQ_AccuracyOfATimeMeasurement_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqCompletenessCommissionType(AbstractDqCompletenessType):
    class Meta:
        name = "DQ_CompletenessCommission_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqCompletenessOmissionType(AbstractDqCompletenessType):
    class Meta:
        name = "DQ_CompletenessOmission_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqConceptualConsistencyType(AbstractDqLogicalConsistencyType):
    class Meta:
        name = "DQ_ConceptualConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqDomainConsistencyType(AbstractDqLogicalConsistencyType):
    class Meta:
        name = "DQ_DomainConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqFormatConsistencyType(AbstractDqLogicalConsistencyType):
    class Meta:
        name = "DQ_FormatConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqGriddedDataPositionalAccuracyType(AbstractDqPositionalAccuracyType):
    class Meta:
        name = "DQ_GriddedDataPositionalAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqNonQuantitativeAttributeAccuracyType(AbstractDqThematicAccuracyType):
    class Meta:
        name = "DQ_NonQuantitativeAttributeAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqQuantitativeAttributeAccuracyType(AbstractDqThematicAccuracyType):
    class Meta:
        name = "DQ_QuantitativeAttributeAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqRelativeInternalPositionalAccuracyType(
    AbstractDqPositionalAccuracyType
):
    class Meta:
        name = "DQ_RelativeInternalPositionalAccuracy_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTemporalConsistencyType(AbstractDqTemporalAccuracyType):
    class Meta:
        name = "DQ_TemporalConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTemporalValidityType(AbstractDqTemporalAccuracyType):
    class Meta:
        name = "DQ_TemporalValidity_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqThematicClassificationCorrectnessType(AbstractDqThematicAccuracyType):
    class Meta:
        name = "DQ_ThematicClassificationCorrectness_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTopologicalConsistencyType(AbstractDqLogicalConsistencyType):
    class Meta:
        name = "DQ_TopologicalConsistency_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDistributionPropertyType:
    """
    :ivar md_distribution:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Distribution_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_distribution: Optional[MdDistribution] = field(
        default=None,
        metadata={
            "name": "MD_Distribution",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdServiceIdentification(MdServiceIdentificationType):
    class Meta:
        name = "MD_ServiceIdentification"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractTimeSlice(AbstractTimeSliceType):
    """To describe an event — an action that occurs at an instant or over an
    interval of time — GML provides the gml:AbtractTimeSlice element.

    A timeslice encapsulates the time-varying properties of a dynamic
    feature -- it shall be extended to represent a time stamped
    projection of a specific feature. The gml:dataSource property
    describes how the temporal data was acquired. A
    gml:AbstractTimeSlice instance is a GML object that encapsulates
    updates of the dynamic—or volatile—properties that reflect some
    change event; it thus includes only those feature properties that
    have actually changed due to some process. gml:AbstractTimeSlice
    basically provides a facility for attribute-level time stamping, in
    contrast to the object-level time stamping of dynamic feature
    instances. The time slice can thus be viewed as event or process-
    oriented, whereas a snapshot is more state or structure-oriented. A
    timeslice has richer causality, whereas a snapshot merely portrays
    the status of the whole.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Curve(CurveType):
    """A curve is a 1-dimensional primitive.

    Curves are continuous, connected, and have a measurable length in
    terms of the coordinate system. A curve is composed of one or more
    curve segments. Each curve segment within a curve may be defined
    using a different interpolation method. The curve segments are
    connected to one another, with the end point of each segment except
    the last being the start point of the next segment in the segment
    list. The orientation of the curve is positive. The element segments
    encapsulates the segments of the curve.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolygonPatchType(AbstractSurfacePatchType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exterior: Optional[Exterior] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interior: list[Interior] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interpolation: SurfaceInterpolationType = field(
        init=False,
        default=SurfaceInterpolationType.PLANAR,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class PolygonType(AbstractSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exterior: Optional[Exterior] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interior: list[Interior] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class RectangleType(AbstractSurfacePatchType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exterior: Optional[Exterior] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    interpolation: SurfaceInterpolationType = field(
        init=False,
        default=SurfaceInterpolationType.PLANAR,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimeCalendarPropertyType:
    """
    Gml:TimeCalendarPropertyType provides for associating a gml:TimeCalendar with
    an object.

    :ivar time_calendar:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_calendar: Optional[TimeCalendar] = field(
        default=None,
        metadata={
            "name": "TimeCalendar",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeOrdinalEra(TimeOrdinalEraType):
    """Its content model follows the pattern of gml:TimeEdge, inheriting standard
    properties from gml:DefinitionType, and adding gml:start, gml:end and
    gml:extent properties, a set of gml:member properties which indicate ordered
    gml:TimeOrdinalEra elements, and a gml:group property which points to the
    parent era.

    The recursive inclusion of gml:TimeOrdinalEra elements allow the
    construction of an arbitrary depth hierarchical ordinal reference
    schema, such that an ordinal era at a given level of the hierarchy
    includes a sequence of shorter, coterminous ordinal eras.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeTopologyComplexPropertyType:
    """
    Gml:TimeTopologyComplexPropertyType provides for associating a
    gml:TimeTopologyComplex with an object.

    :ivar time_topology_complex:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_topology_complex: Optional[TimeTopologyComplex] = field(
        default=None,
        metadata={
            "name": "TimeTopologyComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoCurveType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    directed_edge: list[DirectedEdge] = field(
        default_factory=list,
        metadata={
            "name": "directedEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class TriangleType(AbstractSurfacePatchType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exterior: Optional[Exterior] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    interpolation: SurfaceInterpolationType = field(
        init=False,
        default=SurfaceInterpolationType.PLANAR,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DqAbsoluteExternalPositionalAccuracy(
    DqAbsoluteExternalPositionalAccuracyType
):
    class Meta:
        name = "DQ_AbsoluteExternalPositionalAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqAccuracyOfAtimeMeasurement(DqAccuracyOfAtimeMeasurementType):
    class Meta:
        name = "DQ_AccuracyOfATimeMeasurement"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqCompletenessCommission(DqCompletenessCommissionType):
    class Meta:
        name = "DQ_CompletenessCommission"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqCompletenessOmission(DqCompletenessOmissionType):
    class Meta:
        name = "DQ_CompletenessOmission"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqConceptualConsistency(DqConceptualConsistencyType):
    class Meta:
        name = "DQ_ConceptualConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqDomainConsistency(DqDomainConsistencyType):
    class Meta:
        name = "DQ_DomainConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqFormatConsistency(DqFormatConsistencyType):
    class Meta:
        name = "DQ_FormatConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqGriddedDataPositionalAccuracy(DqGriddedDataPositionalAccuracyType):
    class Meta:
        name = "DQ_GriddedDataPositionalAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqNonQuantitativeAttributeAccuracy(
    DqNonQuantitativeAttributeAccuracyType
):
    class Meta:
        name = "DQ_NonQuantitativeAttributeAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqQuantitativeAttributeAccuracy(DqQuantitativeAttributeAccuracyType):
    class Meta:
        name = "DQ_QuantitativeAttributeAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqRelativeInternalPositionalAccuracy(
    DqRelativeInternalPositionalAccuracyType
):
    class Meta:
        name = "DQ_RelativeInternalPositionalAccuracy"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTemporalConsistency(DqTemporalConsistencyType):
    class Meta:
        name = "DQ_TemporalConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTemporalValidity(DqTemporalValidityType):
    class Meta:
        name = "DQ_TemporalValidity"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqThematicClassificationCorrectness(
    DqThematicClassificationCorrectnessType
):
    class Meta:
        name = "DQ_ThematicClassificationCorrectness"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqTopologicalConsistency(DqTopologicalConsistencyType):
    class Meta:
        name = "DQ_TopologicalConsistency"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdServiceIdentificationPropertyType:
    """
    :ivar md_service_identification:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_ServiceIdentification_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_service_identification: Optional[MdServiceIdentification] = field(
        default=None,
        metadata={
            "name": "MD_ServiceIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class CurveArrayPropertyType:
    """A container for an array of curves.

    The elements are always contained in the array property, referencing
    geometry elements or arrays of geometry elements via XLinks is not
    supported.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_curve: list[CompositeCurve] = field(
        default_factory=list,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_curve: list[OrientableCurve] = field(
        default_factory=list,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    curve: list[Curve] = field(
        default_factory=list,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    ring: list[Ring] = field(
        default_factory=list,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    linear_ring: list[LinearRing] = field(
        default_factory=list,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    line_string: list[LineString] = field(
        default_factory=list,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Polygon(PolygonType):
    """A Polygon is a special surface that is defined by a single surface patch
    (see D.3.6).

    The boundary of this patch is coplanar and the polygon uses planar
    interpolation in its interior. The elements exterior and interior
    describe the surface boundary of the polygon.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolygonPatch(PolygonPatchType):
    """A gml:PolygonPatch is a surface patch that is defined by a set of boundary
    curves and an underlying surface to which these curves adhere.

    The curves shall be coplanar and the polygon uses planar
    interpolation in its interior. interpolation is fixed to "planar",
    i.e. an interpolation shall return points on a single plane. The
    boundary of the patch shall be contained within that plane.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Rectangle(RectangleType):
    """Gml:Rectangle represents a rectangle as a surface patch with an outer
    boundary consisting of a linear ring.

    Note that this is a polygon (subtype) with no inner boundaries. The
    number of points in the linear ring shall be five. The ring (element
    exterior) shall be a gml:LinearRing and shall form a rectangle; the
    first and the last position shall be coincident. interpolation is
    fixed to "planar", i.e. an interpolation shall return points on a
    single plane. The boundary of the patch shall be contained within
    that plane.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeClockType(TimeReferenceSystemType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    reference_event: Optional[StringOrRefType] = field(
        default=None,
        metadata={
            "name": "referenceEvent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    reference_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "referenceTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    utc_reference: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "utcReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    date_basis: list[TimeCalendarPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "dateBasis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeOrdinalEraPropertyType:
    """
    Gml:TimeOrdinalEraPropertyType provides for associating a gml:TimeOrdinalEra
    with an object.

    :ivar time_ordinal_era:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_ordinal_era: Optional[TimeOrdinalEra] = field(
        default=None,
        metadata={
            "name": "TimeOrdinalEra",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TopoCurve(TopoCurveType):
    """Gml:TopoCurve represents a homogeneous topological expression, a sequence of
    directed edges, which if realised are isomorphic to a geometric curve
    primitive.

    The intended use of gml:TopoCurve is to appear within a line feature
    to express the structural and geometric relationships of this
    feature to other features via the shared edge definitions. If
    provided, the aggregationType attribute shall have the value
    "sequence".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Triangle(TriangleType):
    """Gml:Triangle represents a triangle as a surface patch with an outer boundary
    consisting of a linear ring.

    Note that this is a polygon (subtype) with no inner boundaries. The
    number of points in the linear ring shall be four. The ring (element
    exterior) shall be a gml:LinearRing and shall form a triangle, the
    first and the last position shall be coincident. interpolation is
    fixed to "planar", i.e. an interpolation shall return points on a
    single plane. The boundary of the patch shall be contained within
    that plane.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DqAbsoluteExternalPositionalAccuracyPropertyType:
    """
    :ivar dq_absolute_external_positional_accuracy:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_AbsoluteExternalPositionalAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqAccuracyOfAtimeMeasurementPropertyType:
    """
    :ivar dq_accuracy_of_atime_measurement:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_AccuracyOfATimeMeasurement_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_accuracy_of_atime_measurement: Optional[
        DqAccuracyOfAtimeMeasurement
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AccuracyOfATimeMeasurement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqCompletenessCommissionPropertyType:
    """
    :ivar dq_completeness_commission:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_CompletenessCommission_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_completeness_commission: Optional[DqCompletenessCommission] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessCommission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqCompletenessOmissionPropertyType:
    """
    :ivar dq_completeness_omission:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_CompletenessOmission_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_completeness_omission: Optional[DqCompletenessOmission] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessOmission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqCompletenessPropertyType:
    """
    :ivar dq_completeness_commission:
    :ivar dq_completeness_omission:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_Completeness_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_completeness_commission: Optional[DqCompletenessCommission] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessCommission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_completeness_omission: Optional[DqCompletenessOmission] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessOmission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqConceptualConsistencyPropertyType:
    """
    :ivar dq_conceptual_consistency:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_ConceptualConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_conceptual_consistency: Optional[DqConceptualConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_ConceptualConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqDomainConsistencyPropertyType:
    """
    :ivar dq_domain_consistency:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_DomainConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_domain_consistency: Optional[DqDomainConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_DomainConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqElementPropertyType:
    """
    :ivar dq_completeness_commission:
    :ivar dq_completeness_omission:
    :ivar dq_conceptual_consistency:
    :ivar dq_domain_consistency:
    :ivar dq_format_consistency:
    :ivar dq_topological_consistency:
    :ivar dq_absolute_external_positional_accuracy:
    :ivar dq_gridded_data_positional_accuracy:
    :ivar dq_relative_internal_positional_accuracy:
    :ivar dq_thematic_classification_correctness:
    :ivar dq_non_quantitative_attribute_accuracy:
    :ivar dq_quantitative_attribute_accuracy:
    :ivar dq_accuracy_of_atime_measurement:
    :ivar dq_temporal_consistency:
    :ivar dq_temporal_validity:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_Element_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_completeness_commission: Optional[DqCompletenessCommission] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessCommission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_completeness_omission: Optional[DqCompletenessOmission] = field(
        default=None,
        metadata={
            "name": "DQ_CompletenessOmission",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_conceptual_consistency: Optional[DqConceptualConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_ConceptualConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_domain_consistency: Optional[DqDomainConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_DomainConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_format_consistency: Optional[DqFormatConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_FormatConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_topological_consistency: Optional[DqTopologicalConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_TopologicalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_thematic_classification_correctness: Optional[
        DqThematicClassificationCorrectness
    ] = field(
        default=None,
        metadata={
            "name": "DQ_ThematicClassificationCorrectness",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_non_quantitative_attribute_accuracy: Optional[
        DqNonQuantitativeAttributeAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_NonQuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_quantitative_attribute_accuracy: Optional[
        DqQuantitativeAttributeAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_accuracy_of_atime_measurement: Optional[
        DqAccuracyOfAtimeMeasurement
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AccuracyOfATimeMeasurement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_temporal_consistency: Optional[DqTemporalConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_temporal_validity: Optional[DqTemporalValidity] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalValidity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqFormatConsistencyPropertyType:
    """
    :ivar dq_format_consistency:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_FormatConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_format_consistency: Optional[DqFormatConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_FormatConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqGriddedDataPositionalAccuracyPropertyType:
    """
    :ivar dq_gridded_data_positional_accuracy:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_GriddedDataPositionalAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqLogicalConsistencyPropertyType:
    """
    :ivar dq_conceptual_consistency:
    :ivar dq_domain_consistency:
    :ivar dq_format_consistency:
    :ivar dq_topological_consistency:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_LogicalConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_conceptual_consistency: Optional[DqConceptualConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_ConceptualConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_domain_consistency: Optional[DqDomainConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_DomainConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_format_consistency: Optional[DqFormatConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_FormatConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_topological_consistency: Optional[DqTopologicalConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_TopologicalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqNonQuantitativeAttributeAccuracyPropertyType:
    """
    :ivar dq_non_quantitative_attribute_accuracy:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_NonQuantitativeAttributeAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_non_quantitative_attribute_accuracy: Optional[
        DqNonQuantitativeAttributeAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_NonQuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqPositionalAccuracyPropertyType:
    """
    :ivar dq_absolute_external_positional_accuracy:
    :ivar dq_gridded_data_positional_accuracy:
    :ivar dq_relative_internal_positional_accuracy:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_PositionalAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqQuantitativeAttributeAccuracyPropertyType:
    """
    :ivar dq_quantitative_attribute_accuracy:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_QuantitativeAttributeAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_quantitative_attribute_accuracy: Optional[
        DqQuantitativeAttributeAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqRelativeInternalPositionalAccuracyPropertyType:
    """
    :ivar dq_relative_internal_positional_accuracy:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_RelativeInternalPositionalAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqTemporalAccuracyPropertyType:
    """
    :ivar dq_accuracy_of_atime_measurement:
    :ivar dq_temporal_consistency:
    :ivar dq_temporal_validity:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_TemporalAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_accuracy_of_atime_measurement: Optional[
        DqAccuracyOfAtimeMeasurement
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AccuracyOfATimeMeasurement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_temporal_consistency: Optional[DqTemporalConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_temporal_validity: Optional[DqTemporalValidity] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalValidity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqTemporalConsistencyPropertyType:
    """
    :ivar dq_temporal_consistency:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_TemporalConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_temporal_consistency: Optional[DqTemporalConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqTemporalValidityPropertyType:
    """
    :ivar dq_temporal_validity:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_TemporalValidity_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_temporal_validity: Optional[DqTemporalValidity] = field(
        default=None,
        metadata={
            "name": "DQ_TemporalValidity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqThematicAccuracyPropertyType:
    """
    :ivar dq_thematic_classification_correctness:
    :ivar dq_non_quantitative_attribute_accuracy:
    :ivar dq_quantitative_attribute_accuracy:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_ThematicAccuracy_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_thematic_classification_correctness: Optional[
        DqThematicClassificationCorrectness
    ] = field(
        default=None,
        metadata={
            "name": "DQ_ThematicClassificationCorrectness",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_non_quantitative_attribute_accuracy: Optional[
        DqNonQuantitativeAttributeAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_NonQuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_quantitative_attribute_accuracy: Optional[
        DqQuantitativeAttributeAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_QuantitativeAttributeAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqThematicClassificationCorrectnessPropertyType:
    """
    :ivar dq_thematic_classification_correctness:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_ThematicClassificationCorrectness_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_thematic_classification_correctness: Optional[
        DqThematicClassificationCorrectness
    ] = field(
        default=None,
        metadata={
            "name": "DQ_ThematicClassificationCorrectness",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DqTopologicalConsistencyPropertyType:
    """
    :ivar dq_topological_consistency:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_TopologicalConsistency_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_topological_consistency: Optional[DqTopologicalConsistency] = field(
        default=None,
        metadata={
            "name": "DQ_TopologicalConsistency",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class SurfacePatchArrayPropertyType:
    """
    Gml:SurfacePatchArrayPropertyType is a container for a sequence of surface
    patches.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    sphere: list[Sphere] = field(
        default_factory=list,
        metadata={
            "name": "Sphere",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    cylinder: list[Cylinder] = field(
        default_factory=list,
        metadata={
            "name": "Cylinder",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    cone: list[Cone] = field(
        default_factory=list,
        metadata={
            "name": "Cone",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    rectangle: list[Rectangle] = field(
        default_factory=list,
        metadata={
            "name": "Rectangle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    triangle: list[Triangle] = field(
        default_factory=list,
        metadata={
            "name": "Triangle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polygon_patch: list[PolygonPatch] = field(
        default_factory=list,
        metadata={
            "name": "PolygonPatch",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )


@dataclass
class TimeClock(TimeClockType):
    """A clock provides a basis for defining temporal position within a day. A
    clock shall be used with a calendar in order to provide a complete description
    of a temporal position within a specific day.

    gml:TimeClock adds the following properties to those inherited from gml:TimeReferenceSystemType:
    -       gml:referenceEvent is the name or description of an event, such as solar noon or sunrise, which fixes the position of the base scale of the clock.
    -       gml:referenceTime specifies the time of day associated with the reference event expressed as a time of day in the given clock. The reference time is usually the origin of the clock scale.
    -       gml:utcReference specifies the 24 hour local or UTC time that corresponds to the reference time.
    -       gml:dateBasis contains or references the calendars that use this clock.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TimeOrdinalReferenceSystemType(TimeReferenceSystemType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    component: list[TimeOrdinalEraPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class TopoCurvePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_curve: Optional[TopoCurve] = field(
        default=None,
        metadata={
            "name": "TopoCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CoordinateOperationAccuracy:
    """Gml:coordinateOperationAccuracy is an association role to a
    DQ_PositionalAccuracy object as encoded in ISO/TS 19139, either referencing or
    containing the definition of that positional accuracy.

    That object contains an estimate of the impact of this coordinate
    operation on point accuracy. That is, it gives position error
    estimates for the target coordinates of this coordinate operation,
    assuming no errors in the source coordinates.

    :ivar dq_absolute_external_positional_accuracy:
    :ivar dq_gridded_data_positional_accuracy:
    :ivar dq_relative_internal_positional_accuracy:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "coordinateOperationAccuracy"
        namespace = "http://www.opengis.net/gml/3.2"

    dq_absolute_external_positional_accuracy: Optional[
        DqAbsoluteExternalPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_AbsoluteExternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_gridded_data_positional_accuracy: Optional[
        DqGriddedDataPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_GriddedDataPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    dq_relative_internal_positional_accuracy: Optional[
        DqRelativeInternalPositionalAccuracy
    ] = field(
        default=None,
        metadata={
            "name": "DQ_RelativeInternalPositionalAccuracy",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CurveArrayProperty(CurveArrayPropertyType):
    class Meta:
        name = "curveArrayProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CurveMembers(CurveArrayPropertyType):
    """This property element contains a list of curves.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "curveMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCurveType(AbstractGeometricAggregateType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    curve_member: list[CurveMember] = field(
        default_factory=list,
        metadata={
            "name": "curveMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve_members: Optional[CurveMembers] = field(
        default=None,
        metadata={
            "name": "curveMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeClockPropertyType:
    """
    Gml:TimeClockPropertyType provides for associating a gml:TimeClock with an
    object.

    :ivar time_clock:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    time_clock: Optional[TimeClock] = field(
        default=None,
        metadata={
            "name": "TimeClock",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TimeOrdinalReferenceSystem(TimeOrdinalReferenceSystemType):
    """In some applications of geographic information — such as geology and
    archaeology — relative position in time is known more precisely than absolute
    time or duration.

    The order of events in time can be well established, but the
    magnitude of the intervals between them cannot be accurately
    determined; in such cases, the use of an ordinal temporal reference
    system is appropriate. An ordinal temporal reference system is
    composed of a sequence of named coterminous eras, which may in turn
    be composed of sequences of member eras at a finer scale, giving the
    whole a hierarchical structure of eras of verying resolution. An
    ordinal temporal reference system whose component eras are not
    further subdivided is effectively a temporal topological complex
    constrained to be a linear graph. An ordinal temporal reference
    system some or all of whose component eras are subdivided is
    effectively a temporal topological complex with the constraint that
    parallel branches may only be constructed in pairs where one is a
    single temporal ordinal era and the other is a sequence of temporal
    ordinal eras that are called "members" of the "group". This
    constraint means that within a single temporal ordinal reference
    system, the relative position of all temporal ordinal eras is
    unambiguous. The positions of the beginning and end of a given era
    may calibrate the relative time scale.
    gml:TimeOrdinalReferenceSystem adds one or more gml:component
    properties to the generic temporal reference system model.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Patches(SurfacePatchArrayPropertyType):
    """The patches property element contains the sequence of surface patches.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "patches"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PolygonPatches(SurfacePatchArrayPropertyType):
    class Meta:
        name = "polygonPatches"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoCurveProperty(TopoCurvePropertyType):
    """
    The gml:topoCurveProperty property element may be used in features to express
    their relationship to the referenced topology edges.
    """

    class Meta:
        name = "topoCurveProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TrianglePatches(SurfacePatchArrayPropertyType):
    class Meta:
        name = "trianglePatches"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCurve(MultiCurveType):
    """A gml:MultiCurve is defined by one or more gml:AbstractCurves.

    The members of the geometric aggregate may be specified either using
    the "standard" property (gml:curveMember) or the array property
    (gml:curveMembers). It is also valid to use both the "standard" and
    the array properties in the same collection.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SurfaceType(AbstractSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    triangle_patches: Optional[TrianglePatches] = field(
        default=None,
        metadata={
            "name": "trianglePatches",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon_patches: Optional[PolygonPatches] = field(
        default=None,
        metadata={
            "name": "polygonPatches",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    patches: Optional[Patches] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MultiCurvePropertyType:
    """A property that has a collection of curves as its value domain may either be
    an appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.

    :ivar multi_curve:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class PolyhedralSurface(SurfaceType):
    """A polyhedral surface is a surface composed of polygon patches connected
    along their common boundary curves.

    This differs from the surface type only in the restriction on the
    types of surface patches acceptable. polygonPatches encapsulates the
    polygon patches of the polyhedral surface.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Surface(SurfaceType):
    """A Surface is a 2-dimensional primitive and is composed of one or more
    surface patches as specified in ISO 19107:2003, 6.3.17.1.

    The surface patches are connected to one another. patches
    encapsulates the patches of the surface.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TinType(SurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    stop_lines: list[LineStringSegmentArrayPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "stopLines",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    break_lines: list[LineStringSegmentArrayPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "breakLines",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    max_length: Optional[LengthType] = field(
        default=None,
        metadata={
            "name": "maxLength",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    control_point: Optional["TinType.ControlPoint"] = field(
        default=None,
        metadata={
            "name": "controlPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )

    @dataclass
    class ControlPoint:
        pos_list: Optional[PosList] = field(
            default=None,
            metadata={
                "name": "posList",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
        pos: list[Pos] = field(
            default_factory=list,
            metadata={
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
        point_property: list[PointProperty] = field(
            default_factory=list,
            metadata={
                "name": "pointProperty",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class TriangulatedSurface(SurfaceType):
    """A triangulated surface is a polyhedral surface that is composed only of
    triangles.

    There is no restriction on how the triangulation is derived.
    trianglePatches encapsulates the triangles of the triangulated
    surface.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Tin(TinType):
    """A tin is a triangulated surface that uses the Delauny algorithm or a similar
    algorithm complemented with consideration of stoplines (stopLines), breaklines
    (breakLines), and maximum length of triangle sides (maxLength).

    controlPoint shall contain a set of the positions (three or more)
    used as posts for this TIN (corners of the triangles in the TIN).
    See ISO 19107:2003, 6.4.39 for details.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCenterLineOf(MultiCurvePropertyType):
    class Meta:
        name = "multiCenterLineOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCurveProperty(MultiCurvePropertyType):
    class Meta:
        name = "multiCurveProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiEdgeOf(MultiCurvePropertyType):
    class Meta:
        name = "multiEdgeOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SurfacePropertyType:
    """A property that has a surface as its value domain may either be an
    appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.

    :ivar composite_surface:
    :ivar shell:
    :ivar orientable_surface:
    :ivar tin:
    :ivar triangulated_surface:
    :ivar polyhedral_surface:
    :ivar surface:
    :ivar polygon:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_surface: Optional["CompositeSurface"] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional["Shell"] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional["OrientableSurface"] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BaseSurface(SurfacePropertyType):
    """The property baseSurface references or contains the base surface.

    The property baseSurface either references the base surface via the
    XLink-attributes or contains the surface element. A surface element
    is any element which is substitutable for gml:AbstractSurface. The
    base surface has positive orientation.
    """

    class Meta:
        name = "baseSurface"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExtentOf(SurfacePropertyType):
    class Meta:
        name = "extentOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SurfaceMember(SurfacePropertyType):
    """This property element either references a surface via the XLink-attributes
    or contains the surface element.

    A surface element is any element, which is substitutable for
    gml:AbstractSurface.
    """

    class Meta:
        name = "surfaceMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SurfaceProperty(SurfacePropertyType):
    """This property element either references a surface via the XLink-attributes
    or contains the surface element.

    surfaceProperty is the predefined property which may be used by GML
    Application Schemas whenever a GML feature has a property with a
    value that is substitutable for AbstractSurface.
    """

    class Meta:
        name = "surfaceProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CompositeSurfaceType(AbstractSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    surface_member: list[SurfaceMember] = field(
        default_factory=list,
        metadata={
            "name": "surfaceMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class FaceType(AbstractTopoPrimitiveType):
    """
    :ivar isolated:
    :ivar directed_edge:
    :ivar directed_topo_solid:
    :ivar surface_property:
    :ivar aggregation_type:
    :ivar universal: If the topological representation exists an
        unbounded manifold (e.g. Euclidean plane), a gml:Face must
        indicate whether it is a universal face or not, to ensure a
        lossless topology representation as defined by Kuijpers, et. al.
        (see OGC 05-102 Topology IPR). The optional universal attribute
        of type boolean is used to indicate this. NOTE The universal
        face is normally not part of any feature, and is used to
        represent the unbounded portion of the data set. Its interior
        boundary (it has no exterior boundary) would normally be
        considered the exterior boundary of the map represented by the
        data set.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    isolated: list[NodePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_edge: list[DirectedEdge] = field(
        default_factory=list,
        metadata={
            "name": "directedEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    directed_topo_solid: list["DirectedTopoSolid"] = field(
        default_factory=list,
        metadata={
            "name": "directedTopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "max_occurs": 2,
        },
    )
    surface_property: Optional[SurfaceProperty] = field(
        default=None,
        metadata={
            "name": "surfaceProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )
    universal: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class OrientableSurfaceType(AbstractSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    base_surface: Optional[BaseSurface] = field(
        default=None,
        metadata={
            "name": "baseSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    orientation: SignType = field(
        default=SignType.PLUS_SIGN,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ShellType(AbstractSurfaceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    surface_member: list[SurfaceMember] = field(
        default_factory=list,
        metadata={
            "name": "surfaceMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class CompositeSurface(CompositeSurfaceType):
    """A gml:CompositeSurface is represented by a set of orientable surfaces.

    It is geometry type with all the geometric properties of a
    (primitive) surface. Essentially, a composite surface is a
    collection of surfaces that join in pairs on common boundary curves
    and which, when considered as a whole, form a single surface.
    surfaceMember references or contains inline one surface in the
    composite surface. The surfaces are contiguous.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Face(FaceType):
    """Gml:Face represents the 2-dimensional topology primitive.

    The topological boundary of a face (gml:directedEdge) consists of a
    sequence of directed edges. If provided, the aggregationType
    attribute shall have the value "sequence". The optional coboundary
    of a face (gml:directedTopoSolid) is a pair of directed solids which
    are bounded by this face. A positively directed solid corresponds to
    a solid which lies in the direction of the negatively directed
    normal to the face in any geometric realisation. A face may
    optionally be realised by a 2-dimensional geometric primitive
    (gml:surfaceProperty).
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OrientableSurface(OrientableSurfaceType):
    """OrientableSurface consists of a surface and an orientation.

    If the orientation is "+", then the OrientableSurface is identical
    to the baseSurface. If the orientation is "-", then the
    OrientableSurface is a reference to a gml:AbstractSurface with an
    up-normal that reverses the direction for this OrientableSurface,
    the sense of "the top of the surface".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Shell(ShellType):
    """A shell is used to represent a single connected component of a solid
    boundary as specified in ISO 19107:2003, 6.3.8.

    Every gml:surfaceMember references or contains one surface, i.e. any
    element which is substitutable for gml:AbstractSurface. In the
    context of a shell, the surfaces describe the boundary of the solid.
    If provided, the aggregationType attribute shall have the value
    "set".
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectedFacePropertyType:
    """
    :ivar face:
    :ivar orientation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    face: Optional[Face] = field(
        default=None,
        metadata={
            "name": "Face",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientation: SignType = field(
        default=SignType.PLUS_SIGN,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ShellPropertyType:
    """
    A property with the content model of gml:ShellPropertyType encapsulates a shell
    to represent a component of a solid boundary.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class SurfaceArrayPropertyType:
    """Gml:SurfaceArrayPropertyType is a container for an array of surfaces.

    The elements are always contained in the array property, referencing
    geometry elements or arrays of geometry elements via XLinks is not
    supported.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_surface: list[CompositeSurface] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    shell: list[Shell] = field(
        default_factory=list,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_surface: list[OrientableSurface] = field(
        default_factory=list,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    tin: list[Tin] = field(
        default_factory=list,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    triangulated_surface: list[TriangulatedSurface] = field(
        default_factory=list,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polyhedral_surface: list[PolyhedralSurface] = field(
        default_factory=list,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    surface: list[Surface] = field(
        default_factory=list,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polygon: list[Polygon] = field(
        default_factory=list,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class SolidType(AbstractSolidType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    exterior: Optional[ShellPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    interior: list[ShellPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DirectedFace(DirectedFacePropertyType):
    """The gml:directedFace property element describes the boundary of topology
    solids, in the coBoundary of topology edges and is used in the support of
    surface features via the gml:TopoSurface expression, see below.

    The orientation attribute of type gml:SignType expresses the sense
    in which the included face is used i.e. inward or outward with
    respect to the surface normal in any geometric realisation.
    """

    class Meta:
        name = "directedFace"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SurfaceArrayProperty(SurfaceArrayPropertyType):
    class Meta:
        name = "surfaceArrayProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SurfaceMembers(SurfaceArrayPropertyType):
    """This property element contains a list of surfaces.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "surfaceMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSurfaceType(AbstractGeometricAggregateType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    surface_member: list[SurfaceMember] = field(
        default_factory=list,
        metadata={
            "name": "surfaceMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface_members: Optional[SurfaceMembers] = field(
        default=None,
        metadata={
            "name": "surfaceMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Solid(SolidType):
    """A solid is the basis for 3-dimensional geometry.

    The extent of a solid is defined by the boundary surfaces as
    specified in ISO 19107:2003, 6.3.18. exterior specifies the outer
    boundary, interior the inner boundary of the solid.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoSurfaceType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    directed_face: list[DirectedFace] = field(
        default_factory=list,
        metadata={
            "name": "directedFace",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class MultiSurface(MultiSurfaceType):
    """A gml:MultiSurface is defined by one or more gml:AbstractSurfaces.

    The members of the geometric aggregate may be specified either using
    the "standard" property (gml:surfaceMember) or the array property
    (gml:surfaceMembers). It is also valid to use both the "standard"
    and the array properties in the same collection.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SolidPropertyType:
    """A property that has a solid as its value domain may either be an appropriate
    geometry element encapsulated in an element of this type or an XLink reference
    to a remote geometry element (where remote includes geometry elements located
    elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.

    :ivar composite_solid:
    :ivar solid:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_solid: Optional["CompositeSolid"] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoSurface(TopoSurfaceType):
    """Gml:TopoSurface represents a homogeneous topological expression, a set of
    directed faces, which if realised are isomorphic to a geometric surface
    primitive.

    The intended use of gml:TopoSurface is to appear within a surface
    feature to express the structural and possibly geometric
    relationships of this surface feature to other features via the
    shared face definitions.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSurfacePropertyType:
    """A property that has a collection of surfaces as its value domain may either
    be an appropriate geometry element encapsulated in an element of this type or
    an XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.

    :ivar multi_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoSurfacePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_surface: Optional[TopoSurface] = field(
        default=None,
        metadata={
            "name": "TopoSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class SolidMember(SolidPropertyType):
    """This property element either references a solid via the XLink-attributes or
    contains the solid element.

    A solid element is any element, which is substitutable for
    gml:AbstractSolid.
    """

    class Meta:
        name = "solidMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SolidProperty(SolidPropertyType):
    """This property element either references a solid via the XLink-attributes or
    contains the solid element.

    solidProperty is the predefined property which may be used by GML
    Application Schemas whenever a GML feature has a property with a
    value that is substitutable for AbstractSolid.
    """

    class Meta:
        name = "solidProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CompositeSolidType(AbstractSolidType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    solid_member: list[SolidMember] = field(
        default_factory=list,
        metadata={
            "name": "solidMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class TopoSolidType(AbstractTopoPrimitiveType):
    """
    :ivar isolated:
    :ivar directed_face:
    :ivar solid_property:
    :ivar aggregation_type:
    :ivar universal: A gml:TopoSolid must indicate whether it is a
        universal topo-solid or not, to ensure a lossless topology
        representation as defined by Kuijpers, et. al. (see OGC 05-102
        Topology IPR). The optional universal attribute of type boolean
        is used to indicate this and the default is fault. NOTE The
        universal topo-solid is normally not part of any feature, and is
        used to represent the unbounded portion of the data set. Its
        interior boundary (it has no exterior boundary) would normally
        be considered the exterior boundary of the data set.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    isolated: list[NodeOrEdgePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_face: list[DirectedFace] = field(
        default_factory=list,
        metadata={
            "name": "directedFace",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    solid_property: Optional[SolidProperty] = field(
        default=None,
        metadata={
            "name": "solidProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )
    universal: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MultiCoverage(MultiSurfacePropertyType):
    class Meta:
        name = "multiCoverage"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiExtentOf(MultiSurfacePropertyType):
    class Meta:
        name = "multiExtentOf"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSurfaceProperty(MultiSurfacePropertyType):
    class Meta:
        name = "multiSurfaceProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoSurfaceProperty(TopoSurfacePropertyType):
    """
    The gml:topoSurfaceProperty property element may be used in features to express
    their relationship to the referenced topology faces.
    """

    class Meta:
        name = "topoSurfaceProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CompositeSolid(CompositeSolidType):
    """Gml:CompositeSolid implements ISO 19107 GM_CompositeSolid (see ISO
    19107:2003, 6.6.7) as specified in D.2.3.6.

    A gml:CompositeSolid is represented by a set of orientable surfaces.
    It is a geometry type with all the geometric properties of a
    (primitive) solid. Essentially, a composite solid is a collection of
    solids that join in pairs on common boundary surfaces and which,
    when considered as a whole, form a single solid. solidMember
    references or contains one solid in the composite solid. The solids
    are contiguous.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoSolid(TopoSolidType):
    """Gml:TopoSolid represents the 3-dimensional topology primitive.

    The topological boundary of a solid (gml:directedFace) consists of a
    set of directed faces. A solid may optionally be realised by a
    3-dimensional geometric primitive (gml:solidProperty).
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectedTopoSolidPropertyType:
    """
    :ivar topo_solid:
    :ivar orientation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_solid: Optional[TopoSolid] = field(
        default=None,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientation: SignType = field(
        default=SignType.PLUS_SIGN,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GeometricPrimitivePropertyType:
    """A property that has a geometric primitive as its value domain may either be
    an appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.

    :ivar composite_solid:
    :ivar solid:
    :ivar composite_surface:
    :ivar shell:
    :ivar orientable_surface:
    :ivar tin:
    :ivar triangulated_surface:
    :ivar polyhedral_surface:
    :ivar surface:
    :ivar polygon:
    :ivar composite_curve:
    :ivar orientable_curve:
    :ivar curve:
    :ivar ring:
    :ivar linear_ring:
    :ivar line_string:
    :ivar point:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class SolidArrayPropertyType:
    """Gml:SolidArrayPropertyType is a container for an array of solids.

    The elements are always contained in the array property, referencing
    geometry elements or arrays of geometry elements is not supported.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_solid: list[CompositeSolid] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    solid: list[Solid] = field(
        default_factory=list,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoPrimitiveArrayAssociationType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_solid: list[TopoSolid] = field(
        default_factory=list,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    face: list[Face] = field(
        default_factory=list,
        metadata={
            "name": "Face",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    edge: list[Edge] = field(
        default_factory=list,
        metadata={
            "name": "Edge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    node: list[Node] = field(
        default_factory=list,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoPrimitiveMemberType:
    """
    :ivar topo_solid:
    :ivar face:
    :ivar edge:
    :ivar node:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_solid: Optional[TopoSolid] = field(
        default=None,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    face: Optional[Face] = field(
        default=None,
        metadata={
            "name": "Face",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    edge: Optional[Edge] = field(
        default=None,
        metadata={
            "name": "Edge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    node: Optional[Node] = field(
        default=None,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GeometricComplexType(AbstractGeometryType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    element: list[GeometricPrimitivePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class DirectedTopoSolid(DirectedTopoSolidPropertyType):
    """The gml:directedSolid property element describes the coBoundary of topology
    faces and is used in the support of volume features via the gml:TopoVolume
    expression, see below.

    The orientation attribute of type gml:SignType expresses the sense
    in which the included solid appears in the face coboundary. In the
    context of a gml:TopoVolume the orientation attribute has no
    meaning.
    """

    class Meta:
        name = "directedTopoSolid"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SolidArrayProperty(SolidArrayPropertyType):
    class Meta:
        name = "solidArrayProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SolidMembers(SolidArrayPropertyType):
    """This property element contains a list of solids.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "solidMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoPrimitiveMember(TopoPrimitiveMemberType):
    """
    The gml:topoPrimitiveMember property element encodes for the relationship
    between a topology complex and a single topology primitive.
    """

    class Meta:
        name = "topoPrimitiveMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoPrimitiveMembers(TopoPrimitiveArrayAssociationType):
    """
    The gml:topoPrimitiveMembers property element encodes the relationship between
    a topology complex and an arbitrary number of topology primitives.
    """

    class Meta:
        name = "topoPrimitiveMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeometricComplex(GeometricComplexType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSolidType(AbstractGeometricAggregateType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    solid_member: list[SolidMember] = field(
        default_factory=list,
        metadata={
            "name": "solidMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid_members: Optional[SolidMembers] = field(
        default=None,
        metadata={
            "name": "solidMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TopoComplexType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    maximal_complex: Optional["MaximalComplex"] = field(
        default=None,
        metadata={
            "name": "maximalComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    super_complex: list["SuperComplex"] = field(
        default_factory=list,
        metadata={
            "name": "superComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    sub_complex: list["SubComplex"] = field(
        default_factory=list,
        metadata={
            "name": "subComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    topo_primitive_member: list[TopoPrimitiveMember] = field(
        default_factory=list,
        metadata={
            "name": "topoPrimitiveMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    topo_primitive_members: Optional[TopoPrimitiveMembers] = field(
        default=None,
        metadata={
            "name": "topoPrimitiveMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    is_maximal: bool = field(
        default=False,
        metadata={
            "name": "isMaximal",
            "type": "Attribute",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class TopoVolumeType(AbstractTopologyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    directed_topo_solid: list[DirectedTopoSolid] = field(
        default_factory=list,
        metadata={
            "name": "directedTopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class GeometricComplexPropertyType:
    """A property that has a geometric complex as its value domain may either be an
    appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.

    :ivar geometric_complex:
    :ivar composite_curve:
    :ivar composite_surface:
    :ivar composite_solid:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MultiSolid(MultiSolidType):
    """A gml:MultiSolid is defined by one or more gml:AbstractSolids.

    The members of the geometric aggregate may be specified either using
    the "standard" property (gml:solidMember) or the array property
    (gml:solidMembers). It is also valid to use both the "standard" and
    the array properties in the same collection.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoComplex(TopoComplexType):
    """Gml:TopoComplex is a collection of topological primitives.

    Each complex holds a reference to its maximal complex
    (gml:maximalComplex) and optionally to sub- or super-complexes
    (gml:subComplex, gml:superComplex). A topology complex contains its
    primitive and sub-complex members.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoVolume(TopoVolumeType):
    """Gml:TopoVolume represents a homogeneous topological expression, a set of
    directed topologic solids, which if realised are isomorphic to a geometric
    solid primitive.

    The intended use of gml:TopoVolume is to appear within a solid
    feature to express the structural and geometric relationships of
    this solid feature to other features via the shared solid
    definitions.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeometryArrayPropertyType:
    """If a feature has a property which takes an array of geometry elements as its
    value, this is called a geometry array property.

    A generic type for such a geometry property is
    GeometryArrayPropertyType. The elements are always contained inline
    in the array property, referencing geometry elements or arrays of
    geometry elements via XLinks is not supported.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rectified_grid: list[RectifiedGrid] = field(
        default_factory=list,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    grid: list[Grid] = field(
        default_factory=list,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    geometric_complex: list[GeometricComplex] = field(
        default_factory=list,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_solid: list[MultiSolid] = field(
        default_factory=list,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_surface: list[MultiSurface] = field(
        default_factory=list,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_curve: list[MultiCurve] = field(
        default_factory=list,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_point: list[MultiPoint] = field(
        default_factory=list,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_geometry: list["MultiGeometry"] = field(
        default_factory=list,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_solid: list[CompositeSolid] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    solid: list[Solid] = field(
        default_factory=list,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_surface: list[CompositeSurface] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    shell: list[Shell] = field(
        default_factory=list,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_surface: list[OrientableSurface] = field(
        default_factory=list,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    tin: list[Tin] = field(
        default_factory=list,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    triangulated_surface: list[TriangulatedSurface] = field(
        default_factory=list,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polyhedral_surface: list[PolyhedralSurface] = field(
        default_factory=list,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    surface: list[Surface] = field(
        default_factory=list,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polygon: list[Polygon] = field(
        default_factory=list,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_curve: list[CompositeCurve] = field(
        default_factory=list,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_curve: list[OrientableCurve] = field(
        default_factory=list,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    curve: list[Curve] = field(
        default_factory=list,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    ring: list[Ring] = field(
        default_factory=list,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    linear_ring: list[LinearRing] = field(
        default_factory=list,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    line_string: list[LineString] = field(
        default_factory=list,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    point: list[Point] = field(
        default_factory=list,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GeometryPropertyType:
    """A geometric property may either be any geometry element encapsulated in an
    element of this type or an XLink reference to a remote geometry element (where
    remote includes geometry elements located elsewhere in the same or another
    document).

    Note that either the reference or the contained element shall be
    given, but not both or none. If a feature has a property that takes
    a geometry element as its value, this is called a geometry property.
    A generic type for such a geometry property is GeometryPropertyType.

    :ivar rectified_grid:
    :ivar grid:
    :ivar geometric_complex:
    :ivar multi_solid:
    :ivar multi_surface:
    :ivar multi_curve:
    :ivar multi_point:
    :ivar multi_geometry:
    :ivar composite_solid:
    :ivar solid:
    :ivar composite_surface:
    :ivar shell:
    :ivar orientable_surface:
    :ivar tin:
    :ivar triangulated_surface:
    :ivar polyhedral_surface:
    :ivar surface:
    :ivar polygon:
    :ivar composite_curve:
    :ivar orientable_curve:
    :ivar curve:
    :ivar ring:
    :ivar linear_ring:
    :ivar line_string:
    :ivar point:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional["MultiGeometry"] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MultiSolidPropertyType:
    """A property that has a collection of solids as its value domain may either be
    an appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.

    :ivar multi_solid:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TopoComplexPropertyType:
    """
    :ivar topo_complex:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_complex: Optional[TopoComplex] = field(
        default=None,
        metadata={
            "name": "TopoComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TopoVolumePropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    topo_volume: Optional[TopoVolume] = field(
        default=None,
        metadata={
            "name": "TopoVolume",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GeometryMember(GeometryPropertyType):
    """
    This property element either references a geometry element via the XLink-
    attributes or contains the geometry element.
    """

    class Meta:
        name = "geometryMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeometryMembers(GeometryArrayPropertyType):
    """This property element contains a list of geometry elements.

    The order of the elements is significant and shall be preserved when
    processing the array.
    """

    class Meta:
        name = "geometryMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MaximalComplex(TopoComplexPropertyType):
    """
    The property elements gml:subComplex, gml:superComplex and gml:maximalComplex
    provide an encoding for relationships between topology complexes as described
    for gml:TopoComplex above.
    """

    class Meta:
        name = "maximalComplex"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSolidProperty(MultiSolidPropertyType):
    class Meta:
        name = "multiSolidProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SubComplex(TopoComplexPropertyType):
    """
    The property elements gml:subComplex, gml:superComplex and gml:maximalComplex
    provide an encoding for relationships between topology complexes as described
    for gml:TopoComplex above.
    """

    class Meta:
        name = "subComplex"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SuperComplex(TopoComplexPropertyType):
    """
    The property elements gml:subComplex, gml:superComplex and gml:maximalComplex
    provide an encoding for relationships between topology complexes as described
    for gml:TopoComplex above.
    """

    class Meta:
        name = "superComplex"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoComplexProperty(TopoComplexPropertyType):
    class Meta:
        name = "topoComplexProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TopoVolumeProperty(TopoVolumePropertyType):
    """
    The gml:topoVolumeProperty element may be used in features to express their
    relationship to the referenced topology volume.
    """

    class Meta:
        name = "topoVolumeProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiGeometryType(AbstractGeometricAggregateType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    geometry_member: list[GeometryMember] = field(
        default_factory=list,
        metadata={
            "name": "geometryMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometry_members: Optional[GeometryMembers] = field(
        default=None,
        metadata={
            "name": "geometryMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MultiGeometry(MultiGeometryType):
    """Gml:MultiGeometry is a collection of one or more GML geometry objects of
    arbitrary type.

    The members of the geometric aggregate may be specified either using
    the "standard" property (gml:geometryMember) or the array property
    (gml:geometryMembers). It is also valid to use both the "standard"
    and the array properties in the same collection.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GmObjectPropertyType:
    """
    :ivar rectified_grid:
    :ivar grid:
    :ivar geometric_complex:
    :ivar multi_solid:
    :ivar multi_surface:
    :ivar multi_curve:
    :ivar multi_point:
    :ivar multi_geometry:
    :ivar composite_solid:
    :ivar solid:
    :ivar composite_surface:
    :ivar shell:
    :ivar orientable_surface:
    :ivar tin:
    :ivar triangulated_surface:
    :ivar polyhedral_surface:
    :ivar surface:
    :ivar polygon:
    :ivar composite_curve:
    :ivar orientable_curve:
    :ivar curve:
    :ivar ring:
    :ivar linear_ring:
    :ivar line_string:
    :ivar point:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "GM_Object_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gss"

    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DomainSetType:
    """
    :ivar rectified_grid:
    :ivar grid:
    :ivar geometric_complex:
    :ivar multi_solid:
    :ivar multi_surface:
    :ivar multi_curve:
    :ivar multi_point:
    :ivar multi_geometry:
    :ivar composite_solid:
    :ivar solid:
    :ivar composite_surface:
    :ivar shell:
    :ivar orientable_surface:
    :ivar tin:
    :ivar triangulated_surface:
    :ivar polyhedral_surface:
    :ivar surface:
    :ivar polygon:
    :ivar composite_curve:
    :ivar orientable_curve:
    :ivar curve:
    :ivar ring:
    :ivar linear_ring:
    :ivar line_string:
    :ivar point:
    :ivar time_topology_complex:
    :ivar time_edge:
    :ivar time_node:
    :ivar time_period:
    :ivar time_instant:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_topology_complex: Optional[TimeTopologyComplex] = field(
        default=None,
        metadata={
            "name": "TimeTopologyComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_edge: Optional[TimeEdge] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_period: Optional[TimePeriod] = field(
        default=None,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_instant: Optional[TimeInstant] = field(
        default=None,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LocationPropertyType:
    """
    :ivar rectified_grid:
    :ivar grid:
    :ivar geometric_complex:
    :ivar multi_solid:
    :ivar multi_surface:
    :ivar multi_curve:
    :ivar multi_point:
    :ivar multi_geometry:
    :ivar composite_solid:
    :ivar solid:
    :ivar composite_surface:
    :ivar shell:
    :ivar orientable_surface:
    :ivar tin:
    :ivar triangulated_surface:
    :ivar polyhedral_surface:
    :ivar surface:
    :ivar polygon:
    :ivar composite_curve:
    :ivar orientable_curve:
    :ivar curve:
    :ivar ring:
    :ivar linear_ring:
    :ivar line_string:
    :ivar point:
    :ivar location_key_word:
    :ivar location_string:
    :ivar null:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location_key_word: Optional[LocationKeyWord] = field(
        default=None,
        metadata={
            "name": "LocationKeyWord",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location_string: Optional[LocationString] = field(
        default=None,
        metadata={
            "name": "LocationString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    null: Optional[Null] = field(
        default=None,
        metadata={
            "name": "Null",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MultiGeometryPropertyType:
    """A property that has a geometric aggregate as its value domain may either be
    an appropriate geometry element encapsulated in an element of this type or an
    XLink reference to a remote geometry element (where remote includes geometry
    elements located elsewhere in the same document).

    Either the reference or the contained element shall be given, but
    neither both nor none.

    :ivar multi_solid:
    :ivar multi_surface:
    :ivar multi_curve:
    :ivar multi_point:
    :ivar multi_geometry:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ValueArrayPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    quantity_extent: list[QuantityExtent] = field(
        default_factory=list,
        metadata={
            "name": "QuantityExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    count_extent: list[CountExtent] = field(
        default_factory=list,
        metadata={
            "name": "CountExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    category_extent: list[CategoryExtent] = field(
        default_factory=list,
        metadata={
            "name": "CategoryExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    value_array: list["ValueArray"] = field(
        default_factory=list,
        metadata={
            "name": "ValueArray",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_value: list["CompositeValue"] = field(
        default_factory=list,
        metadata={
            "name": "CompositeValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    quantity_list: list[QuantityList] = field(
        default_factory=list,
        metadata={
            "name": "QuantityList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    count_list: list[CountList] = field(
        default_factory=list,
        metadata={
            "name": "CountList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    category_list: list[CategoryList] = field(
        default_factory=list,
        metadata={
            "name": "CategoryList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    boolean_list: list[BooleanList] = field(
        default_factory=list,
        metadata={
            "name": "BooleanList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    quantity: list[Quantity] = field(
        default_factory=list,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
            "sequence": 1,
        },
    )
    count: list[Count] = field(
        default_factory=list,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
            "sequence": 1,
        },
    )
    category: list[Category] = field(
        default_factory=list,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
            "sequence": 1,
        },
    )
    boolean: list[Boolean1] = field(
        default_factory=list,
        metadata={
            "name": "Boolean",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
            "sequence": 1,
        },
    )
    rectified_grid: list[RectifiedGrid] = field(
        default_factory=list,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    grid: list[Grid] = field(
        default_factory=list,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    geometric_complex: list[GeometricComplex] = field(
        default_factory=list,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_solid: list[MultiSolid] = field(
        default_factory=list,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_surface: list[MultiSurface] = field(
        default_factory=list,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_curve: list[MultiCurve] = field(
        default_factory=list,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_point: list[MultiPoint] = field(
        default_factory=list,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_geometry: list[MultiGeometry] = field(
        default_factory=list,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_solid: list[CompositeSolid] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    solid: list[Solid] = field(
        default_factory=list,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_surface: list[CompositeSurface] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    shell: list[Shell] = field(
        default_factory=list,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_surface: list[OrientableSurface] = field(
        default_factory=list,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    tin: list[Tin] = field(
        default_factory=list,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    triangulated_surface: list[TriangulatedSurface] = field(
        default_factory=list,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polyhedral_surface: list[PolyhedralSurface] = field(
        default_factory=list,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    surface: list[Surface] = field(
        default_factory=list,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    polygon: list[Polygon] = field(
        default_factory=list,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    composite_curve: list[CompositeCurve] = field(
        default_factory=list,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    orientable_curve: list[OrientableCurve] = field(
        default_factory=list,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    curve: list[Curve] = field(
        default_factory=list,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    ring: list[Ring] = field(
        default_factory=list,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    linear_ring: list[LinearRing] = field(
        default_factory=list,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    line_string: list[LineString] = field(
        default_factory=list,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    point: list[Point] = field(
        default_factory=list,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    time_topology_complex: list[TimeTopologyComplex] = field(
        default_factory=list,
        metadata={
            "name": "TimeTopologyComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    time_edge: list[TimeEdge] = field(
        default_factory=list,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    time_node: list[TimeNode] = field(
        default_factory=list,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    time_period: list[TimePeriod] = field(
        default_factory=list,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    time_instant: list[TimeInstant] = field(
        default_factory=list,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    null: list[Null] = field(
        default_factory=list,
        metadata={
            "name": "Null",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ValuePropertyType:
    """
    :ivar quantity_extent:
    :ivar count_extent:
    :ivar category_extent:
    :ivar value_array:
    :ivar composite_value:
    :ivar quantity_list:
    :ivar count_list:
    :ivar category_list:
    :ivar boolean_list:
    :ivar quantity:
    :ivar count:
    :ivar category:
    :ivar boolean:
    :ivar rectified_grid:
    :ivar grid:
    :ivar geometric_complex:
    :ivar multi_solid:
    :ivar multi_surface:
    :ivar multi_curve:
    :ivar multi_point:
    :ivar multi_geometry:
    :ivar composite_solid:
    :ivar solid:
    :ivar composite_surface:
    :ivar shell:
    :ivar orientable_surface:
    :ivar tin:
    :ivar triangulated_surface:
    :ivar polyhedral_surface:
    :ivar surface:
    :ivar polygon:
    :ivar composite_curve:
    :ivar orientable_curve:
    :ivar curve:
    :ivar ring:
    :ivar linear_ring:
    :ivar line_string:
    :ivar point:
    :ivar time_topology_complex:
    :ivar time_edge:
    :ivar time_node:
    :ivar time_period:
    :ivar time_instant:
    :ivar null:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    quantity_extent: Optional[QuantityExtent] = field(
        default=None,
        metadata={
            "name": "QuantityExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    count_extent: Optional[CountExtent] = field(
        default=None,
        metadata={
            "name": "CountExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    category_extent: Optional[CategoryExtent] = field(
        default=None,
        metadata={
            "name": "CategoryExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_array: Optional["ValueArray"] = field(
        default=None,
        metadata={
            "name": "ValueArray",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_value: Optional["CompositeValue"] = field(
        default=None,
        metadata={
            "name": "CompositeValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity_list: Optional[QuantityList] = field(
        default=None,
        metadata={
            "name": "QuantityList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    count_list: Optional[CountList] = field(
        default=None,
        metadata={
            "name": "CountList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    category_list: Optional[CategoryList] = field(
        default=None,
        metadata={
            "name": "CategoryList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    boolean_list: Optional[BooleanList] = field(
        default=None,
        metadata={
            "name": "BooleanList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity: Optional[Quantity] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    count: Optional[Count] = field(
        default=None,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    category: Optional[Category] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    boolean: Optional[Boolean1] = field(
        default=None,
        metadata={
            "name": "Boolean",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_topology_complex: Optional[TimeTopologyComplex] = field(
        default=None,
        metadata={
            "name": "TimeTopologyComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_edge: Optional[TimeEdge] = field(
        default=None,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: Optional[TimeNode] = field(
        default=None,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_period: Optional[TimePeriod] = field(
        default=None,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_instant: Optional[TimeInstant] = field(
        default=None,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    null: Optional[Null] = field(
        default=None,
        metadata={
            "name": "Null",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ExBoundingPolygonType(AbstractExGeographicExtentType):
    """
    Boundary enclosing the dataset expressed as the closed set of (x,y) coordinates
    of the polygon (last point replicates first point)
    """

    class Meta:
        name = "EX_BoundingPolygon_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    polygon: list[GmObjectPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class PriorityLocationPropertyType(LocationPropertyType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    priority: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DomainSet(DomainSetType):
    """The gml:domainSet property element describes the spatio-temporal region of
    interest, within which the coverage is defined.

    Its content model is given by gml:DomainSetType. The value of the
    domain is thus a choice between a gml:AbstractGeometry and a
    gml:AbstractTimeObject.  In the instance these abstract elements
    will normally be substituted by a geometry complex or temporal
    complex, to represent spatial coverages and time-series,
    respectively. The presence of the gml:AssociationAttributeGroup
    means that domainSet follows the usual GML property model and may
    use the xlink:href attribute to point to the domain, as an
    alternative to describing the domain inline. Ownership semantics may
    be provided using the gml:OwnershipAttributeGroup.
    """

    class Meta:
        name = "domainSet"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GridDomain(DomainSetType):
    class Meta:
        name = "gridDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Location(LocationPropertyType):
    class Meta:
        name = "location"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCurveDomain(DomainSetType):
    class Meta:
        name = "multiCurveDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiGeometryProperty(MultiGeometryPropertyType):
    class Meta:
        name = "multiGeometryProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiPointDomain(DomainSetType):
    class Meta:
        name = "multiPointDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSolidDomain(DomainSetType):
    class Meta:
        name = "multiSolidDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSurfaceDomain(DomainSetType):
    class Meta:
        name = "multiSurfaceDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RectifiedGridDomain(DomainSetType):
    class Meta:
        name = "rectifiedGridDomain"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValueComponent(ValuePropertyType):
    """
    Property that refers to, or contains, a Value.
    """

    class Meta:
        name = "valueComponent"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValueComponents(ValueArrayPropertyType):
    """
    Property that contains Values.
    """

    class Meta:
        name = "valueComponents"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ValueProperty(ValuePropertyType):
    """Property that refers to, or contains, a Value.

    Convenience element for general use.
    """

    class Meta:
        name = "valueProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExBoundingPolygon(ExBoundingPolygonType):
    class Meta:
        name = "EX_BoundingPolygon"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CompositeValueType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value_component: list[ValueComponent] = field(
        default_factory=list,
        metadata={
            "name": "valueComponent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_components: Optional[ValueComponents] = field(
        default=None,
        metadata={
            "name": "valueComponents",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class PriorityLocation(PriorityLocationPropertyType):
    class Meta:
        name = "priorityLocation"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExBoundingPolygonPropertyType:
    """
    :ivar ex_bounding_polygon:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "EX_BoundingPolygon_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_bounding_polygon: Optional[ExBoundingPolygon] = field(
        default=None,
        metadata={
            "name": "EX_BoundingPolygon",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExGeographicExtentPropertyType:
    """
    :ivar ex_geographic_description:
    :ivar ex_geographic_bounding_box:
    :ivar ex_bounding_polygon:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "EX_GeographicExtent_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_geographic_description: Optional[ExGeographicDescription] = field(
        default=None,
        metadata={
            "name": "EX_GeographicDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ex_geographic_bounding_box: Optional[ExGeographicBoundingBox] = field(
        default=None,
        metadata={
            "name": "EX_GeographicBoundingBox",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ex_bounding_polygon: Optional[ExBoundingPolygon] = field(
        default=None,
        metadata={
            "name": "EX_BoundingPolygon",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractFeatureType1(AbstractGmltype):
    """The basic feature model is given by the gml:AbstractFeatureType.

    The content model for gml:AbstractFeatureType adds two specific
    properties suitable for geographic features to the content model
    defined in gml:AbstractGMLType. The value of the gml:boundedBy
    property describes an envelope that encloses the entire feature
    instance, and is primarily useful for supporting rapid searching for
    features that occur in a particular location. The value of the
    gml:location property describes the extent, position or relative
    location of the feature.
    """

    class Meta:
        name = "AbstractFeatureType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    bounded_by: Optional[BoundedBy] = field(
        default=None,
        metadata={
            "name": "boundedBy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    priority_location: Optional[PriorityLocation] = field(
        default=None,
        metadata={
            "name": "priorityLocation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location: Optional[Location] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CompositeValue(CompositeValueType):
    """Gml:CompositeValue is an aggregate value built from other values .

    It contains zero or an arbitrary number of gml:valueComponent
    elements, and zero or one gml:valueComponents property elements.  It
    may be used for strongly coupled aggregates (vectors, tensors) or
    for arbitrary collections of values.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MovingObjectStatusType(AbstractTimeSliceType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    position: Optional[GeometryPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pos: Optional[Pos] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location_name: Optional[LocationName] = field(
        default=None,
        metadata={
            "name": "locationName",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location_reference: Optional[LocationReference] = field(
        default=None,
        metadata={
            "name": "locationReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    priority_location: Optional[PriorityLocation] = field(
        default=None,
        metadata={
            "name": "priorityLocation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    location: Optional[Location] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    speed: Optional[MeasureType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    bearing: Optional[DirectionPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    acceleration: Optional[MeasureType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    elevation: Optional[MeasureType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    status: Optional[Status] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    status_reference: Optional[StatusReference] = field(
        default=None,
        metadata={
            "name": "statusReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ValueArrayType(CompositeValueType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "pattern": r"[^: \n\r\t]+",
        },
    )


@dataclass
class ExSpatialTemporalExtentType(ExTemporalExtentType):
    """
    Extent with respect to date and time.
    """

    class Meta:
        name = "EX_SpatialTemporalExtent_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    spatial_extent: list[ExGeographicExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "spatialExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )


@dataclass
class AbstractFeatureType2(AbstractFeatureType1):
    """
    :ivar ade_of_abstract_feature: Augments AbstractFeature with
        properties defined in an ADE.
    """

    class Meta:
        name = "AbstractFeatureType"
        target_namespace = "http://www.opengis.net/citygml/3.0"

    ade_of_abstract_feature: list[AdeofAbstractFeaturePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class AbstractFeature1(AbstractFeatureType1):
    """This abstract element serves as the head of a substitution group which may
    contain any elements whose content model is derived from
    gml:AbstractFeatureType.

    This may be used as a variable in the construction of content
    models. gml:AbstractFeature may be thought of as "anything that is a
    GML feature" and may be used to define variables or templates in
    which the value of a GML property is "any feature". This occurs in
    particular in a GML feature collection where the feature member
    properties contain one or multiple copies of gml:AbstractFeature
    respectively.
    """

    class Meta:
        name = "AbstractFeature"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BoundedFeatureType(AbstractFeatureType1):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    bounded_by: Optional[BoundedBy] = field(
        default=None,
        metadata={
            "name": "boundedBy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )


@dataclass
class MovingObjectStatus(MovingObjectStatusType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ObservationType(AbstractFeatureType1):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    valid_time: Optional[ValidTime] = field(
        default=None,
        metadata={
            "name": "validTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    using: Optional["Using"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    subject: Optional["Subject"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    target: Optional["Target"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    result_of: Optional[ResultOf] = field(
        default=None,
        metadata={
            "name": "resultOf",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class ValueArray(ValueArrayType):
    """A Value Array is used for homogeneous arrays of primitive and aggregate
    values.

    The member values may be scalars, composites, arrays or lists.
    ValueArray has the same content model as CompositeValue, but the
    member values shall be homogeneous.  The element declaration
    contains a Schematron constraint which expresses this restriction
    precisely.  Since the members are homogeneous, the
    gml:referenceSystem (uom, codeSpace) may be specified on the
    gml:ValueArray itself and inherited by all the members if desired.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExSpatialTemporalExtent(ExSpatialTemporalExtentType):
    class Meta:
        name = "EX_SpatialTemporalExtent"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractFeatureWithLifespanType(AbstractFeatureType2):
    """
    :ivar creation_date: Indicates the date at which a CityGML feature
        was added to the CityModel.
    :ivar termination_date: Indicates the date at which a CityGML
        feature was removed from the CityModel.
    :ivar valid_from: Indicates the date at which a CityGML feature
        started to exist in the real world.
    :ivar valid_to: Indicates the date at which a CityGML feature ended
        to exist in the real world.
    :ivar ade_of_abstract_feature_with_lifespan: Augments
        AbstractFeatureWithLifespan with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    creation_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "creationDate",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    termination_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "terminationDate",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    valid_from: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "validFrom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    valid_to: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "validTo",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    ade_of_abstract_feature_with_lifespan: list[
        AdeofAbstractFeatureWithLifespanPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractFeatureWithLifespan",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class AbstractFeature2(AbstractFeatureType2):
    """
    AbstractFeature is the abstract superclass of all feature types within the
    CityGML conceptual model.
    """

    class Meta:
        name = "AbstractFeature"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractPointCloudType(AbstractFeatureType2):
    """
    :ivar ade_of_abstract_point_cloud: Augments AbstractPointCloud with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    ade_of_abstract_point_cloud: list[AdeofAbstractPointCloudPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfAbstractPointCloud",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
    )


@dataclass
class AddressType2(AbstractFeatureType2):
    """
    :ivar xal_address: Relates an OASIS address object to the Address.
    :ivar multi_point: Relates to the MultiPoint geometry of the
        Address. The geometry relates the address spatially to a city
        object.
    :ivar ade_of_address: Augments the Address with properties defined
        in an ADE.
    """

    class Meta:
        name = "AddressType"
        target_namespace = "http://www.opengis.net/citygml/3.0"

    xal_address: Optional["AddressType2.XalAddress"] = field(
        default=None,
        metadata={
            "name": "xalAddress",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )
    multi_point: Optional[MultiPointPropertyType] = field(
        default=None,
        metadata={
            "name": "multiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    ade_of_address: list[AdeofAddressPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAddress",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )

    @dataclass
    class XalAddress:
        address: Optional[Address1] = field(
            default=None,
            metadata={
                "name": "Address",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:ciq:xal:3",
                "required": True,
            },
        )


@dataclass
class AbstractSurfaceDataType(AbstractFeatureType2):
    """
    :ivar is_front: Indicates whether the texture or material is
        assigned to the front side or the back side of the surface
        geometry object.
    :ivar ade_of_abstract_surface_data: Augments AbstractSurfaceData
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    is_front: Optional[bool] = field(
        default=None,
        metadata={
            "name": "isFront",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    ade_of_abstract_surface_data: list[
        AdeofAbstractSurfaceDataPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractSurfaceData",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )


@dataclass
class AbstractTimeseriesType(AbstractFeatureType2):
    """
    :ivar first_timestamp: Specifies the beginning of the timeseries.
    :ivar last_timestamp: Specifies the end of the timeseries.
    :ivar ade_of_abstract_timeseries: Augments AbstractTimeseries with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    first_timestamp: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "firstTimestamp",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    last_timestamp: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "lastTimestamp",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    ade_of_abstract_timeseries: list[AdeofAbstractTimeseriesPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfAbstractTimeseries",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
    )


@dataclass
class DirectedObservationType(ObservationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    direction: Optional[Direction] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class HistoryPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    moving_object_status: list[MovingObjectStatus] = field(
        default_factory=list,
        metadata={
            "name": "MovingObjectStatus",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Observation(ObservationType):
    """The content model is a straightforward extension of gml:AbstractFeatureType;
    it automatically has the gml:identifier, gml:description,
    gml:descriptionReference, gml:name, and gml:boundedBy properties.

    The gml:validTime element describes the time of the observation.
    Note that this may be a time instant or a time period. The gml:using
    property contains or references a description of a sensor,
    instrument or procedure used for the observation. The gml:target
    property contains or references the specimen, region or station
    which is the object of the observation. This property is
    particularly useful for remote observations, such as photographs,
    where a generic location property might apply to the location of the
    camera or the location of the field of view, and thus may be
    ambiguous. The gml:subject element is provided as a convenient
    synonym for gml:target. This is the term commonly used in
    phtotography. The gml:resultOf property indicates the result of the
    observation.  The value may be inline, or a reference to a value
    elsewhere.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RangeSetType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    value_array: list[ValueArray] = field(
        default_factory=list,
        metadata={
            "name": "ValueArray",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity_list: list[QuantityList] = field(
        default_factory=list,
        metadata={
            "name": "QuantityList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    count_list: list[CountList] = field(
        default_factory=list,
        metadata={
            "name": "CountList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    category_list: list[CategoryList] = field(
        default_factory=list,
        metadata={
            "name": "CategoryList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    boolean_list: list[BooleanList] = field(
        default_factory=list,
        metadata={
            "name": "BooleanList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    data_block: Optional[DataBlock] = field(
        default=None,
        metadata={
            "name": "DataBlock",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    file: Optional[File] = field(
        default=None,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ExSpatialTemporalExtentPropertyType:
    """
    :ivar ex_spatial_temporal_extent:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "EX_SpatialTemporalExtent_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_spatial_temporal_extent: Optional[ExSpatialTemporalExtent] = field(
        default=None,
        metadata={
            "name": "EX_SpatialTemporalExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ExTemporalExtentPropertyType:
    """
    :ivar ex_spatial_temporal_extent:
    :ivar ex_temporal_extent:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "EX_TemporalExtent_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_spatial_temporal_extent: Optional[ExSpatialTemporalExtent] = field(
        default=None,
        metadata={
            "name": "EX_SpatialTemporalExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ex_temporal_extent: Optional[ExTemporalExtent] = field(
        default=None,
        metadata={
            "name": "EX_TemporalExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractAppearanceType(AbstractFeatureWithLifespanType):
    """
    :ivar ade_of_abstract_appearance: Augments AbstractAppearance with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    ade_of_abstract_appearance: list[AdeofAbstractAppearancePropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfAbstractAppearance",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
    )


@dataclass
class AbstractDynamizerType(AbstractFeatureWithLifespanType):
    """
    :ivar ade_of_abstract_dynamizer: Augments AbstractDynamizer with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    ade_of_abstract_dynamizer: list[AdeofAbstractDynamizerPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfAbstractDynamizer",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
    )


@dataclass
class AbstractFeatureWithLifespan(AbstractFeatureWithLifespanType):
    """AbstractFeatureWithLifespan is the base class for all CityGML features.

    It allows the optional specification of the real-world and database
    times for the existence of each feature.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractPointCloud(AbstractPointCloudType):
    """
    AbstractPointCloud is the abstract superclass to represent PointCloud objects.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractVersionTransitionType(AbstractFeatureWithLifespanType):
    """
    :ivar ade_of_abstract_version_transition: Augments
        AbstractVersionTransition with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    ade_of_abstract_version_transition: list[
        AdeofAbstractVersionTransitionPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractVersionTransition",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class AbstractVersionType(AbstractFeatureWithLifespanType):
    """
    :ivar ade_of_abstract_version: Augments AbstractVersion with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    ade_of_abstract_version: list[AdeofAbstractVersionPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractVersion",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class Address2(AddressType2):
    """
    Address represents an address of a city object.
    """

    class Meta:
        name = "Address"
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractSurfaceData(AbstractSurfaceDataType):
    """
    AbstractSurfaceData is the abstract superclass for different kinds of textures
    and material.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AbstractTextureType(AbstractSurfaceDataType):
    """
    :ivar image_uri: Specifies the URI that points to the external image
        data file.
    :ivar mime_type: Specifies the MIME type of the external point cloud
        file.
    :ivar texture_type: Indicates the specific type of the texture.
    :ivar wrap_mode: Specifies the behaviour of the texture when the
        texture is smaller than the surface to which it is applied.
    :ivar border_color: Specifies the color of that part of the surface
        that is not covered by the texture.
    :ivar ade_of_abstract_texture: Augments AbstractTexture with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    image_uri: Optional[str] = field(
        default=None,
        metadata={
            "name": "imageURI",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "required": True,
        },
    )
    mime_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "mimeType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    texture_type: Optional[TextureTypeType] = field(
        default=None,
        metadata={
            "name": "textureType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    wrap_mode: Optional[WrapModeType] = field(
        default=None,
        metadata={
            "name": "wrapMode",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    border_color: list[float] = field(
        default_factory=list,
        metadata={
            "name": "borderColor",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "min_inclusive": 0.0,
            "min_length": 3,
            "max_inclusive": 1.0,
            "max_length": 4,
            "tokens": True,
        },
    )
    ade_of_abstract_texture: list[AdeofAbstractTexturePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )


@dataclass
class X3DmaterialType(AbstractSurfaceDataType):
    """
    :ivar ambient_intensity: Specifies the minimum percentage of
        diffuseColor that is visible regardless of light sources.
    :ivar diffuse_color: Specifies the color of the light diffusely
        reflected by the surface geometry object.
    :ivar emissive_color: Specifies the color of the light emitted by
        the surface geometry object.
    :ivar specular_color: Specifies the color of the light directly
        reflected by the surface geometry object.
    :ivar shininess: Specifies the sharpness of the specular highlight.
    :ivar transparency: Specifies the degree of transparency of the
        surface geometry object.
    :ivar is_smooth: Specifies which interpolation method is used for
        the shading of the surface geometry object. If the attribute is
        set to true, vertex normals should be used for shading (Gouraud
        shading). Otherwise, normals should be constant for a surface
        patch (flat shading).
    :ivar target: Specifies the URI that points to the surface geometry
        objects to which the material is applied.
    :ivar ade_of_x3_dmaterial: Augments the X3DMaterial with properties
        defined in an ADE.
    """

    class Meta:
        name = "X3DMaterialType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    ambient_intensity: Optional[float] = field(
        default=None,
        metadata={
            "name": "ambientIntensity",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "min_inclusive": 0.0,
            "max_inclusive": 1.0,
        },
    )
    diffuse_color: list[float] = field(
        default_factory=list,
        metadata={
            "name": "diffuseColor",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "min_inclusive": 0.0,
            "max_inclusive": 1.0,
            "length": 3,
            "tokens": True,
        },
    )
    emissive_color: list[float] = field(
        default_factory=list,
        metadata={
            "name": "emissiveColor",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "min_inclusive": 0.0,
            "max_inclusive": 1.0,
            "length": 3,
            "tokens": True,
        },
    )
    specular_color: list[float] = field(
        default_factory=list,
        metadata={
            "name": "specularColor",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "min_inclusive": 0.0,
            "max_inclusive": 1.0,
            "length": 3,
            "tokens": True,
        },
    )
    shininess: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "min_inclusive": 0.0,
            "max_inclusive": 1.0,
        },
    )
    transparency: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "min_inclusive": 0.0,
            "max_inclusive": 1.0,
        },
    )
    is_smooth: Optional[bool] = field(
        default=None,
        metadata={
            "name": "isSmooth",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    target: list[str] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    ade_of_x3_dmaterial: list[AdeofX3DmaterialPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfX3DMaterial",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )


@dataclass
class AbstractAtomicTimeseriesType(AbstractTimeseriesType):
    """
    :ivar observation_property: Specifies the phenomenon for which the
        atomic timeseries provides observation values.
    :ivar uom: Specifies the unit of measurement of the observation
        values.
    :ivar ade_of_abstract_atomic_timeseries: Augments
        AbstractAtomicTimeseries with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    observation_property: Optional[str] = field(
        default=None,
        metadata={
            "name": "observationProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    ade_of_abstract_atomic_timeseries: list[
        AdeofAbstractAtomicTimeseriesPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractAtomicTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )


@dataclass
class AbstractTimeseries(AbstractTimeseriesType):
    """
    AbstractTimeseries is the abstract superclass representing any type of
    timeseries data.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class PointCloudType(AbstractPointCloudType):
    """
    :ivar mime_type: Specifies the MIME type of the external point cloud
        file.
    :ivar point_file: Specifies the URI that points to the external
        point cloud file.
    :ivar point_file_srs_name: Indicates the coordinate reference system
        used by the external point cloud file.
    :ivar points: Relates to the 3D MultiPoint geometry of the
        PointCloud stored inline with the city model.
    :ivar ade_of_point_cloud: Augments the PointCloud with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/pointcloud/3.0"

    mime_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "mimeType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )
    point_file: Optional[str] = field(
        default=None,
        metadata={
            "name": "pointFile",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )
    point_file_srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "pointFileSrsName",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )
    points: Optional[MultiPointPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )
    ade_of_point_cloud: list[AdeofPointCloudPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfPointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )


@dataclass
class DirectedObservation(DirectedObservationType):
    """A gml:DirectedObservation is the same as an observation except that it adds
    an additional gml:direction property.

    This is the direction in which the observation was acquired. Clearly
    this applies only to certain types of observations such as visual
    observations by people, or observations obtained from terrestrial
    cameras.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DirectedObservationAtDistanceType(DirectedObservationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    distance: Optional[MeasureType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class History(HistoryPropertyType):
    """A generic sequence of events constitute a gml:history of an object.

    The gml:history element contains a set of elements in the
    substitution group headed by the abstract element
    gml:AbstractTimeSlice, representing the time-varying properties of
    interest. The history property of a dynamic feature associates a
    feature instance with a sequence of time slices (i.e. change events)
    that encapsulate the evolution of the feature.
    """

    class Meta:
        name = "history"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RangeSet(RangeSetType):
    """The gml:rangeSet property element contains the values of the coverage
    (sometimes called the attribute values).

    Its content model is given by gml:RangeSetType. This content model
    supports a structural description of the range.  The semantic
    information describing the range set is embedded using a uniform
    method, as part of the explicit values, or as a template value
    accompanying the representation using gml:DataBlock and gml:File.
    The values from each component (or "band") in the range may be
    encoded within a gml:ValueArray element or a concrete member of the
    gml:AbstractScalarValueList substitution group . Use of these
    elements satisfies the value-type homogeneity requirement.
    """

    class Meta:
        name = "rangeSet"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Track2(HistoryPropertyType):
    class Meta:
        name = "track"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ExExtentType(AbstractObjectType):
    """
    Information about spatial, vertical, and temporal extent.
    """

    class Meta:
        name = "EX_Extent_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    description: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    geographic_element: list[ExGeographicExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "geographicElement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    temporal_element: list[ExTemporalExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "temporalElement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    vertical_element: list[ExVerticalExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "verticalElement",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class AbstractAppearance(AbstractAppearanceType):
    """
    AbstractAppearance is the abstract superclass to represent any kind of
    appearance objects.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractDynamizer(AbstractDynamizerType):
    """
    AbstractDynamizer is the abstract superclass to represent Dynamizer objects.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractVersion(AbstractVersionType):
    """
    AbstractVersion is the abstract superclass to represent Version objects.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractVersionTransition(AbstractVersionTransitionType):
    """
    AbstractVersionTransition is the abstract superclass to represent
    VersionTransition objects.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AddressPropertyType:
    """
    :ivar address:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    address: Optional[Address2] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractTexture(AbstractTextureType):
    """
    AbstractTexture is the abstract superclass to represent the common attributes
    of the classes ParameterizedTexture and GeoreferencedTexture.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class GeoreferencedTextureType(AbstractTextureType):
    """
    :ivar prefer_world_file: Indicates whether the georeference from the
        image file or the accompanying world file should be preferred.
    :ivar reference_point: Relates to the 2D Point geometry that
        represents the center of the upper left image pixel in world
        space.
    :ivar orientation: Specifies the rotation and scaling of the image
        in form of a 2x2 matrix.
    :ivar target: Specifies the URI that points to the surface geometry
        objects to which the texture is applied.
    :ivar ade_of_georeferenced_texture: Augments the
        GeoreferencedTexture with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    prefer_world_file: Optional[bool] = field(
        default=None,
        metadata={
            "name": "preferWorldFile",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    reference_point: Optional[PointPropertyType] = field(
        default=None,
        metadata={
            "name": "referencePoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    orientation: list[float] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "length": 4,
            "tokens": True,
        },
    )
    target: list[str] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    ade_of_georeferenced_texture: list[
        AdeofGeoreferencedTexturePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfGeoreferencedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )


@dataclass
class ParameterizedTextureType(AbstractTextureType):
    """
    :ivar texture_parameterization: Relates to the texture coordinates
        or transformation matrices used for parameterization.
    :ivar ade_of_parameterized_texture: Augments the
        ParameterizedTexture with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    texture_parameterization: list[TextureAssociationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "textureParameterization",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    ade_of_parameterized_texture: list[
        AdeofParameterizedTexturePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfParameterizedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )


@dataclass
class X3Dmaterial(X3DmaterialType):
    """
    X3DMaterial defines properties for surface geometry objects based on the
    material definitions from the standards X3D and COLLADA.
    """

    class Meta:
        name = "X3DMaterial"
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AbstractAtomicTimeseries(AbstractAtomicTimeseriesType):
    """AbstractAtomicTimeseries represents the attributes and relationships that
    are common to all kinds of atomic timeseries (GenericTimeseries,
    TabulatedFileTimeseries, StandardFileTimeseries).

    An atomic timeseries represents time-varying data of a specific data
    type for a single contiguous time interval.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class StandardFileTimeseriesType(AbstractAtomicTimeseriesType):
    """
    :ivar file_location: Specifies the URI that points to the external
        timeseries file.
    :ivar file_type: Specifies the format used to represent the
        timeseries data.
    :ivar mime_type: Specifies the MIME type of the external timeseries
        file.
    :ivar ade_of_standard_file_timeseries: Augments the
        StandardFileTimeseries with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    file_location: Optional[str] = field(
        default=None,
        metadata={
            "name": "fileLocation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    file_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "fileType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    mime_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "mimeType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    ade_of_standard_file_timeseries: list[
        AdeofStandardFileTimeseriesPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfStandardFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )


@dataclass
class TabulatedFileTimeseriesType(AbstractAtomicTimeseriesType):
    """
    :ivar file_location: Specifies the URI that points to the external
        timeseries file.
    :ivar file_type: Specifies the format used to represent the
        timeseries data.
    :ivar mime_type: Specifies the MIME type of the external timeseries
        file.
    :ivar value_type: Indicates the specific type of the timeseries
        data.
    :ivar number_of_header_lines: Indicates the number of lines at the
        beginning of the tabulated file that represent headers.
    :ivar field_separator: Indicates which symbol is used to separate
        the individual values in the tabulated file.
    :ivar decimal_symbol: Indicates which symbol is used to separate the
        integer part from the fractional part of a decimal number.
    :ivar id_column_no: Specifies the number of the column that stores
        the identifier of the time-value-pair.
    :ivar id_column_name: Specifies the name of the column that stores
        the identifier of the time-value-pair.
    :ivar id_value: Specifies the value of the identifier for which the
        time-value-pairs are to be selected.
    :ivar time_column_no: Specifies the number of the column that stores
        the timestamp of the time-value-pair.
    :ivar time_column_name: Specifies the name of the column that stores
        the timestamp of the time-value-pair.
    :ivar value_column_no: Specifies the number of the column that
        stores the value of the time-value-pair.
    :ivar value_column_name: Specifies the name of the column that
        stores the value of the time-value-pair.
    :ivar ade_of_tabulated_file_timeseries: Augments the
        TabulatedFileTimeseries with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    file_location: Optional[str] = field(
        default=None,
        metadata={
            "name": "fileLocation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    file_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "fileType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    mime_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "mimeType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    value_type: Optional[TimeseriesTypeValueType] = field(
        default=None,
        metadata={
            "name": "valueType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    number_of_header_lines: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfHeaderLines",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    field_separator: Optional[str] = field(
        default=None,
        metadata={
            "name": "fieldSeparator",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    decimal_symbol: Optional[str] = field(
        default=None,
        metadata={
            "name": "decimalSymbol",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    id_column_no: Optional[int] = field(
        default=None,
        metadata={
            "name": "idColumnNo",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    id_column_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "idColumnName",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    id_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "idValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    time_column_no: Optional[int] = field(
        default=None,
        metadata={
            "name": "timeColumnNo",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    time_column_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "timeColumnName",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    value_column_no: Optional[int] = field(
        default=None,
        metadata={
            "name": "valueColumnNo",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    value_column_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "valueColumnName",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    ade_of_tabulated_file_timeseries: list[
        AdeofTabulatedFileTimeseriesPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfTabulatedFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )


@dataclass
class PointCloud(PointCloudType):
    """
    A PointCloud is an unordered collection of points that is a sampling of the
    geometry of a space or space boundary.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/pointcloud/3.0"


@dataclass
class AbstractCoverageType(AbstractFeatureType1):
    """The base type for coverages is gml:AbstractCoverageType.

    The basic elements of a coverage can be seen in this content model: the coverage contains gml:domainSet and gml:rangeSet properties. The gml:domainSet property describes the domain of the coverage and the gml:rangeSet property describes the range of the coverage.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    rectified_grid_domain: Optional[RectifiedGridDomain] = field(
        default=None,
        metadata={
            "name": "rectifiedGridDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_domain: Optional[GridDomain] = field(
        default=None,
        metadata={
            "name": "gridDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid_domain: Optional[MultiSolidDomain] = field(
        default=None,
        metadata={
            "name": "multiSolidDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface_domain: Optional[MultiSurfaceDomain] = field(
        default=None,
        metadata={
            "name": "multiSurfaceDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve_domain: Optional[MultiCurveDomain] = field(
        default=None,
        metadata={
            "name": "multiCurveDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point_domain: Optional[MultiPointDomain] = field(
        default=None,
        metadata={
            "name": "multiPointDomain",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    domain_set: Optional[DomainSet] = field(
        default=None,
        metadata={
            "name": "domainSet",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    range_set: Optional[RangeSet] = field(
        default=None,
        metadata={
            "name": "rangeSet",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class DirectedObservationAtDistance(DirectedObservationAtDistanceType):
    """Gml:DirectedObservationAtDistance adds an additional distance property.

    This is the distance from the observer to the subject of the
    observation. Clearly this applies only to certain types of
    observations such as visual observations by people, or observations
    obtained from terrestrial cameras.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DynamicFeatureType(AbstractFeatureType1):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    valid_time: Optional[ValidTime] = field(
        default=None,
        metadata={
            "name": "validTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    track: Optional[Track2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    history: Optional[History] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    data_source: Optional[DataSource] = field(
        default=None,
        metadata={
            "name": "dataSource",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    data_source_reference: Optional[DataSourceReference] = field(
        default=None,
        metadata={
            "name": "dataSourceReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ExExtent(ExExtentType):
    class Meta:
        name = "EX_Extent"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractPointCloudPropertyType:
    """
    :ivar point_cloud:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    point_cloud: Optional[PointCloud] = field(
        default=None,
        metadata={
            "name": "PointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GeoreferencedTexture(GeoreferencedTextureType):
    """A GeoreferencedTexture is a texture that uses a planimetric projection.

    It contains an implicit parameterization that is either stored
    within the image file, an accompanying world file or specified using
    the orientation and referencePoint elements.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class ParameterizedTexture(ParameterizedTextureType):
    """
    A ParameterizedTexture is a texture that uses texture coordinates or a
    transformation matrix for parameterization.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class X3DmaterialPropertyType:
    """
    :ivar x3_dmaterial:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        name = "X3DMaterialPropertyType"
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    x3_dmaterial: Optional[X3Dmaterial] = field(
        default=None,
        metadata={
            "name": "X3DMaterial",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class StandardFileTimeseries(StandardFileTimeseriesType):
    """A StandardFileTimeseries represents time-varying data for a single
    contiguous time interval.

    The data is provided in an external file referenced in the
    StandardFileTimeseries. The data within the external file shall be
    encoded according to a dedicated format for the representation of
    timeseries data, for example, the OGC TimeseriesML or OGC
    Observations &amp; Measurements standard. The data type of the data
    has to be specified within the external file.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class TabulatedFileTimeseries(TabulatedFileTimeseriesType):
    """A TabulatedFileTimeseries represents time-varying data of a specific data
    type for a single contiguous time interval.

    The data is provided in an external file referenced in the
    TabulatedFileTimeseries. The file shall contain table structured
    data using an appropriate file format like comma-separated values
    (CSV), Microsoft Excel (XLSX) or Google Spreadsheet. The timestamps
    and the values are given in specific columns of the table. Each row
    represents a single time-value-pair. A subset of rows can be
    selected using the idColumn and idValue attributes.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class PointCloudPropertyType:
    """
    :ivar point_cloud:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/pointcloud/3.0"

    point_cloud: Optional[PointCloud] = field(
        default=None,
        metadata={
            "name": "PointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractContinuousCoverageType(AbstractCoverageType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    coverage_function: Optional[CoverageFunction] = field(
        default=None,
        metadata={
            "name": "coverageFunction",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractCoverage(AbstractCoverageType):
    """This element serves as the head of a substitution group which may contain
    any coverage whose type is derived from gml:AbstractCoverageType.

    It may act as a variable in the definition of content models where
    it is required to permit any coverage to be valid.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DiscreteCoverageType(AbstractCoverageType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    coverage_function: Optional[CoverageFunction] = field(
        default=None,
        metadata={
            "name": "coverageFunction",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DynamicFeature(DynamicFeatureType):
    """States are captured by time-stamped instances of a feature.

    The content model extends the standard gml:AbstractFeatureType with
    the gml:dynamicProperties model group. Each time-stamped instance
    represents a 'snapshot' of a feature. The dynamic feature classes
    will normally be extended to suit particular applications.  A
    dynamic feature bears either a time stamp or a history.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DynamicFeatureCollectionType(DynamicFeatureType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    dynamic_members: Optional["DynamicMembers"] = field(
        default=None,
        metadata={
            "name": "dynamicMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class ExExtentPropertyType:
    """
    :ivar ex_extent:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "EX_Extent_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ex_extent: Optional[ExExtent] = field(
        default=None,
        metadata={
            "name": "EX_Extent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractSurfaceDataPropertyType:
    """
    :ivar x3_dmaterial:
    :ivar parameterized_texture:
    :ivar georeferenced_texture:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    x3_dmaterial: Optional[X3Dmaterial] = field(
        default=None,
        metadata={
            "name": "X3DMaterial",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    parameterized_texture: Optional[ParameterizedTexture] = field(
        default=None,
        metadata={
            "name": "ParameterizedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    georeferenced_texture: Optional[GeoreferencedTexture] = field(
        default=None,
        metadata={
            "name": "GeoreferencedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractTexturePropertyType:
    """
    :ivar parameterized_texture:
    :ivar georeferenced_texture:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    parameterized_texture: Optional[ParameterizedTexture] = field(
        default=None,
        metadata={
            "name": "ParameterizedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    georeferenced_texture: Optional[GeoreferencedTexture] = field(
        default=None,
        metadata={
            "name": "GeoreferencedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AppearanceType(AbstractAppearanceType):
    """
    :ivar theme: Specifies the topic of the Appearance. Each Appearance
        contains surface data for one theme only. Examples of themes are
        infrared radiation, noise pollution, or earthquake-induced
        structural stress.
    :ivar surface_data: Relates to the surface data that are part of the
        Appearance.
    :ivar ade_of_appearance: Augments the Appearance with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    theme: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    surface_data: list["AppearanceType.SurfaceData"] = field(
        default_factory=list,
        metadata={
            "name": "surfaceData",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    ade_of_appearance: list[AdeofAppearancePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAppearance",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )

    @dataclass
    class SurfaceData(AbstractFeatureMemberType):
        """
        :ivar x3_dmaterial:
        :ivar parameterized_texture:
        :ivar georeferenced_texture:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        x3_dmaterial: Optional[X3Dmaterial] = field(
            default=None,
            metadata={
                "name": "X3DMaterial",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            },
        )
        parameterized_texture: Optional[ParameterizedTexture] = field(
            default=None,
            metadata={
                "name": "ParameterizedTexture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            },
        )
        georeferenced_texture: Optional[GeoreferencedTexture] = field(
            default=None,
            metadata={
                "name": "GeoreferencedTexture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class GeoreferencedTexturePropertyType:
    """
    :ivar georeferenced_texture:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    georeferenced_texture: Optional[GeoreferencedTexture] = field(
        default=None,
        metadata={
            "name": "GeoreferencedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ParameterizedTexturePropertyType:
    """
    :ivar parameterized_texture:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    parameterized_texture: Optional[ParameterizedTexture] = field(
        default=None,
        metadata={
            "name": "ParameterizedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class StandardFileTimeseriesPropertyType:
    """
    :ivar standard_file_timeseries:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    standard_file_timeseries: Optional[StandardFileTimeseries] = field(
        default=None,
        metadata={
            "name": "StandardFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TabulatedFileTimeseriesPropertyType:
    """
    :ivar tabulated_file_timeseries:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    tabulated_file_timeseries: Optional[TabulatedFileTimeseries] = field(
        default=None,
        metadata={
            "name": "TabulatedFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractContinuousCoverage(AbstractContinuousCoverageType):
    """A continuous coverage as defined in ISO 19123 is a coverage that can return
    different values for the same feature attribute at different direct positions
    within a single spatiotemporal object in its spatiotemporal domain.

    The base type for continuous coverages is
    AbstractContinuousCoverageType. The coverageFunction element
    describes the mapping function. The abstract element
    gml:AbstractContinuousCoverage serves as the head of a substitution
    group which may contain any continuous coverage whose type is
    derived from gml:AbstractContinuousCoverageType.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractDiscreteCoverage(DiscreteCoverageType):
    """A discrete coverage consists of a domain set, range set and optionally a
    coverage function.

    The domain set consists of either spatial or temporal geometry
    objects, finite in number. The range set is comprised of a finite
    number of attribute values each of which is associated to every
    direct position within any single spatiotemporal object in the
    domain. In other words, the range values are constant on each
    spatiotemporal object in the domain. This coverage function maps
    each element from the coverage domain to an element in its range.
    The coverageFunction element describes the mapping function. This
    element serves as the head of a substitution group which may contain
    any discrete coverage whose type is derived from
    gml:DiscreteCoverageType.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DynamicFeatureCollection(DynamicFeatureCollectionType):
    """A gml:DynamicFeatureCollection is a feature collection that has a
    gml:validTime property (i.e. is a snapshot of the feature collection) or which
    has a gml:history property that contains one or more gml:AbstractTimeSlices
    each of which contain values of the time varying properties of the feature
    collection.

    Note that the gml:DynamicFeatureCollection may be one of the following:
    1.      A feature collection which consists of static feature members (members do not change in time) but which has properties of the collection object as a whole that do change in time .
    2.      A feature collection which consists of dynamic feature members (the members are gml:DynamicFeatures) but which also has properties of the collection as a whole that vary in time.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GridCoverage(DiscreteCoverageType):
    """A gml:GriddedCoverage is a discrete point coverage in which the domain set
    is a geometric grid of points.

    Note that this is the same as the gml:MultiPointCoverage except that
    we have a gml:Grid to describe the domain. The simple gridded
    coverage is not geometrically referenced and hence no geometric
    positions are assignable to the points in the grid. Such geometric
    positioning is introduced in the gml:RectifiedGridCoverage.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiCurveCoverage(DiscreteCoverageType):
    """In a gml:MultiCurveCoverage the domain is partioned into a collection of
    curves comprising a gml:MultiCurve.  The coverage function then maps each curve
    in the collection to a value in the range set. The content model is identical
    with gml:DiscreteCoverageType, but that gml:domainSet shall have values
    gml:MultiCurve.

    In a gml:MultiCurveCoverage the mapping from the domain to the range is straightforward.
    -       For gml:DataBlock encodings the curves of the gml:MultiCurve are mapped in document order to the tuples of the data block.
    -       For gml:CompositeValue encodings the curves of the gml:MultiCurve are mapped to the members of the composite value in document order.
    -       For gml:File encodings the curves of the gml:MultiCurve are mapped to the records of the file in sequential order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiPointCoverage(DiscreteCoverageType):
    """In a gml:MultiPointCoverage the domain set is a gml:MultiPoint, that is a
    collection of arbitrarily distributed geometric points. The content model is
    identical with gml:DiscreteCoverageType, but that gml:domainSet shall have
    values gml:MultiPoint.

    In a gml:MultiPointCoverage the mapping from the domain to the range is straightforward.
    -       For gml:DataBlock encodings the points of the gml:MultiPoint are mapped in document order to the tuples of the data block.
    -       For gml:CompositeValue encodings the points of the gml:MultiPoint are mapped to the members of the composite value in document order.
    -       For gml:File encodings the points of the gml:MultiPoint are mapped to the records of the file in sequential order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSolidCoverage(DiscreteCoverageType):
    """In a gml:MultiSolidCoverage the domain is partioned into a collection of
    solids comprising a gml:MultiSolid.  The coverage function than maps each solid
    in the collection to a value in the range set. The content model is identical
    with gml:DiscreteCoverageType, but that gml:domainSet shall have values
    gml:MultiSolid.

    In a gml:MultiSolidCoverage the mapping from the domain to the range is straightforward.
    -       For gml:DataBlock encodings the solids of the gml:MultiSolid are mapped in document order to the tuples of the data block.
    -       For gml:CompositeValue encodings the solids of the gml:MultiSolid are mapped to the members of the composite value in document order.
    -       For gml:File encodings the solids of the gml:MultiSolid are mapped to the records of the file in sequential order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MultiSurfaceCoverage(DiscreteCoverageType):
    """In a gml:MultiSurfaceCoverage the domain is partioned into a collection of
    surfaces comprising a gml:MultiSurface.  The coverage function than maps each
    surface in the collection to a value in the range set. The content model is
    identical with gml:DiscreteCoverageType, but that gml:domainSet shall have
    values gml:MultiSurface.

    In a gml:MultiSurfaceCoverage the mapping from the domain to the range is straightforward.
    -       For gml:DataBlock encodings the surfaces of the gml:MultiSurface are mapped in document order to the tuples of the data block.
    -       For gml:CompositeValue encodings the surfaces of the gml:MultiSurface are mapped to the members of the composite value in document order.
    -       For gml:File encodings the surfaces of the gml:MultiSurface are mapped to the records of the file in sequential order.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class RectifiedGridCoverage(DiscreteCoverageType):
    """The gml:RectifiedGridCoverage is a discrete point coverage based on a
    rectified grid.

    It is similar to the grid coverage except that the points of the
    grid are geometrically referenced. The rectified grid coverage has a
    domain that is a gml:RectifiedGrid geometry.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DomainOfValidity:
    """
    The gml:domainOfValidity property implements an association role to an
    EX_Extent object as encoded in ISO/TS 19139, either referencing or containing
    the definition of that extent.

    :ivar ex_extent:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "domainOfValidity"
        namespace = "http://www.opengis.net/gml/3.2"

    ex_extent: Optional[ExExtent] = field(
        default=None,
        metadata={
            "name": "EX_Extent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractRsReferenceSystemType(AbstractObjectType):
    """
    Description of the spatial and temporal reference systems used in the dataset.
    """

    class Meta:
        name = "AbstractRS_ReferenceSystem_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    name: Optional[RsIdentifierPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    domain_of_validity: list[ExExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "domainOfValidity",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class DqScopeType(AbstractObjectType):
    class Meta:
        name = "DQ_Scope_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    level: Optional[MdScopeCodePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    extent: Optional[ExExtentPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    level_description: list[MdScopeDescriptionPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "levelDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class LiSourceType(AbstractObjectType):
    class Meta:
        name = "LI_Source_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    description: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    scale_denominator: Optional[MdRepresentativeFractionPropertyType] = field(
        default=None,
        metadata={
            "name": "scaleDenominator",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source_reference_system: Optional[MdReferenceSystemPropertyType] = field(
        default=None,
        metadata={
            "name": "sourceReferenceSystem",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source_citation: Optional[CiCitationPropertyType] = field(
        default=None,
        metadata={
            "name": "sourceCitation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source_extent: list[ExExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "sourceExtent",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source_step: list[LiProcessStepPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "sourceStep",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class MdDataIdentificationType(AbstractMdIdentificationType):
    class Meta:
        name = "MD_DataIdentification_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    spatial_representation_type: list[
        MdSpatialRepresentationTypeCodePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "spatialRepresentationType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    spatial_resolution: list[MdResolutionPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "spatialResolution",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    language: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    character_set: list[MdCharacterSetCodePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "characterSet",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    topic_category: list[MdTopicCategoryCodePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "topicCategory",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    environment_description: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "environmentDescription",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    extent: list[ExExtentPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    supplemental_information: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "supplementalInformation",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class Appearance(AppearanceType):
    """
    An Appearance is a collection of surface data, i.e. observable properties for
    surface geometry objects in the form of textures and material.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/appearance/3.0"


@dataclass
class AbstractCrstype(IdentifiedObjectType):
    class Meta:
        name = "AbstractCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    domain_of_validity: list[DomainOfValidity] = field(
        default_factory=list,
        metadata={
            "name": "domainOfValidity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    scope: list[Scope] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )


@dataclass
class AbstractDatumType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    domain_of_validity: Optional[DomainOfValidity] = field(
        default=None,
        metadata={
            "name": "domainOfValidity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    scope: list[Scope] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    anchor_point: Optional[AnchorPoint] = field(
        default=None,
        metadata={
            "name": "anchorPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    anchor_definition: Optional[AnchorDefinition] = field(
        default=None,
        metadata={
            "name": "anchorDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    realization_epoch: Optional[RealizationEpoch] = field(
        default=None,
        metadata={
            "name": "realizationEpoch",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DynamicFeatureMemberType(AbstractFeatureMemberType):
    """
    :ivar dynamic_feature_collection:
    :ivar dynamic_feature:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    dynamic_feature_collection: list[DynamicFeatureCollection] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature: list[DynamicFeature] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractRsReferenceSystem(AbstractRsReferenceSystemType):
    class Meta:
        name = "AbstractRS_ReferenceSystem"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DqScope(DqScopeType):
    class Meta:
        name = "DQ_Scope"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class LiSource(LiSourceType):
    class Meta:
        name = "LI_Source"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class MdDataIdentification(MdDataIdentificationType):
    class Meta:
        name = "MD_DataIdentification"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractAppearancePropertyType:
    """
    :ivar appearance:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    appearance: Optional[Appearance] = field(
        default=None,
        metadata={
            "name": "Appearance",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractCityObjectType(AbstractFeatureWithLifespanType):
    """
    :ivar external_reference: References external objects in other
        information systems that have a relation to the city object.
    :ivar generalizes_to: Relates generalized representations of the
        same real-world object in different Levels of Detail to the city
        object. The direction of this relation is from the city object
        to the corresponding generalized city objects.
    :ivar relative_to_terrain: Describes the vertical position of the
        city object relative to the surrounding terrain.
    :ivar relative_to_water: Describes the vertical position of the city
        object relative to the surrounding water surface.
    :ivar related_to: Relates other city objects to the city object. It
        also describes how the city objects are related to each other.
    :ivar appearance: Relates appearances to the city object.
    :ivar generic_attribute: Relates generic attributes to the city
        object.
    :ivar dynamizer: Relates Dynamizer objects to the city object. These
        allow timeseries data to override static attribute values of the
        city object.
    :ivar ade_of_abstract_city_object: Augments AbstractCityObject with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    external_reference: list[ExternalReferencePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "externalReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    generalizes_to: list[ReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "generalizesTo",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    relative_to_terrain: Optional[RelativeToTerrainType] = field(
        default=None,
        metadata={
            "name": "relativeToTerrain",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    relative_to_water: Optional[RelativeToWaterType] = field(
        default=None,
        metadata={
            "name": "relativeToWater",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    related_to: list["CityObjectRelationPropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "relatedTo",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    appearance: list["AbstractCityObjectType.Appearance"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    generic_attribute: list[AbstractGenericAttributePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "genericAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    dynamizer: list["AbstractDynamizerPropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    ade_of_abstract_city_object: list[AdeofAbstractCityObjectPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfAbstractCityObject",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
    )

    @dataclass
    class Appearance(AbstractFeatureMemberType):
        """
        :ivar appearance:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        appearance: Optional[Appearance] = field(
            default=None,
            metadata={
                "name": "Appearance",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class AppearancePropertyType:
    """
    :ivar appearance:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/appearance/3.0"

    appearance: Optional[Appearance] = field(
        default=None,
        metadata={
            "name": "Appearance",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractCrs(AbstractCrstype):
    """Gml:AbstractCRS specifies a coordinate reference system which is usually
    single but may be compound.

    This abstract complex type shall not be used, extended, or
    restricted, in a GML Application Schema, to define a concrete
    subtype with a meaning equivalent to a concrete subtype specified in
    this document.
    """

    class Meta:
        name = "AbstractCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractDatum(AbstractDatumType):
    """A gml:AbstractDatum specifies the relationship of a coordinate system to the
    earth, thus creating a coordinate reference system.

    A datum uses a parameter or set of parameters that determine the
    location of the origin of the coordinate reference system. Each
    datum subtype may be associated with only specific types of
    coordinate systems. This abstract complex type shall not be used,
    extended, or restricted, in a GML Application Schema, to define a
    concrete subtype with a meaning equivalent to a concrete subtype
    specified in this document.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSingleCrs(AbstractCrstype):
    """
    Gml:AbstractSingleCRS implements a coordinate reference system consisting of
    one coordinate system and one datum (as opposed to a Compound CRS).
    """

    class Meta:
        name = "AbstractSingleCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EngineeringDatumType(AbstractDatumType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticDatumType(AbstractDatumType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_prime_meridian: Optional[UsesPrimeMeridian] = field(
        default=None,
        metadata={
            "name": "usesPrimeMeridian",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    prime_meridian: Optional[PrimeMeridian2] = field(
        default=None,
        metadata={
            "name": "primeMeridian",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_ellipsoid: Optional[UsesEllipsoid] = field(
        default=None,
        metadata={
            "name": "usesEllipsoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoid: Optional[Ellipsoid2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ImageDatumType(AbstractDatumType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pixel_in_cell: Optional[PixelInCell] = field(
        default=None,
        metadata={
            "name": "pixelInCell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class TemporalDatumBaseType(AbstractDatumType):
    """The TemporalDatumBaseType partially defines the origin of a temporal
    coordinate reference system.

    This type restricts the AbstractDatumType to remove the
    "anchorDefinition" and "realizationEpoch" elements.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    anchor_point: Any = field(
        init=False,
        default=None,
        metadata={
            "type": "Ignore",
        },
    )
    anchor_definition: Any = field(
        init=False,
        default=None,
        metadata={
            "type": "Ignore",
        },
    )
    realization_epoch: Any = field(
        init=False,
        default=None,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class VerticalDatumType(AbstractDatumType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DynamicMembers(DynamicFeatureMemberType):
    class Meta:
        name = "dynamicMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DqScopePropertyType:
    """
    :ivar dq_scope:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_Scope_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_scope: Optional[DqScope] = field(
        default=None,
        metadata={
            "name": "DQ_Scope",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class LiSourcePropertyType:
    """
    :ivar li_source:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "LI_Source_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    li_source: Optional[LiSource] = field(
        default=None,
        metadata={
            "name": "LI_Source",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdDataIdentificationPropertyType:
    """
    :ivar md_data_identification:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_DataIdentification_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_data_identification: Optional[MdDataIdentification] = field(
        default=None,
        metadata={
            "name": "MD_DataIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class MdIdentificationPropertyType:
    """
    :ivar md_service_identification:
    :ivar md_data_identification:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Identification_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_service_identification: Optional[MdServiceIdentification] = field(
        default=None,
        metadata={
            "name": "MD_ServiceIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    md_data_identification: Optional[MdDataIdentification] = field(
        default=None,
        metadata={
            "name": "MD_DataIdentification",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractCityObject(AbstractCityObjectType):
    """
    AbstractCityObject is the abstract superclass of all thematic classes within
    the CityGML conceptual model.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractSpaceBoundaryType(AbstractCityObjectType):
    """
    :ivar ade_of_abstract_space_boundary: Augments AbstractSpaceBoundary
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    ade_of_abstract_space_boundary: list[
        AdeofAbstractSpaceBoundaryPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractSpaceBoundary",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class ImplicitGeometryType(AbstractGmltype):
    """
    :ivar transformation_matrix: Specifies the mathematical
        transformation (translation, rotation, and scaling) between the
        prototypical geometry and the actual spatial position of the
        object.
    :ivar mime_type: Specifies the MIME type of the external file that
        stores the prototypical geometry.
    :ivar library_object: Specifies the URI that points to the
        prototypical geometry stored in an external file.
    :ivar reference_point: Relates to a 3D Point geometry that
        represents the base point of the object in the world coordinate
        system.
    :ivar relative_geometry: Relates to a prototypical geometry in a
        local coordinate system stored inline with the city model.
    :ivar appearance: Relates appearances to the ImplicitGeometry.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    transformation_matrix: list[float] = field(
        default_factory=list,
        metadata={
            "name": "transformationMatrix",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "length": 16,
            "tokens": True,
        },
    )
    mime_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "mimeType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    library_object: Optional[str] = field(
        default=None,
        metadata={
            "name": "libraryObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    reference_point: Optional[PointPropertyType] = field(
        default=None,
        metadata={
            "name": "referencePoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )
    relative_geometry: Optional[GeometryPropertyType] = field(
        default=None,
        metadata={
            "name": "relativeGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    appearance: list[AbstractAppearancePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class EngineeringDatum1(EngineeringDatumType):
    """Gml:EngineeringDatum defines the origin of an engineering coordinate
    reference system, and is used in a region around that origin.

    This origin may be fixed with respect to the earth (such as a
    defined point at a construction site), or be a defined point on a
    moving vehicle (such as on a ship or satellite).
    """

    class Meta:
        name = "EngineeringDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticDatum1(GeodeticDatumType):
    """
    Gml:GeodeticDatum is a geodetic datum defines the precise location and
    orientation in 3-dimensional space of a defined ellipsoid (or sphere), or of a
    Cartesian coordinate system centered in this ellipsoid (or sphere).
    """

    class Meta:
        name = "GeodeticDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ImageDatum1(ImageDatumType):
    """Gml:ImageDatum defines the origin of an image coordinate reference system,
    and is used in a local context only.

    For an image datum, the anchor definition is usually either the
    centre of the image or the corner of the image. For more
    information, see ISO 19111 B.3.5.
    """

    class Meta:
        name = "ImageDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalDatumType(TemporalDatumBaseType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    origin: Optional[Origin] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class VerticalDatum1(VerticalDatumType):
    """
    Gml:VerticalDatum is a textual description and/or a set of parameters
    identifying a particular reference level surface used as a zero-height surface,
    including its position with respect to the Earth for any of the height types
    recognized by this International Standard.
    """

    class Meta:
        name = "VerticalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LiLineageType(AbstractObjectType):
    class Meta:
        name = "LI_Lineage_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    statement: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    process_step: list[LiProcessStepPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "processStep",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    source: list[LiSourcePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class AbstractSpaceBoundary(AbstractSpaceBoundaryType):
    """AbstractSpaceBoundary is the abstract superclass for all types of space
    boundaries.

    A space boundary is an entity with areal extent in the real world.
    Space boundaries are objects that bound a Space. They also realize
    the contact between adjacent spaces.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractThematicSurfaceType(AbstractSpaceBoundaryType):
    """
    :ivar area: Specifies qualified areas related to the thematic
        surface.
    :ivar lod0_multi_curve: Relates to a 3D MultiCurve geometry that
        represents the thematic surface in Level of Detail 0.
    :ivar lod0_multi_surface: Relates to a 3D MultiSurface geometry that
        represents the thematic surface in Level of Detail 0.
    :ivar lod1_multi_surface: Relates to a 3D MultiSurface geometry that
        represents the thematic surface in Level of Detail 1.
    :ivar lod2_multi_surface: Relates to a 3D MultiSurface geometry that
        represents the thematic surface in Level of Detail 2.
    :ivar lod3_multi_surface: Relates to a 3D MultiSurface geometry that
        represents the thematic surface in Level of Detail 3.
    :ivar point_cloud: Relates to a 3D PointCloud that represents the
        thematic surface.
    :ivar ade_of_abstract_thematic_surface: Augments
        AbstractThematicSurface with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    area: list[QualifiedAreaPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod0_multi_curve: Optional[MultiCurvePropertyType] = field(
        default=None,
        metadata={
            "name": "lod0MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod0_multi_surface: Optional[MultiSurfacePropertyType] = field(
        default=None,
        metadata={
            "name": "lod0MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod1_multi_surface: Optional[MultiSurfacePropertyType] = field(
        default=None,
        metadata={
            "name": "lod1MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod2_multi_surface: Optional[MultiSurfacePropertyType] = field(
        default=None,
        metadata={
            "name": "lod2MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod3_multi_surface: Optional[MultiSurfacePropertyType] = field(
        default=None,
        metadata={
            "name": "lod3MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    point_cloud: Optional[AbstractPointCloudPropertyType] = field(
        default=None,
        metadata={
            "name": "pointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    ade_of_abstract_thematic_surface: list[
        AdeofAbstractThematicSurfacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class ImplicitGeometry(ImplicitGeometryType):
    """ImplicitGeometry is a geometry representation where the shape is stored only
    once as a prototypical geometry, for example a tree or other vegetation object,
    a traffic light or a traffic sign.

    This prototypic geometry object can be re-used or referenced many
    times, wherever the corresponding feature occurs in the 3D city
    model.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractReliefComponentType(AbstractSpaceBoundaryType):
    """
    :ivar lod: Indicates the Level of Detail of the terrain component.
    :ivar extent: Indicates the geometrical extent of the terrain
        component. The geometrical extent is provided as a 2D Surface
        geometry.
    :ivar ade_of_abstract_relief_component: Augments
        AbstractReliefComponent with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    lod: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
            "required": True,
            "min_inclusive": 0,
            "max_inclusive": 3,
        },
    )
    extent: Optional[SurfacePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    ade_of_abstract_relief_component: list[
        AdeofAbstractReliefComponentPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractReliefComponent",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )


@dataclass
class EngineeringDatumPropertyType:
    """
    Gml:EngineeringDatumPropertyType is a property type for association roles to an
    engineering datum, either referencing or containing the definition of that
    datum.

    :ivar engineering_datum:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    engineering_datum: Optional[EngineeringDatum1] = field(
        default=None,
        metadata={
            "name": "EngineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeodeticDatumPropertyType:
    """
    Gml:GeodeticDatumPropertyType is a property type for association roles to a
    geodetic datum, either referencing or containing the definition of that datum.

    :ivar geodetic_datum:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    geodetic_datum: Optional[GeodeticDatum1] = field(
        default=None,
        metadata={
            "name": "GeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ImageDatumPropertyType:
    """
    Gml:ImageDatumPropertyType is a property type for association roles to an image
    datum, either referencing or containing the definition of that datum.

    :ivar image_datum:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    image_datum: Optional[ImageDatum1] = field(
        default=None,
        metadata={
            "name": "ImageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TemporalDatum1(TemporalDatumType):
    """A gml:TemporalDatum defines the origin of a Temporal Reference System.

    This type omits the "anchorDefinition" and "realizationEpoch"
    elements and adds the "origin" element with the dateTime type.
    """

    class Meta:
        name = "TemporalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalDatumPropertyType:
    """
    Gml:VerticalDatumPropertyType is property type for association roles to a
    vertical datum, either referencing or containing the definition of that datum.

    :ivar vertical_datum:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    vertical_datum: Optional[VerticalDatum1] = field(
        default=None,
        metadata={
            "name": "VerticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class LiLineage(LiLineageType):
    class Meta:
        name = "LI_Lineage"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractThematicSurface(AbstractThematicSurfaceType):
    """
    AbstractThematicSurface is the abstract superclass for all types of thematic
    surfaces.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class ClosureSurfaceType(AbstractThematicSurfaceType):
    """
    :ivar ade_of_closure_surface: Augments the ClosureSurface with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    ade_of_closure_surface: list[AdeofClosureSurfacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class ImplicitGeometryPropertyType:
    """
    :ivar implicit_geometry:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    implicit_geometry: Optional[ImplicitGeometry] = field(
        default=None,
        metadata={
            "name": "ImplicitGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractFillingSurfaceType(AbstractThematicSurfaceType):
    """
    :ivar ade_of_abstract_filling_surface: Augments
        AbstractFillingSurface with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_abstract_filling_surface: list[
        AdeofAbstractFillingSurfacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractFillingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class TimeValuePairType:
    """
    :ivar timestamp: Specifies the timepoint at which the value of the
        TimeValuePair is valid.
    :ivar int_value: Specifies the "Integer" value of the TimeValuePair.
    :ivar double_value: Specifies the "Double" value of the
        TimeValuePair.
    :ivar string_value: Specifies the "String" value of the
        TimeValuePair.
    :ivar geometry_value: Specifies the geometry value of the
        TimeValuePair.
    :ivar uri_value: Specifies the "URI" value of the TimeValuePair.
    :ivar bool_value: Specifies the "Boolean" value of the
        TimeValuePair.
    :ivar implicit_geometry_value: Specifies the "ImplicitGeometry"
        value of the TimeValuePair.
    :ivar appearance_value: Specifies the "Appearance" value of the
        TimeValuePair.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    timestamp: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    int_value: Optional[int] = field(
        default=None,
        metadata={
            "name": "intValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    double_value: Optional[float] = field(
        default=None,
        metadata={
            "name": "doubleValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    string_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "stringValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    geometry_value: Optional[GeometryPropertyType] = field(
        default=None,
        metadata={
            "name": "geometryValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    uri_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "uriValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    bool_value: Optional[bool] = field(
        default=None,
        metadata={
            "name": "boolValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    implicit_geometry_value: Optional[
        "TimeValuePairType.ImplicitGeometryValue"
    ] = field(
        default=None,
        metadata={
            "name": "implicitGeometryValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    appearance_value: Optional["TimeValuePairType.AppearanceValue"] = field(
        default=None,
        metadata={
            "name": "appearanceValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )

    @dataclass
    class ImplicitGeometryValue(AbstractMemberType):
        """
        :ivar implicit_geometry:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        implicit_geometry: Optional[ImplicitGeometry] = field(
            default=None,
            metadata={
                "name": "ImplicitGeometry",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class AppearanceValue(AbstractFeatureMemberType):
        """
        :ivar appearance:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        appearance: Optional[Appearance] = field(
            default=None,
            metadata={
                "name": "Appearance",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class GenericThematicSurfaceType(AbstractThematicSurfaceType):
    """
    :ivar class_value: Indicates the specific type of the
        GenericThematicSurface.
    :ivar function: Specifies the intended purposes of the
        GenericThematicSurface.
    :ivar usage: Specifies the actual uses of the
        GenericThematicSurface.
    :ivar ade_of_generic_thematic_surface: Augments the
        GenericThematicSurface with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    ade_of_generic_thematic_surface: list[
        AdeofGenericThematicSurfacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfGenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )


@dataclass
class LandUseType(AbstractThematicSurfaceType):
    """
    :ivar class_value: Indicates the specific type of the LandUse.
    :ivar function: Specifies the intended purposes of the LandUse.
    :ivar usage: Specifies the actual uses of the LandUse.
    :ivar ade_of_land_use: Augments the LandUse with properties defined
        in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/landuse/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    ade_of_land_use: list[AdeofLandUsePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfLandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )


@dataclass
class AbstractReliefComponent(AbstractReliefComponentType):
    """An AbstractReliefComponent represents an element of the terrain surface - either a TIN, a raster or grid, mass points or break lines."""

    class Meta:
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class BreaklineReliefType(AbstractReliefComponentType):
    """
    :ivar ridge_or_valley_lines: Relates to the 3D MultiCurve geometry
        of the MassPointRelief. This association role is used to
        represent ridge or valley lines.
    :ivar breaklines: Relates to the 3D MultiCurve geometry of the
        MassPointRelief. This association role is used to represent
        break lines.
    :ivar ade_of_breakline_relief: Augments the BreaklineRelief with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    ridge_or_valley_lines: Optional[MultiCurvePropertyType] = field(
        default=None,
        metadata={
            "name": "ridgeOrValleyLines",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    breaklines: Optional[MultiCurvePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    ade_of_breakline_relief: list[AdeofBreaklineReliefPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )


@dataclass
class MassPointReliefType(AbstractReliefComponentType):
    """
    :ivar relief_points: Relates to the 3D MultiPoint geometry of the
        MassPointRelief.
    :ivar point_cloud: Relates to the 3D PointCloud of the
        MassPointRelief.
    :ivar ade_of_mass_point_relief: Augments the MassPointRelief with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    relief_points: Optional[MultiPointPropertyType] = field(
        default=None,
        metadata={
            "name": "reliefPoints",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    point_cloud: Optional[AbstractPointCloudPropertyType] = field(
        default=None,
        metadata={
            "name": "pointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    ade_of_mass_point_relief: list[AdeofMassPointReliefPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfMassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )


@dataclass
class RasterReliefType(AbstractReliefComponentType):
    """
    :ivar grid: Relates to the DiscreteGridPointCoverage of the
        RasterRelief.
    :ivar ade_of_raster_relief: Augments the RasterRelief with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    grid: Optional["RasterReliefType.Grid"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
            "required": True,
        },
    )
    ade_of_raster_relief: list[AdeofRasterReliefPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfRasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )

    @dataclass
    class Grid:
        """
        :ivar rectified_grid_coverage:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        :ivar owns:
        """

        rectified_grid_coverage: Optional[RectifiedGridCoverage] = field(
            default=None,
            metadata={
                "name": "RectifiedGridCoverage",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
        owns: bool = field(
            default=False,
            metadata={
                "type": "Attribute",
            },
        )


@dataclass
class TinreliefType(AbstractReliefComponentType):
    """
    :ivar tin: Relates to the triangulated surface of the TINRelief.
    :ivar ade_of_tinrelief: Augments the TINRelief with properties
        defined in an ADE.
    """

    class Meta:
        name = "TINReliefType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    tin: Optional["TinreliefType.Tin"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
            "required": True,
        },
    )
    ade_of_tinrelief: list[AdeofTinreliefPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfTINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )

    @dataclass
    class Tin:
        """
        :ivar tin:
        :ivar triangulated_surface:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        :ivar owns:
        """

        tin: Optional[Tin] = field(
            default=None,
            metadata={
                "name": "Tin",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
        triangulated_surface: Optional[TriangulatedSurface] = field(
            default=None,
            metadata={
                "name": "TriangulatedSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
        owns: bool = field(
            default=False,
            metadata={
                "type": "Attribute",
            },
        )


@dataclass
class AuxiliaryTrafficAreaType(AbstractThematicSurfaceType):
    """
    :ivar class_value: Indicates the specific type of the
        AuxiliaryTrafficArea.
    :ivar function: Specifies the intended purposes of the
        AuxiliaryTrafficArea.
    :ivar usage: Specifies the actual uses of the AuxiliaryTrafficArea.
    :ivar surface_material: Specifies the type of pavement of the
        AuxiliaryTrafficArea.
    :ivar ade_of_auxiliary_traffic_area: Augments the
        AuxiliaryTrafficArea with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    surface_material: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "surfaceMaterial",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_auxiliary_traffic_area: list[
        AdeofAuxiliaryTrafficAreaPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )


@dataclass
class HoleSurfaceType(AbstractThematicSurfaceType):
    """
    :ivar ade_of_hole_surface: Augments the HoleSurface with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    ade_of_hole_surface: list[AdeofHoleSurfacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfHoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )


@dataclass
class MarkingType(AbstractThematicSurfaceType):
    """
    :ivar class_value: Indicates the specific type of the Marking.
    :ivar ade_of_marking: Augments the Marking with properties defined
        in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_marking: list[AdeofMarkingPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfMarking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )


@dataclass
class TrafficAreaType(AbstractThematicSurfaceType):
    """
    :ivar class_value: Indicates the specific type of the TrafficArea.
    :ivar function: Specifies the intended purposes of the TrafficArea.
    :ivar usage: Specifies the actual uses of the TrafficArea.
    :ivar surface_material: Specifies the type of pavement of the
        TrafficArea.
    :ivar ade_of_traffic_area: Augments the TrafficArea with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    surface_material: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "surfaceMaterial",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_traffic_area: list[AdeofTrafficAreaPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )


@dataclass
class AbstractWaterBoundarySurfaceType(AbstractThematicSurfaceType):
    """
    :ivar ade_of_abstract_water_boundary_surface: Augments
        AbstractWaterBoundarySurface with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"

    ade_of_abstract_water_boundary_surface: list[
        AdeofAbstractWaterBoundarySurfacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractWaterBoundarySurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )


@dataclass
class DatumPropertyType:
    """
    Gml:DatumPropertyType is a property type for association roles to a datum,
    either referencing or containing the definition of that datum.

    :ivar temporal_datum:
    :ivar vertical_datum:
    :ivar image_datum:
    :ivar engineering_datum:
    :ivar geodetic_datum:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    temporal_datum: Optional[TemporalDatum1] = field(
        default=None,
        metadata={
            "name": "TemporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_datum: Optional[VerticalDatum1] = field(
        default=None,
        metadata={
            "name": "VerticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_datum: Optional[ImageDatum1] = field(
        default=None,
        metadata={
            "name": "ImageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_datum: Optional[EngineeringDatum1] = field(
        default=None,
        metadata={
            "name": "EngineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_datum: Optional[GeodeticDatum1] = field(
        default=None,
        metadata={
            "name": "GeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TemporalDatumPropertyType:
    """
    Gml:TemporalDatumPropertyType is a property type for association roles to a
    temporal datum, either referencing or containing the definition of that datum.

    :ivar temporal_datum:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    temporal_datum: Optional[TemporalDatum1] = field(
        default=None,
        metadata={
            "name": "TemporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class EngineeringDatumRef(EngineeringDatumPropertyType):
    class Meta:
        name = "engineeringDatumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EngineeringDatum2(EngineeringDatumPropertyType):
    """
    Gml:engineeringDatum is an association role to the engineering datum used by
    this CRS.
    """

    class Meta:
        name = "engineeringDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticDatumRef(GeodeticDatumPropertyType):
    class Meta:
        name = "geodeticDatumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticDatum2(GeodeticDatumPropertyType):
    """
    Gml:geodeticDatum is an association role to the geodetic datum used by this
    CRS.
    """

    class Meta:
        name = "geodeticDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ImageDatumRef(ImageDatumPropertyType):
    class Meta:
        name = "imageDatumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ImageDatum2(ImageDatumPropertyType):
    """
    Gml:imageDatum is an association role to the image datum used by this CRS.
    """

    class Meta:
        name = "imageDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesEngineeringDatum(EngineeringDatumPropertyType):
    class Meta:
        name = "usesEngineeringDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesGeodeticDatum(GeodeticDatumPropertyType):
    class Meta:
        name = "usesGeodeticDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesImageDatum(ImageDatumPropertyType):
    class Meta:
        name = "usesImageDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesVerticalDatum(VerticalDatumPropertyType):
    class Meta:
        name = "usesVerticalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalDatumRef(VerticalDatumPropertyType):
    class Meta:
        name = "verticalDatumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalDatum2(VerticalDatumPropertyType):
    """
    Gml:verticalDatum is an association role to the vertical datum used by this
    CRS.
    """

    class Meta:
        name = "verticalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LiLineagePropertyType:
    """
    :ivar li_lineage:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "LI_Lineage_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    li_lineage: Optional[LiLineage] = field(
        default=None,
        metadata={
            "name": "LI_Lineage",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class ClosureSurface(ClosureSurfaceType):
    """ClosureSurface is a special type of thematic surface used to close holes in
    volumetric objects.

    Closure surfaces are virtual (non-physical) surfaces.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractFillingSurface(AbstractFillingSurfaceType):
    """
    AbstractFillingSurface is the abstract superclass for different kinds of
    surfaces that seal openings filled by filling elements.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class DoorSurfaceType(AbstractFillingSurfaceType):
    """
    :ivar address: Relates to the addresses that are assigned to the
        DoorSurface.
    :ivar ade_of_door_surface: Augments the DoorSurface with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    address: list[AddressPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ade_of_door_surface: list[AdeofDoorSurfacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfDoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class WindowSurfaceType(AbstractFillingSurfaceType):
    """
    :ivar ade_of_window_surface: Augments the WindowSurface with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_window_surface: list[AdeofWindowSurfacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfWindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class TimeValuePair(TimeValuePairType):
    """A TimeValuePair represents a value that is valid for a given timepoint.

    For each TimeValuePair, only one of the value properties can be used
    mutually exclusive. Which value property has to be provided depends
    on the selected value type in the GenericTimeSeries feature, in
    which the TimeValuePair is included.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class GenericThematicSurface(GenericThematicSurfaceType):
    """
    A GenericThematicSurface is a surface that is not represented by any explicitly
    modelled AbstractThematicSurface subclass within CityGML.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class LandUse(LandUseType):
    """
    A LandUse object is an area of the earth's surface dedicated to a specific land
    use or having a specific land cover with or without vegetation, such as sand,
    rock, mud flats, forest, grasslands, or wetlands.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/landuse/3.0"


@dataclass
class BreaklineRelief(BreaklineReliefType):
    """A BreaklineRelief represents a terrain component with 3D lines.

    These lines denote break lines or ridge/valley lines.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class MassPointRelief(MassPointReliefType):
    """
    A MassPointRelief represents a terrain component as a collection of 3D points.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class RasterRelief(RasterReliefType):
    """
    A RasterRelief represents a terrain component as a regular raster or grid.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class Tinrelief(TinreliefType):
    """
    A TINRelief represents a terrain component as a triangulated irregular network.
    """

    class Meta:
        name = "TINRelief"
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AuxiliaryTrafficArea(AuxiliaryTrafficAreaType):
    """
    An AuxiliaryTrafficArea is the ground surface of an AuxiliaryTrafficSpace.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class HoleSurface(HoleSurfaceType):
    """
    A HoleSurface is a representation of the ground surface of a hole.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class Marking(MarkingType):
    """A Marking is a visible pattern on a transportation area relevant to the
    structuring or restriction of traffic.

    Examples are road markings and markings related to railway or
    waterway traffic.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class TrafficArea(TrafficAreaType):
    """A TrafficArea is the ground surface of a TrafficSpace.

    Traffic areas are the surfaces upon which traffic actually takes
    place.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AbstractWaterBoundarySurface(AbstractWaterBoundarySurfaceType):
    """
    AbstractWaterBoundarySurface is the abstract superclass for all kinds of
    thematic surfaces bounding a water body.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class WaterGroundSurfaceType(AbstractWaterBoundarySurfaceType):
    """
    :ivar ade_of_water_ground_surface: Augments the WaterGroundSurface
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"

    ade_of_water_ground_surface: list[AdeofWaterGroundSurfacePropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfWaterGroundSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
    )


@dataclass
class WaterSurfaceType(AbstractWaterBoundarySurfaceType):
    """
    :ivar water_level: Specifies the level of the WaterSurface.
    :ivar ade_of_water_surface: Augments the WaterSurface with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"

    water_level: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "waterLevel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    ade_of_water_surface: list[AdeofWaterSurfacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfWaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )


@dataclass
class EngineeringCrstype(AbstractCrstype):
    class Meta:
        name = "EngineeringCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_affine_cs: Optional[UsesAffineCs] = field(
        default=None,
        metadata={
            "name": "usesAffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    affine_cs: Optional[AffineCs2] = field(
        default=None,
        metadata={
            "name": "affineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_cartesian_cs: Optional[UsesCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs2] = field(
        default=None,
        metadata={
            "name": "cartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cylindrical_cs: Optional[CylindricalCs2] = field(
        default=None,
        metadata={
            "name": "cylindricalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_cs: Optional[LinearCs2] = field(
        default=None,
        metadata={
            "name": "linearCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polar_cs: Optional[PolarCs2] = field(
        default=None,
        metadata={
            "name": "polarCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_spherical_cs: Optional[UsesSphericalCs] = field(
        default=None,
        metadata={
            "name": "usesSphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    spherical_cs: Optional[SphericalCs2] = field(
        default=None,
        metadata={
            "name": "sphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    user_defined_cs: Optional[UserDefinedCs2] = field(
        default=None,
        metadata={
            "name": "userDefinedCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_cs: Optional[UsesCs] = field(
        default=None,
        metadata={
            "name": "usesCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinate_system: Optional[CoordinateSystem] = field(
        default=None,
        metadata={
            "name": "coordinateSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_engineering_datum: Optional[UsesEngineeringDatum] = field(
        default=None,
        metadata={
            "name": "usesEngineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_datum: Optional[EngineeringDatum2] = field(
        default=None,
        metadata={
            "name": "engineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeocentricCrstype(AbstractCrstype):
    class Meta:
        name = "GeocentricCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_cartesian_cs: Optional[UsesCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_spherical_cs: Optional[UsesSphericalCs] = field(
        default=None,
        metadata={
            "name": "usesSphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_geodetic_datum: Optional[UsesGeodeticDatum] = field(
        default=None,
        metadata={
            "name": "usesGeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class GeodeticCrstype(AbstractCrstype):
    """
    Gml:GeodeticCRS is a coordinate reference system based on a geodetic datum.
    """

    class Meta:
        name = "GeodeticCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_ellipsoidal_cs: Optional[UsesEllipsoidalCs] = field(
        default=None,
        metadata={
            "name": "usesEllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoidal_cs: Optional[EllipsoidalCs2] = field(
        default=None,
        metadata={
            "name": "ellipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_cartesian_cs: Optional[UsesCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs2] = field(
        default=None,
        metadata={
            "name": "cartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_spherical_cs: Optional[UsesSphericalCs] = field(
        default=None,
        metadata={
            "name": "usesSphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    spherical_cs: Optional[SphericalCs2] = field(
        default=None,
        metadata={
            "name": "sphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_geodetic_datum: Optional[UsesGeodeticDatum] = field(
        default=None,
        metadata={
            "name": "usesGeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_datum: Optional[GeodeticDatum2] = field(
        default=None,
        metadata={
            "name": "geodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeographicCrstype(AbstractCrstype):
    class Meta:
        name = "GeographicCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_ellipsoidal_cs: Optional[UsesEllipsoidalCs] = field(
        default=None,
        metadata={
            "name": "usesEllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    uses_geodetic_datum: Optional[UsesGeodeticDatum] = field(
        default=None,
        metadata={
            "name": "usesGeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class ImageCrstype(AbstractCrstype):
    class Meta:
        name = "ImageCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_cartesian_cs: Optional[UsesCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs2] = field(
        default=None,
        metadata={
            "name": "cartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_affine_cs: Optional[UsesAffineCs] = field(
        default=None,
        metadata={
            "name": "usesAffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    affine_cs: Optional[AffineCs2] = field(
        default=None,
        metadata={
            "name": "affineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_oblique_cartesian_cs: Optional[UsesObliqueCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesObliqueCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_image_datum: Optional[UsesImageDatum] = field(
        default=None,
        metadata={
            "name": "usesImageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_datum: Optional[ImageDatum2] = field(
        default=None,
        metadata={
            "name": "imageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class VerticalCrstype(AbstractCrstype):
    class Meta:
        name = "VerticalCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_vertical_cs: Optional[UsesVerticalCs] = field(
        default=None,
        metadata={
            "name": "usesVerticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_cs: Optional[VerticalCs2] = field(
        default=None,
        metadata={
            "name": "verticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_vertical_datum: Optional[UsesVerticalDatum] = field(
        default=None,
        metadata={
            "name": "usesVerticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_datum: Optional[VerticalDatum2] = field(
        default=None,
        metadata={
            "name": "verticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DatumRef(DatumPropertyType):
    class Meta:
        name = "datumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalDatumRef(TemporalDatumPropertyType):
    class Meta:
        name = "temporalDatumRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalDatum2(TemporalDatumPropertyType):
    """
    Gml:temporalDatum is an association role to the temporal datum used by this
    CRS.
    """

    class Meta:
        name = "temporalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesTemporalDatum(TemporalDatumPropertyType):
    class Meta:
        name = "usesTemporalDatum"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DqDataQualityType(AbstractObjectType):
    class Meta:
        name = "DQ_DataQuality_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    scope: Optional[DqScopePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    report: list[DqElementPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    lineage: Optional[LiLineagePropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class ClosureSurfacePropertyType:
    """
    :ivar closure_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    closure_surface: Optional[ClosureSurface] = field(
        default=None,
        metadata={
            "name": "ClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DoorSurface(DoorSurfaceType):
    """
    A DoorSurface is either a boundary surface of a Door feature or a surface that
    seals an opening filled by a door.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class WindowSurface(WindowSurfaceType):
    """
    A WindowSurface is either a boundary surface of a Window feature or a surface
    that seals an opening filled by a window.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class TimeValuePairPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    time_value_pair: Optional[TimeValuePair] = field(
        default=None,
        metadata={
            "name": "TimeValuePair",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )


@dataclass
class GenericThematicSurfacePropertyType:
    """
    :ivar generic_thematic_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    generic_thematic_surface: Optional[GenericThematicSurface] = field(
        default=None,
        metadata={
            "name": "GenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class LandUsePropertyType:
    """
    :ivar land_use:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/landuse/3.0"

    land_use: Optional[LandUse] = field(
        default=None,
        metadata={
            "name": "LandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractReliefComponentPropertyType:
    """
    :ivar tinrelief:
    :ivar raster_relief:
    :ivar mass_point_relief:
    :ivar breakline_relief:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    tinrelief: Optional[Tinrelief] = field(
        default=None,
        metadata={
            "name": "TINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    raster_relief: Optional[RasterRelief] = field(
        default=None,
        metadata={
            "name": "RasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    mass_point_relief: Optional[MassPointRelief] = field(
        default=None,
        metadata={
            "name": "MassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    breakline_relief: Optional[BreaklineRelief] = field(
        default=None,
        metadata={
            "name": "BreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BreaklineReliefPropertyType:
    """
    :ivar breakline_relief:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    breakline_relief: Optional[BreaklineRelief] = field(
        default=None,
        metadata={
            "name": "BreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MassPointReliefPropertyType:
    """
    :ivar mass_point_relief:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    mass_point_relief: Optional[MassPointRelief] = field(
        default=None,
        metadata={
            "name": "MassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class RasterReliefPropertyType:
    """
    :ivar raster_relief:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    raster_relief: Optional[RasterRelief] = field(
        default=None,
        metadata={
            "name": "RasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ReliefFeatureType(AbstractSpaceBoundaryType):
    """
    :ivar lod: Indicates the Level of Detail of the ReliefFeature.
    :ivar relief_component: Relates to the terrain components that are
        part of the ReliefFeature.
    :ivar ade_of_relief_feature: Augments the ReliefFeature with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    lod: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
            "required": True,
            "min_inclusive": 0,
            "max_inclusive": 3,
        },
    )
    relief_component: list["ReliefFeatureType.ReliefComponent"] = field(
        default_factory=list,
        metadata={
            "name": "reliefComponent",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
            "min_occurs": 1,
        },
    )
    ade_of_relief_feature: list[AdeofReliefFeaturePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfReliefFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )

    @dataclass
    class ReliefComponent(AbstractFeatureMemberType):
        """
        :ivar tinrelief:
        :ivar raster_relief:
        :ivar mass_point_relief:
        :ivar breakline_relief:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        tinrelief: Optional[Tinrelief] = field(
            default=None,
            metadata={
                "name": "TINRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        raster_relief: Optional[RasterRelief] = field(
            default=None,
            metadata={
                "name": "RasterRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        mass_point_relief: Optional[MassPointRelief] = field(
            default=None,
            metadata={
                "name": "MassPointRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        breakline_relief: Optional[BreaklineRelief] = field(
            default=None,
            metadata={
                "name": "BreaklineRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class TinreliefPropertyType:
    """
    :ivar tinrelief:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        name = "TINReliefPropertyType"
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    tinrelief: Optional[Tinrelief] = field(
        default=None,
        metadata={
            "name": "TINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AuxiliaryTrafficAreaPropertyType:
    """
    :ivar auxiliary_traffic_area:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class HoleSurfacePropertyType:
    """
    :ivar hole_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    hole_surface: Optional[HoleSurface] = field(
        default=None,
        metadata={
            "name": "HoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class MarkingPropertyType:
    """
    :ivar marking:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    marking: Optional[Marking] = field(
        default=None,
        metadata={
            "name": "Marking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TrafficAreaPropertyType:
    """
    :ivar traffic_area:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    traffic_area: Optional[TrafficArea] = field(
        default=None,
        metadata={
            "name": "TrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class WaterGroundSurface(WaterGroundSurfaceType):
    """
    A WaterGroundSurface represents the exterior boundary surface of the submerged
    bottom of a water body.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class WaterSurface(WaterSurfaceType):
    """
    A WaterSurface represents the upper exterior interface between a water body and
    the atmosphere.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class EngineeringCrs(EngineeringCrstype):
    """Gml:EngineeringCRS is a contextually local coordinate reference system which
    can be divided into two broad categories:

    -       earth-fixed systems applied to engineering activities on or near the surface of the earth;
    -       CRSs on moving platforms such as road vehicles, vessels, aircraft, or spacecraft, see ISO 19111 8.3.
    """

    class Meta:
        name = "EngineeringCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeocentricCrs(GeocentricCrstype):
    class Meta:
        name = "GeocentricCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeodeticCrs(GeodeticCrstype):
    class Meta:
        name = "GeodeticCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeographicCrs(GeographicCrstype):
    class Meta:
        name = "GeographicCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ImageCrs(ImageCrstype):
    """Gml:ImageCRS is an engineering coordinate reference system applied to
    locations in images.

    Image coordinate reference systems are treated as a separate sub-
    type because the definition of the associated image datum contains
    two attributes not relevant to other engineering datums.
    """

    class Meta:
        name = "ImageCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalCrstype(AbstractCrstype):
    class Meta:
        name = "TemporalCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_time_cs: Optional[UsesTimeCs] = field(
        default=None,
        metadata={
            "name": "usesTimeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_cs: Optional[TimeCs2] = field(
        default=None,
        metadata={
            "name": "timeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_temporal_cs: Optional[UsesTemporalCs] = field(
        default=None,
        metadata={
            "name": "usesTemporalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_temporal_datum: Optional[UsesTemporalDatum] = field(
        default=None,
        metadata={
            "name": "usesTemporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_datum: Optional[TemporalDatum2] = field(
        default=None,
        metadata={
            "name": "temporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class VerticalCrs(VerticalCrstype):
    """Gml:VerticalCRS is a 1D coordinate reference system used for recording
    heights or depths.

    Vertical CRSs make use of the direction of gravity to define the
    concept of height or depth, but the relationship with gravity may
    not be straightforward. By implication, ellipsoidal heights (h)
    cannot be captured in a vertical coordinate reference system.
    Ellipsoidal heights cannot exist independently, but only as an
    inseparable part of a 3D coordinate tuple defined in a geographic 3D
    coordinate reference system.
    """

    class Meta:
        name = "VerticalCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DqDataQuality(DqDataQualityType):
    class Meta:
        name = "DQ_DataQuality"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractFillingSurfacePropertyType:
    """
    :ivar window_surface:
    :ivar door_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    window_surface: Optional[WindowSurface] = field(
        default=None,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door_surface: Optional[DoorSurface] = field(
        default=None,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DoorSurfacePropertyType:
    """
    :ivar door_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    door_surface: Optional[DoorSurface] = field(
        default=None,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class WindowSurfacePropertyType:
    """
    :ivar window_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    window_surface: Optional[WindowSurface] = field(
        default=None,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GenericTimeseriesType(AbstractAtomicTimeseriesType):
    """
    :ivar value_type: Indicates the specific type of all time-value-
        pairs that are part of the GenericTimeseries.
    :ivar time_value_pair: Relates to the time-value-pairs that are part
        of the GenericTimeseries.
    :ivar ade_of_generic_timeseries: Augments the GenericTimeseries with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    value_type: Optional[TimeseriesTypeValueType] = field(
        default=None,
        metadata={
            "name": "valueType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    time_value_pair: list[TimeValuePairPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "timeValuePair",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "min_occurs": 1,
        },
    )
    ade_of_generic_timeseries: list[AdeofGenericTimeseriesPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfGenericTimeseries",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
    )


@dataclass
class ReliefFeature(ReliefFeatureType):
    """
    A ReliefFeature is a collection of terrain components representing the Earth's
    surface, also known as the Digital Terrain Model.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/relief/3.0"


@dataclass
class AbstractWaterBoundarySurfacePropertyType:
    """
    :ivar water_surface:
    :ivar water_ground_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"

    water_surface: Optional[WaterSurface] = field(
        default=None,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    water_ground_surface: Optional[WaterGroundSurface] = field(
        default=None,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class WaterGroundSurfacePropertyType:
    """
    :ivar water_ground_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"

    water_ground_surface: Optional[WaterGroundSurface] = field(
        default=None,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class WaterSurfacePropertyType:
    """
    :ivar water_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"

    water_surface: Optional[WaterSurface] = field(
        default=None,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class EngineeringCrspropertyType:
    """
    Gml:EngineeringCRSPropertyType is a property type for association roles to an
    engineering coordinate reference system, either referencing or containing the
    definition of that reference system.

    :ivar engineering_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "EngineeringCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    engineering_crs: Optional[EngineeringCrs] = field(
        default=None,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeocentricCrspropertyType:
    """
    :ivar geocentric_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "GeocentricCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    geocentric_crs: Optional[GeocentricCrs] = field(
        default=None,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeodeticCrspropertyType:
    """
    Gml:GeodeticCRSPropertyType is a property type for association roles to a
    geodetic coordinate reference system, either referencing or containing the
    definition of that reference system.

    :ivar geodetic_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "GeodeticCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    geodetic_crs: Optional[GeodeticCrs] = field(
        default=None,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeographicCrspropertyType:
    """
    :ivar geographic_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "GeographicCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    geographic_crs: Optional[GeographicCrs] = field(
        default=None,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ImageCrspropertyType:
    """
    Gml:ImageCRSPropertyType is a property type for association roles to an image
    coordinate reference system, either referencing or containing the definition of
    that reference system.

    :ivar image_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "ImageCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    image_crs: Optional[ImageCrs] = field(
        default=None,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TemporalCrs(TemporalCrstype):
    """
    Gml:TemporalCRS is a 1D coordinate reference system used for the recording of
    time.
    """

    class Meta:
        name = "TemporalCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCrspropertyType:
    """
    Gml:VerticalCRSPropertyType is a property type for association roles to a
    vertical coordinate reference system, either referencing or containing the
    definition of that reference system.

    :ivar vertical_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "VerticalCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    vertical_crs: Optional[VerticalCrs] = field(
        default=None,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DqDataQualityPropertyType:
    """
    :ivar dq_data_quality:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DQ_DataQuality_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    dq_data_quality: Optional[DqDataQuality] = field(
        default=None,
        metadata={
            "name": "DQ_DataQuality",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractConstructionSurfaceType(AbstractThematicSurfaceType):
    """
    :ivar filling_surface: Relates to the surfaces that seal the
        openings of the construction surface.
    :ivar ade_of_abstract_construction_surface: Augments
        AbstractConstructionSurface with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    filling_surface: list[AbstractFillingSurfacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "fillingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ade_of_abstract_construction_surface: list[
        AdeofAbstractConstructionSurfacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractConstructionSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class GenericTimeseries(GenericTimeseriesType):
    """
    A GenericTimeseries represents time-varying data in the form of embedded time-
    value-pairs of a specific data type for a single contiguous time interval.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class ReliefFeaturePropertyType:
    """
    :ivar relief_feature:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/relief/3.0"

    relief_feature: Optional[ReliefFeature] = field(
        default=None,
        metadata={
            "name": "ReliefFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CrspropertyType:
    """
    Gml:CRSPropertyType is a property type for association roles to a CRS abstract
    coordinate reference system, either referencing or containing the definition of
    that CRS.

    :ivar compound_crs:
    :ivar geocentric_crs:
    :ivar geographic_crs:
    :ivar temporal_crs:
    :ivar image_crs:
    :ivar engineering_crs:
    :ivar vertical_crs:
    :ivar geodetic_crs:
    :ivar derived_crs:
    :ivar projected_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "CRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    compound_crs: Optional["CompoundCrs"] = field(
        default=None,
        metadata={
            "name": "CompoundCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geocentric_crs: Optional[GeocentricCrs] = field(
        default=None,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geographic_crs: Optional[GeographicCrs] = field(
        default=None,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_crs: Optional[TemporalCrs] = field(
        default=None,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_crs: Optional[ImageCrs] = field(
        default=None,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_crs: Optional[EngineeringCrs] = field(
        default=None,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_crs: Optional[VerticalCrs] = field(
        default=None,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_crs: Optional[GeodeticCrs] = field(
        default=None,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_crs: Optional["DerivedCrs"] = field(
        default=None,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    projected_crs: Optional["ProjectedCrs"] = field(
        default=None,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TemporalCrspropertyType:
    """
    Gml:TemporalCRSPropertyType is a property type for association roles to a
    temporal coordinate reference system, either referencing or containing the
    definition of that reference system.

    :ivar temporal_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "TemporalCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    temporal_crs: Optional[TemporalCrs] = field(
        default=None,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class BaseGeodeticCrs(GeodeticCrspropertyType):
    """
    Gml:baseGeodeticCRS is an association role to the geodetic coordinate reference
    system used by this projected CRS.
    """

    class Meta:
        name = "baseGeodeticCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BaseGeographicCrs(GeographicCrspropertyType):
    class Meta:
        name = "baseGeographicCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class EngineeringCrsref(EngineeringCrspropertyType):
    class Meta:
        name = "engineeringCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeocentricCrsref(GeocentricCrspropertyType):
    class Meta:
        name = "geocentricCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeographicCrsref(GeographicCrspropertyType):
    class Meta:
        name = "geographicCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ImageCrsref(ImageCrspropertyType):
    class Meta:
        name = "imageCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class VerticalCrsref(VerticalCrspropertyType):
    class Meta:
        name = "verticalCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MdMetadataType(AbstractObjectType):
    """
    Information about the metadata.
    """

    class Meta:
        name = "MD_Metadata_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    file_identifier: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "fileIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    language: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    character_set: Optional[MdCharacterSetCodePropertyType] = field(
        default=None,
        metadata={
            "name": "characterSet",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    parent_identifier: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "parentIdentifier",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    hierarchy_level: list[MdScopeCodePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "hierarchyLevel",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    hierarchy_level_name: list[CharacterStringPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "hierarchyLevelName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    contact: list[CiResponsiblePartyPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    date_stamp: Optional[DatePropertyType] = field(
        default=None,
        metadata={
            "name": "dateStamp",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "required": True,
        },
    )
    metadata_standard_name: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "metadataStandardName",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    metadata_standard_version: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "metadataStandardVersion",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    data_set_uri: Optional[CharacterStringPropertyType] = field(
        default=None,
        metadata={
            "name": "dataSetURI",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    locale: list[PtLocalePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    spatial_representation_info: list[MdSpatialRepresentationPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "spatialRepresentationInfo",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    reference_system_info: list[MdReferenceSystemPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "referenceSystemInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    metadata_extension_info: list[
        MdMetadataExtensionInformationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "metadataExtensionInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    identification_info: list[MdIdentificationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "identificationInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    content_info: list[MdContentInformationPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "contentInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    distribution_info: Optional[MdDistributionPropertyType] = field(
        default=None,
        metadata={
            "name": "distributionInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    data_quality_info: list[DqDataQualityPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "dataQualityInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    portrayal_catalogue_info: list[
        MdPortrayalCatalogueReferencePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "portrayalCatalogueInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    metadata_constraints: list[MdConstraintsPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "metadataConstraints",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    application_schema_info: list[
        MdApplicationSchemaInformationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "applicationSchemaInfo",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    metadata_maintenance: Optional[MdMaintenanceInformationPropertyType] = (
        field(
            default=None,
            metadata={
                "name": "metadataMaintenance",
                "type": "Element",
                "namespace": "http://www.isotc211.org/2005/gmd",
            },
        )
    )
    series: list["DsAggregatePropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    describes: list["DsDataSetPropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    property_type: list[ObjectReferencePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "propertyType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    feature_type: list[ObjectReferencePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "featureType",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    feature_attribute: list[ObjectReferencePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "featureAttribute",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class AbstractConstructionSurface(AbstractConstructionSurfaceType):
    """
    AbstractConstructionSurface is the abstract superclass for different kinds of
    surfaces that bound a construction.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class CeilingSurfaceType(AbstractConstructionSurfaceType):
    """
    :ivar ade_of_ceiling_surface: Augments the CeilingSurface with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_ceiling_surface: list[AdeofCeilingSurfacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class FloorSurfaceType(AbstractConstructionSurfaceType):
    """
    :ivar ade_of_floor_surface: Augments the FloorSurface with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_floor_surface: list[AdeofFloorSurfacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class GroundSurfaceType(AbstractConstructionSurfaceType):
    """
    :ivar ade_of_ground_surface: Augments the GroundSurface with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_ground_surface: list[AdeofGroundSurfacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class InteriorWallSurfaceType(AbstractConstructionSurfaceType):
    """
    :ivar ade_of_interior_wall_surface: Augments the InteriorWallSurface
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_interior_wall_surface: list[
        AdeofInteriorWallSurfacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfInteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class OuterCeilingSurfaceType(AbstractConstructionSurfaceType):
    """
    :ivar ade_of_outer_ceiling_surface: Augments the OuterCeilingSurface
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_outer_ceiling_surface: list[
        AdeofOuterCeilingSurfacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfOuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class OuterFloorSurfaceType(AbstractConstructionSurfaceType):
    """
    :ivar ade_of_outer_floor_surface: Augments the OuterFloorSurface
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_outer_floor_surface: list[AdeofOuterFloorSurfacePropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfOuterFloorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
    )


@dataclass
class RoofSurfaceType(AbstractConstructionSurfaceType):
    """
    :ivar ade_of_roof_surface: Augments the RoofSurface with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_roof_surface: list[AdeofRoofSurfacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfRoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class WallSurfaceType(AbstractConstructionSurfaceType):
    """
    :ivar ade_of_wall_surface: Augments the WallSurface with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_wall_surface: list[AdeofWallSurfacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class AbstractAtomicTimeseriesPropertyType:
    """
    :ivar tabulated_file_timeseries:
    :ivar standard_file_timeseries:
    :ivar generic_timeseries:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    tabulated_file_timeseries: Optional[TabulatedFileTimeseries] = field(
        default=None,
        metadata={
            "name": "TabulatedFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    standard_file_timeseries: Optional[StandardFileTimeseries] = field(
        default=None,
        metadata={
            "name": "StandardFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    generic_timeseries: Optional[GenericTimeseries] = field(
        default=None,
        metadata={
            "name": "GenericTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractTimeseriesPropertyType:
    """
    :ivar composite_timeseries:
    :ivar tabulated_file_timeseries:
    :ivar standard_file_timeseries:
    :ivar generic_timeseries:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    composite_timeseries: Optional["CompositeTimeseries"] = field(
        default=None,
        metadata={
            "name": "CompositeTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    tabulated_file_timeseries: Optional[TabulatedFileTimeseries] = field(
        default=None,
        metadata={
            "name": "TabulatedFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    standard_file_timeseries: Optional[StandardFileTimeseries] = field(
        default=None,
        metadata={
            "name": "StandardFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    generic_timeseries: Optional[GenericTimeseries] = field(
        default=None,
        metadata={
            "name": "GenericTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GenericTimeseriesPropertyType:
    """
    :ivar generic_timeseries:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    generic_timeseries: Optional[GenericTimeseries] = field(
        default=None,
        metadata={
            "name": "GenericTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CrsRef(CrspropertyType):
    class Meta:
        name = "crsRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ReferenceSystemRef(CrspropertyType):
    class Meta:
        name = "referenceSystemRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SourceCrs(CrspropertyType):
    """
    Gml:sourceCRS is an association role to the source CRS (coordinate reference
    system) of this coordinate operation.
    """

    class Meta:
        name = "sourceCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TargetCrs(CrspropertyType):
    """
    Gml:targetCRS is an association role to the target CRS (coordinate reference
    system) of this coordinate operation.
    """

    class Meta:
        name = "targetCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TemporalCrsref(TemporalCrspropertyType):
    class Meta:
        name = "temporalCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class MdMetadata(MdMetadataType):
    class Meta:
        name = "MD_Metadata"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class CeilingSurface(CeilingSurfaceType):
    """A CeilingSurface is a surface that represents the interior ceiling of a
    construction.

    An example is the ceiling of a room.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class FloorSurface(FloorSurfaceType):
    """A FloorSurface is surface that represents the interior floor of a
    construction.

    An example is the floor of a room.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class GroundSurface(GroundSurfaceType):
    """A GroundSurface is a surface that represents the ground plate of a
    construction.

    The polygon defining the ground plate is congruent with the
    footprint of the construction.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class InteriorWallSurface(InteriorWallSurfaceType):
    """An InteriorWallSurface is a surface that is visible from inside a
    construction.

    An example is the wall of a room.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class OuterCeilingSurface(OuterCeilingSurfaceType):
    """An OuterCeilingSurface is a surface that belongs to the outer building shell
    with the orientation pointing downwards.

    An example is the ceiling of a loggia.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class OuterFloorSurface(OuterFloorSurfaceType):
    """An OuterFloorSurface is a surface that belongs to the outer construction
    shell with the orientation pointing upwards.

    An example is the floor of a loggia.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class RoofSurface(RoofSurfaceType):
    """
    A RoofSurface is a surface that delimits major roof parts of a construction.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class WallSurface(WallSurfaceType):
    """
    A WallSurface is a surface that is part of the building facade visible from the
    outside.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class TimeseriesComponentType:
    """
    :ivar repetitions: Specifies how often the timeseries that is
        referenced by the TimeseriesComponent should be iterated.
    :ivar additional_gap: Specifies how much extra time is added after
        all repetitions as an additional gap.
    :ivar timeseries: Relates a timeseries to the TimeseriesComponent.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    repetitions: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    additional_gap: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "additionalGap",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    timeseries: Optional[AbstractTimeseriesPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )


@dataclass
class AbstractCoordinateOperationType(IdentifiedObjectType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    domain_of_validity: Optional[DomainOfValidity] = field(
        default=None,
        metadata={
            "name": "domainOfValidity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    scope: list[Scope] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    operation_version: Optional[OperationVersion] = field(
        default=None,
        metadata={
            "name": "operationVersion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinate_operation_accuracy: list[CoordinateOperationAccuracy] = field(
        default_factory=list,
        metadata={
            "name": "coordinateOperationAccuracy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    source_crs: Optional[SourceCrs] = field(
        default=None,
        metadata={
            "name": "sourceCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    target_crs: Optional[TargetCrs] = field(
        default=None,
        metadata={
            "name": "targetCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class MdMetadataPropertyType:
    """
    :ivar md_metadata:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "MD_Metadata_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    md_metadata: Optional[MdMetadata] = field(
        default=None,
        metadata={
            "name": "MD_Metadata",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractSpaceBoundaryPropertyType:
    """
    :ivar relief_feature:
    :ivar tinrelief:
    :ivar raster_relief:
    :ivar mass_point_relief:
    :ivar breakline_relief:
    :ivar water_surface:
    :ivar water_ground_surface:
    :ivar traffic_area:
    :ivar marking:
    :ivar hole_surface:
    :ivar auxiliary_traffic_area:
    :ivar land_use:
    :ivar generic_thematic_surface:
    :ivar window_surface:
    :ivar door_surface:
    :ivar wall_surface:
    :ivar roof_surface:
    :ivar outer_floor_surface:
    :ivar outer_ceiling_surface:
    :ivar interior_wall_surface:
    :ivar ground_surface:
    :ivar floor_surface:
    :ivar ceiling_surface:
    :ivar closure_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    relief_feature: Optional[ReliefFeature] = field(
        default=None,
        metadata={
            "name": "ReliefFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    tinrelief: Optional[Tinrelief] = field(
        default=None,
        metadata={
            "name": "TINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    raster_relief: Optional[RasterRelief] = field(
        default=None,
        metadata={
            "name": "RasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    mass_point_relief: Optional[MassPointRelief] = field(
        default=None,
        metadata={
            "name": "MassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    breakline_relief: Optional[BreaklineRelief] = field(
        default=None,
        metadata={
            "name": "BreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    water_surface: Optional[WaterSurface] = field(
        default=None,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    water_ground_surface: Optional[WaterGroundSurface] = field(
        default=None,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    traffic_area: Optional[TrafficArea] = field(
        default=None,
        metadata={
            "name": "TrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    marking: Optional[Marking] = field(
        default=None,
        metadata={
            "name": "Marking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole_surface: Optional[HoleSurface] = field(
        default=None,
        metadata={
            "name": "HoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    land_use: Optional[LandUse] = field(
        default=None,
        metadata={
            "name": "LandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    generic_thematic_surface: Optional[GenericThematicSurface] = field(
        default=None,
        metadata={
            "name": "GenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    window_surface: Optional[WindowSurface] = field(
        default=None,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door_surface: Optional[DoorSurface] = field(
        default=None,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    wall_surface: Optional[WallSurface] = field(
        default=None,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    roof_surface: Optional[RoofSurface] = field(
        default=None,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_floor_surface: Optional[OuterFloorSurface] = field(
        default=None,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
        default=None,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    interior_wall_surface: Optional[InteriorWallSurface] = field(
        default=None,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ground_surface: Optional[GroundSurface] = field(
        default=None,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    floor_surface: Optional[FloorSurface] = field(
        default=None,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ceiling_surface: Optional[CeilingSurface] = field(
        default=None,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    closure_surface: Optional[ClosureSurface] = field(
        default=None,
        metadata={
            "name": "ClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractThematicSurfacePropertyType:
    """
    :ivar water_surface:
    :ivar water_ground_surface:
    :ivar traffic_area:
    :ivar marking:
    :ivar hole_surface:
    :ivar auxiliary_traffic_area:
    :ivar land_use:
    :ivar generic_thematic_surface:
    :ivar window_surface:
    :ivar door_surface:
    :ivar wall_surface:
    :ivar roof_surface:
    :ivar outer_floor_surface:
    :ivar outer_ceiling_surface:
    :ivar interior_wall_surface:
    :ivar ground_surface:
    :ivar floor_surface:
    :ivar ceiling_surface:
    :ivar closure_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    water_surface: Optional[WaterSurface] = field(
        default=None,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    water_ground_surface: Optional[WaterGroundSurface] = field(
        default=None,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    traffic_area: Optional[TrafficArea] = field(
        default=None,
        metadata={
            "name": "TrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    marking: Optional[Marking] = field(
        default=None,
        metadata={
            "name": "Marking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole_surface: Optional[HoleSurface] = field(
        default=None,
        metadata={
            "name": "HoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    land_use: Optional[LandUse] = field(
        default=None,
        metadata={
            "name": "LandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    generic_thematic_surface: Optional[GenericThematicSurface] = field(
        default=None,
        metadata={
            "name": "GenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    window_surface: Optional[WindowSurface] = field(
        default=None,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door_surface: Optional[DoorSurface] = field(
        default=None,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    wall_surface: Optional[WallSurface] = field(
        default=None,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    roof_surface: Optional[RoofSurface] = field(
        default=None,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_floor_surface: Optional[OuterFloorSurface] = field(
        default=None,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
        default=None,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    interior_wall_surface: Optional[InteriorWallSurface] = field(
        default=None,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ground_surface: Optional[GroundSurface] = field(
        default=None,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    floor_surface: Optional[FloorSurface] = field(
        default=None,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ceiling_surface: Optional[CeilingSurface] = field(
        default=None,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    closure_surface: Optional[ClosureSurface] = field(
        default=None,
        metadata={
            "name": "ClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractConstructionSurfacePropertyType:
    """
    :ivar wall_surface:
    :ivar roof_surface:
    :ivar outer_floor_surface:
    :ivar outer_ceiling_surface:
    :ivar interior_wall_surface:
    :ivar ground_surface:
    :ivar floor_surface:
    :ivar ceiling_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    wall_surface: Optional[WallSurface] = field(
        default=None,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    roof_surface: Optional[RoofSurface] = field(
        default=None,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_floor_surface: Optional[OuterFloorSurface] = field(
        default=None,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
        default=None,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    interior_wall_surface: Optional[InteriorWallSurface] = field(
        default=None,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ground_surface: Optional[GroundSurface] = field(
        default=None,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    floor_surface: Optional[FloorSurface] = field(
        default=None,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ceiling_surface: Optional[CeilingSurface] = field(
        default=None,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CeilingSurfacePropertyType:
    """
    :ivar ceiling_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ceiling_surface: Optional[CeilingSurface] = field(
        default=None,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class FloorSurfacePropertyType:
    """
    :ivar floor_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    floor_surface: Optional[FloorSurface] = field(
        default=None,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GroundSurfacePropertyType:
    """
    :ivar ground_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ground_surface: Optional[GroundSurface] = field(
        default=None,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class InteriorWallSurfacePropertyType:
    """
    :ivar interior_wall_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    interior_wall_surface: Optional[InteriorWallSurface] = field(
        default=None,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class OuterCeilingSurfacePropertyType:
    """
    :ivar outer_ceiling_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
        default=None,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class OuterFloorSurfacePropertyType:
    """
    :ivar outer_floor_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    outer_floor_surface: Optional[OuterFloorSurface] = field(
        default=None,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class RoofSurfacePropertyType:
    """
    :ivar roof_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    roof_surface: Optional[RoofSurface] = field(
        default=None,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class WallSurfacePropertyType:
    """
    :ivar wall_surface:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    wall_surface: Optional[WallSurface] = field(
        default=None,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TimeseriesComponent(TimeseriesComponentType):
    """
    TimeseriesComponent represents an element of a CompositeTimeseries.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AbstractCoordinateOperation(AbstractCoordinateOperationType):
    """Gml:AbstractCoordinateOperation is a mathematical operation on coordinates
    that transforms or converts coordinates to another coordinate reference system.

    Many but not all coordinate operations (from CRS A to CRS B) also
    uniquely define the inverse operation (from CRS B to CRS A). In some
    cases, the operation method algorithm for the inverse operation is
    the same as for the forward algorithm, but the signs of some
    operation parameter values shall be reversed. In other cases,
    different algorithms are required for the forward and inverse
    operations, but the same operation parameter values are used. If
    (some) entirely different parameter values are needed, a different
    coordinate operation shall be defined. The optional
    coordinateOperationAccuracy property elements provide estimates of
    the impact of this coordinate operation on point position accuracy.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeneralConversionType(AbstractCoordinateOperationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    operation_version: Any = field(
        init=False,
        default=None,
        metadata={
            "type": "Ignore",
        },
    )
    source_crs: Any = field(
        init=False,
        default=None,
        metadata={
            "type": "Ignore",
        },
    )
    target_crs: Any = field(
        init=False,
        default=None,
        metadata={
            "type": "Ignore",
        },
    )


@dataclass
class AbstractGeneralTransformationType(AbstractCoordinateOperationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    operation_version: Optional[OperationVersion] = field(
        default=None,
        metadata={
            "name": "operationVersion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    source_crs: Optional[SourceCrs] = field(
        default=None,
        metadata={
            "name": "sourceCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    target_crs: Optional[TargetCrs] = field(
        default=None,
        metadata={
            "name": "targetCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )


@dataclass
class AbstractOperation(AbstractCoordinateOperationType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSingleOperation(AbstractCoordinateOperationType):
    """
    Gml:AbstractSingleOperation is a single (not concatenated) coordinate
    operation.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractDsAggregateType(AbstractObjectType):
    """
    Identifiable collection of datasets.
    """

    class Meta:
        name = "AbstractDS_Aggregate_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    composed_of: list["DsDataSetPropertyType"] = field(
        default_factory=list,
        metadata={
            "name": "composedOf",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    series_metadata: list[MdMetadataPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "seriesMetadata",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    subset: list["DsAggregatePropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    superset: list["DsAggregatePropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class AbstractSpaceType(AbstractCityObjectType):
    """
    :ivar space_type: Specifies the degree of openness of a space.
    :ivar volume: Specifies qualified volumes related to the space.
    :ivar area: Specifies qualified areas related to the space.
    :ivar boundary: Relates to surfaces that bound the space.
    :ivar lod0_point: Relates to a 3D Point geometry that represents the
        space in Level of Detail 0.
    :ivar lod0_multi_surface: Relates to a 3D MultiSurface geometry that
        represents the space in Level of Detail 0.
    :ivar lod0_multi_curve: Relates to a 3D MultiCurve geometry that
        represents the space in Level of Detail 0.
    :ivar lod1_solid: Relates to a 3D Solid geometry that represents the
        space in Level of Detail 1.
    :ivar lod2_solid: Relates to a 3D Solid geometry that represents the
        space in Level of Detail 2.
    :ivar lod2_multi_surface: Relates to a 3D MultiSurface geometry that
        represents the space in Level of Detail 2.
    :ivar lod2_multi_curve: Relates to a 3D MultiCurve geometry that
        represents the space in Level of Detail 2.
    :ivar lod3_solid: Relates to a 3D Solid geometry that represents the
        space in Level of Detail 3.
    :ivar lod3_multi_surface: Relates to a 3D MultiSurface geometry that
        represents the space in Level of Detail 3.
    :ivar lod3_multi_curve: Relates to a 3D MultiCurve geometry that
        represents the space in Level of Detail 3.
    :ivar ade_of_abstract_space: Augments AbstractSpace with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    space_type: Optional[SpaceTypeType] = field(
        default=None,
        metadata={
            "name": "spaceType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    volume: list[QualifiedVolumePropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    area: list[QualifiedAreaPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    boundary: list[AbstractSpaceBoundaryPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod0_point: Optional[PointPropertyType] = field(
        default=None,
        metadata={
            "name": "lod0Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod0_multi_surface: Optional[MultiSurfacePropertyType] = field(
        default=None,
        metadata={
            "name": "lod0MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod0_multi_curve: Optional[MultiCurvePropertyType] = field(
        default=None,
        metadata={
            "name": "lod0MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod1_solid: Optional[SolidPropertyType] = field(
        default=None,
        metadata={
            "name": "lod1Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod2_solid: Optional[SolidPropertyType] = field(
        default=None,
        metadata={
            "name": "lod2Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod2_multi_surface: Optional[MultiSurfacePropertyType] = field(
        default=None,
        metadata={
            "name": "lod2MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod2_multi_curve: Optional[MultiCurvePropertyType] = field(
        default=None,
        metadata={
            "name": "lod2MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod3_solid: Optional[SolidPropertyType] = field(
        default=None,
        metadata={
            "name": "lod3Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod3_multi_surface: Optional[MultiSurfacePropertyType] = field(
        default=None,
        metadata={
            "name": "lod3MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod3_multi_curve: Optional[MultiCurvePropertyType] = field(
        default=None,
        metadata={
            "name": "lod3MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    ade_of_abstract_space: list[AdeofAbstractSpacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class TimeseriesComponentPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    timeseries_component: Optional[TimeseriesComponent] = field(
        default=None,
        metadata={
            "name": "TimeseriesComponent",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )


@dataclass
class AbstractGeneralConversion(AbstractGeneralConversionType):
    """Gm:AbstractGeneralConversion is an abstract operation on coordinates that
    does not include any change of datum.

    The best-known example of a coordinate conversion is a map projection. The parameters describing coordinate conversions are defined rather than empirically derived. Note that some conversions have no parameters. The operationVersion, sourceCRS, and targetCRS elements are omitted in a coordinate conversion.
    This abstract complex type is expected to be extended for well-known operation methods with many Conversion instances, in GML Application Schemas that define operation-method-specialized element names and contents. This conversion uses an operation method, usually with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references the "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include zero or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeneralTransformation(AbstractGeneralTransformationType):
    """Gml:AbstractGeneralTransformation is an abstract operation on coordinates
    that usually includes a change of Datum.

    The parameters of a coordinate transformation are empirically derived from data containing the coordinates of a series of points in both coordinate reference systems. This computational process is usually "over-determined", allowing derivation of error (or accuracy) estimates for the transformation. Also, the stochastic nature of the parameters may result in multiple (different) versions of the same coordinate transformation. The operationVersion, sourceCRS, and targetCRS proeprty elements are mandatory in a coordinate transformation.
    This abstract complex type is expected to be extended for well-known operation methods with many Transformation instances, in Application Schemas that define operation-method-specialized value element names and contents. This transformation uses an operation method with associated parameter values. However, operation methods and parameter values are directly associated with concrete subtypes, not with this abstract type. All concrete types derived from this type shall extend this type to include a "usesMethod" element that references one "OperationMethod" element. Similarly, all concrete types derived from this type shall extend this type to include one or more elements each named "uses...Value" that each use the type of an element substitutable for the "AbstractGeneralParameterValue" element.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ConversionType(AbstractGeneralConversionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_method: Optional[UsesMethod] = field(
        default=None,
        metadata={
            "name": "usesMethod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    method: Optional[Method] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    includes_value: list[IncludesValue] = field(
        default_factory=list,
        metadata={
            "name": "includesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_value: list[UsesValue] = field(
        default_factory=list,
        metadata={
            "name": "usesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value: list[ParameterValue2] = field(
        default_factory=list,
        metadata={
            "name": "parameterValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TransformationType(AbstractGeneralTransformationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_method: Optional[UsesMethod] = field(
        default=None,
        metadata={
            "name": "usesMethod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    method: Optional[Method] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    includes_value: list[IncludesValue] = field(
        default_factory=list,
        metadata={
            "name": "includesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_value: list[UsesValue] = field(
        default_factory=list,
        metadata={
            "name": "usesValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value: list[ParameterValue2] = field(
        default_factory=list,
        metadata={
            "name": "parameterValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractDsAggregate(AbstractDsAggregateType):
    class Meta:
        name = "AbstractDS_Aggregate"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsInitiativeType(AbstractDsAggregateType):
    class Meta:
        name = "DS_Initiative_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsOtherAggregateType(AbstractDsAggregateType):
    class Meta:
        name = "DS_OtherAggregate_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsSeriesType(AbstractDsAggregateType):
    class Meta:
        name = "DS_Series_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractLogicalSpaceType(AbstractSpaceType):
    """
    :ivar ade_of_abstract_logical_space: Augments AbstractLogicalSpace
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    ade_of_abstract_logical_space: list[
        AdeofAbstractLogicalSpacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class AbstractPhysicalSpaceType(AbstractSpaceType):
    """
    :ivar lod1_terrain_intersection_curve: Relates to a 3D MultiCurve
        geometry that represents the terrain intersection curve of the
        physical space in Level of Detail 1.
    :ivar lod2_terrain_intersection_curve: Relates to a 3D MultiCurve
        geometry that represents the terrain intersection curve of the
        physical space in Level of Detail 2.
    :ivar lod3_terrain_intersection_curve: Relates to a 3D MultiCurve
        geometry that represents the terrain intersection curve of the
        physical space in Level of Detail 3.
    :ivar point_cloud: Relates to a 3D PointCloud that represents the
        physical space.
    :ivar ade_of_abstract_physical_space: Augments AbstractPhysicalSpace
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    lod1_terrain_intersection_curve: Optional[MultiCurvePropertyType] = field(
        default=None,
        metadata={
            "name": "lod1TerrainIntersectionCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod2_terrain_intersection_curve: Optional[MultiCurvePropertyType] = field(
        default=None,
        metadata={
            "name": "lod2TerrainIntersectionCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    lod3_terrain_intersection_curve: Optional[MultiCurvePropertyType] = field(
        default=None,
        metadata={
            "name": "lod3TerrainIntersectionCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    point_cloud: Optional[AbstractPointCloudPropertyType] = field(
        default=None,
        metadata={
            "name": "pointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    ade_of_abstract_physical_space: list[
        AdeofAbstractPhysicalSpacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractPhysicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class AbstractSpace(AbstractSpaceType):
    """AbstractSpace is the abstract superclass for all types of spaces.

    A space is an entity of volumetric extent in the real world.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class CompositeTimeseriesType(AbstractTimeseriesType):
    """
    :ivar component: Relates to the atomic and composite timeseries that
        are part of the CompositeTimeseries. The referenced timeseries
        are sequentially ordered.
    :ivar ade_of_composite_timeseries: Augments the CompositeTimeseries
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    component: list[TimeseriesComponentPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "min_occurs": 1,
        },
    )
    ade_of_composite_timeseries: list[AdeofCompositeTimeseriesPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfCompositeTimeseries",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
    )


@dataclass
class Conversion1(ConversionType):
    """Gml:Conversion is a concrete operation on coordinates that does not include
    any change of Datum.

    The best-known example of a coordinate conversion is a map
    projection. The parameters describing coordinate conversions are
    defined rather than empirically derived. Note that some conversions
    have no parameters. This concrete complex type can be used without
    using a GML Application Schema that defines operation-method-
    specialized element names and contents, especially for methods with
    only one Conversion instance. The usesValue property elements are an
    unordered list of composition associations to the set of parameter
    values used by this conversion operation.
    """

    class Meta:
        name = "Conversion"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Transformation(TransformationType):
    """Gml:Transformation is a concrete object element derived from
    gml:GeneralTransformation (13.6.2.13).

    This concrete object can be used for all operation methods, without
    using a GML Application Schema that defines operation-method-
    specialized element names and contents, especially for methods with
    only one Transformation instance. The parameterValue elements are an
    unordered list of composition associations to the set of parameter
    values used by this conversion operation.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DsInitiative(DsInitiativeType):
    class Meta:
        name = "DS_Initiative"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsOtherAggregate(DsOtherAggregateType):
    class Meta:
        name = "DS_OtherAggregate"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsPlatformType(DsSeriesType):
    class Meta:
        name = "DS_Platform_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsProductionSeriesType(DsSeriesType):
    class Meta:
        name = "DS_ProductionSeries_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsSensorType(DsSeriesType):
    class Meta:
        name = "DS_Sensor_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsSeries(DsSeriesType):
    class Meta:
        name = "DS_Series"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsStereoMateType(DsOtherAggregateType):
    class Meta:
        name = "DS_StereoMate_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractLogicalSpace(AbstractLogicalSpaceType):
    """AbstractLogicalSpace is the abstract superclass for all types of logical
    spaces.

    Logical space refers to spaces that are not bounded by physical
    surfaces but are defined according to thematic considerations.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractOccupiedSpaceType(AbstractPhysicalSpaceType):
    """
    :ivar lod1_implicit_representation: Relates to an implicit geometry
        that represents the occupied space in Level of Detail 1.
    :ivar lod2_implicit_representation: Relates to an implicit geometry
        that represents the occupied space in Level of Detail 2.
    :ivar lod3_implicit_representation: Relates to an implicit geometry
        that represents the occupied space in Level of Detail 3.
    :ivar ade_of_abstract_occupied_space: Augments AbstractOccupiedSpace
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    lod1_implicit_representation: Optional[ImplicitGeometryPropertyType] = (
        field(
            default=None,
            metadata={
                "name": "lod1ImplicitRepresentation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
    )
    lod2_implicit_representation: Optional[ImplicitGeometryPropertyType] = (
        field(
            default=None,
            metadata={
                "name": "lod2ImplicitRepresentation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
    )
    lod3_implicit_representation: Optional[ImplicitGeometryPropertyType] = (
        field(
            default=None,
            metadata={
                "name": "lod3ImplicitRepresentation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
    )
    ade_of_abstract_occupied_space: list[
        AdeofAbstractOccupiedSpacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class AbstractPhysicalSpace(AbstractPhysicalSpaceType):
    """AbstractPhysicalSpace is the abstract superclass for all types of physical
    spaces.

    Physical space refers to spaces that are fully or partially bounded
    by physical objects.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractUnoccupiedSpaceType(AbstractPhysicalSpaceType):
    """
    :ivar ade_of_abstract_unoccupied_space: Augments
        AbstractUnoccupiedSpace with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    ade_of_abstract_unoccupied_space: list[
        AdeofAbstractUnoccupiedSpacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )


@dataclass
class AbstractBuildingSubdivisionType(AbstractLogicalSpaceType):
    """
    :ivar class_value: Indicates the specific type of the building
        subdivision.
    :ivar function: Specifies the intended purposes of the building
        subdivision.
    :ivar usage: Specifies the actual uses of the building subdivision.
    :ivar elevation: Specifies qualified elevations of the building
        subdivision in relation to a well-defined surface which is
        commonly taken as origin (e.g. geoid or water level). [cf.
        INSPIRE]
    :ivar sort_key: Defines an order among the objects that belong to
        the building subdivision. An example is the sorting of storeys.
    :ivar building_constructive_element: Relates the constructive
        elements to the building subdivision.
    :ivar building_furniture: Relates the furniture objects to the
        building subdivision.
    :ivar building_installation: Relates the installation objects to the
        building subdivision.
    :ivar building_room: Relates the rooms to the building subdivision.
    :ivar ade_of_abstract_building_subdivision: Augments
        AbstractBuildingSubdivision with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    elevation: list[ElevationPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    sort_key: Optional[float] = field(
        default=None,
        metadata={
            "name": "sortKey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_constructive_element: list[ReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "buildingConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_furniture: list[
        "AbstractBuildingSubdivisionType.BuildingFurniture"
    ] = field(
        default_factory=list,
        metadata={
            "name": "buildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_installation: list[
        "AbstractBuildingSubdivisionType.BuildingInstallation"
    ] = field(
        default_factory=list,
        metadata={
            "name": "buildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_room: list[ReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "buildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    ade_of_abstract_building_subdivision: list[
        AdeofAbstractBuildingSubdivisionPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractBuildingSubdivision",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )

    @dataclass
    class BuildingFurniture(AbstractFeatureMemberType):
        """
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class BuildingInstallation(AbstractFeatureMemberType):
        """
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class CompositeTimeseries(CompositeTimeseriesType):
    """A CompositeTimeseries is a (possibly recursive) aggregation of atomic and
    composite timeseries.

    The components of a composite timeseries must have non-overlapping
    time intervals.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class GenericLogicalSpaceType(AbstractLogicalSpaceType):
    """
    :ivar class_value: Indicates the specific type of the
        GenericLogicalSpace.
    :ivar function: Specifies the intended purposes of the
        GenericLogicalSpace.
    :ivar usage: Specifies the actual uses of the GenericLogicalSpace.
    :ivar ade_of_generic_logical_space: Augments the GenericLogicalSpace
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    ade_of_generic_logical_space: list[
        AdeofGenericLogicalSpacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfGenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )


@dataclass
class ConversionPropertyType:
    """
    Gml:ConversionPropertyType is a property type for association roles to a
    concrete general-purpose conversion, either referencing or containing the
    definition of that conversion.

    :ivar conversion:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class CoordinateOperationPropertyType:
    """
    Gml:CoordinateOperationPropertyType is a property type for association roles to
    a coordinate operation, either referencing or containing the definition of that
    coordinate operation.

    :ivar concatenated_operation:
    :ivar transformation:
    :ivar conversion:
    :ivar pass_through_operation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    concatenated_operation: Optional["ConcatenatedOperation"] = field(
        default=None,
        metadata={
            "name": "ConcatenatedOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pass_through_operation: Optional["PassThroughOperation"] = field(
        default=None,
        metadata={
            "name": "PassThroughOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeneralConversionPropertyType:
    """
    Gml:GeneralConversionPropertyType is a property type for association roles to a
    general conversion, either referencing or containing the definition of that
    conversion.

    :ivar conversion:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class GeneralTransformationPropertyType:
    """
    Gml:GeneralTransformationPropertyType is a property type for association roles
    to a general transformation, either referencing or containing the definition of
    that transformation.

    :ivar transformation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class OperationPropertyType:
    """
    :ivar transformation:
    :ivar conversion:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TransformationPropertyType:
    """
    Gml:TransformationPropertyType is a property type for association roles to a
    transformation, either referencing or containing the definition of that
    transformation.

    :ivar transformation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DsInitiativePropertyType:
    """
    :ivar ds_initiative:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DS_Initiative_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_initiative: Optional[DsInitiative] = field(
        default=None,
        metadata={
            "name": "DS_Initiative",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsPlatform(DsPlatformType):
    class Meta:
        name = "DS_Platform"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsProductionSeries(DsProductionSeriesType):
    class Meta:
        name = "DS_ProductionSeries"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsSensor(DsSensorType):
    class Meta:
        name = "DS_Sensor"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class DsStereoMate(DsStereoMateType):
    class Meta:
        name = "DS_StereoMate"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class AbstractOccupiedSpace(AbstractOccupiedSpaceType):
    """AbstractOccupiedSpace is the abstract superclass for all types of physically
    occupied spaces.

    Occupied space refers to spaces that are partially or entirely
    filled with matter.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class AbstractUnoccupiedSpace(AbstractUnoccupiedSpaceType):
    """AbstractUnoccupiedSpace is the abstract superclass for all types of
    physically unoccupied spaces.

    Unoccupied space refers to spaces that are entirely or mostly free
    of matter.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class BridgeRoomType(AbstractUnoccupiedSpaceType):
    """
    :ivar class_value: Indicates the specific type of the BridgeRoom.
    :ivar function: Specifies the intended purposes of the BridgeRoom.
    :ivar usage: Specifies the actual uses of the BridgeRoom.
    :ivar bridge_furniture: Relates the furniture objects to the
        BridgeRoom.
    :ivar bridge_installation: Relates to the installation objects to
        the BridgeRoom.
    :ivar ade_of_bridge_room: Augments the BridgeRoom with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge_furniture: list["BridgeRoomType.BridgeFurniture"] = field(
        default_factory=list,
        metadata={
            "name": "bridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge_installation: list["BridgeRoomType.BridgeInstallation"] = field(
        default_factory=list,
        metadata={
            "name": "bridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    ade_of_bridge_room: list[AdeofBridgeRoomPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )

    @dataclass
    class BridgeFurniture(AbstractFeatureMemberType):
        """
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class BridgeInstallation(AbstractFeatureMemberType):
        """
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class AbstractBuildingSubdivision(AbstractBuildingSubdivisionType):
    """
    AbstractBuildingSubdivision is the abstract superclass for different kinds of
    logical building subdivisions.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class BuildingRoomType(AbstractUnoccupiedSpaceType):
    """
    :ivar class_value: Indicates the specific type of the BuildingRoom.
    :ivar function: Specifies the intended purposes of the BuildingRoom.
    :ivar usage: Specifies the actual uses of the BuildingRoom.
    :ivar room_height: Specifies qualified heights of the BuildingRoom.
    :ivar building_furniture: Relates the furniture objects to the
        BuildingRoom.
    :ivar building_installation: Relates the installation objects to the
        BuildingRoom.
    :ivar ade_of_building_room: Augments the BuildingRoom with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    room_height: list[RoomHeightPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "roomHeight",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_furniture: list["BuildingRoomType.BuildingFurniture"] = field(
        default_factory=list,
        metadata={
            "name": "buildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_installation: list["BuildingRoomType.BuildingInstallation"] = (
        field(
            default_factory=list,
            metadata={
                "name": "buildingInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    ade_of_building_room: list[AdeofBuildingRoomPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )

    @dataclass
    class BuildingFurniture(AbstractFeatureMemberType):
        """
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class BuildingInstallation(AbstractFeatureMemberType):
        """
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class BuildingUnitType(AbstractBuildingSubdivisionType):
    """
    :ivar storey: Relates to the storeys on which the BuildingUnit is
        located.
    :ivar address: Relates to the addresses that are assigned to the
        BuildingUnit.
    :ivar ade_of_building_unit: Augments the BuildingUnit with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    storey: list[ReferenceType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    address: list[AddressPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    ade_of_building_unit: list[AdeofBuildingUnitPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )


@dataclass
class StoreyType(AbstractBuildingSubdivisionType):
    """
    :ivar building_unit: Relates to the building units that belong to
        the Storey.
    :ivar ade_of_storey: Augments the Storey with properties defined in
        an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    building_unit: list[ReferenceType] = field(
        default_factory=list,
        metadata={
            "name": "buildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    ade_of_storey: list[AdeofStoreyPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfStorey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )


@dataclass
class CityFurnitureType(AbstractOccupiedSpaceType):
    """
    :ivar class_value: Indicates the specific type of the CityFurniture.
    :ivar function: Specifies the intended purposes of the
        CityFurniture.
    :ivar usage: Specifies the actual uses of the CityFurniture.
    :ivar ade_of_city_furniture: Augments the CityFurniture with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/cityfurniture/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    ade_of_city_furniture: list[AdeofCityFurniturePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfCityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )


@dataclass
class AbstractConstructionType(AbstractOccupiedSpaceType):
    """
    :ivar condition_of_construction: Indicates the life-cycle status of
        the construction. [cf. INSPIRE]
    :ivar date_of_construction: Indicates the date at which the
        construction was completed.
    :ivar date_of_demolition: Indicates the date at which the
        construction was demolished.
    :ivar construction_event: Describes specific events in the life-time
        of the construction.
    :ivar elevation: Specifies qualified elevations of the construction
        in relation to a well-defined surface which is commonly taken as
        origin (e.g. geoid or water level). [cf. INSPIRE]
    :ivar height: Specifies qualified heights of the construction above
        ground or below ground. [cf. INSPIRE]
    :ivar occupancy: Provides qualified information on the residency of
        persons, animals, or other moveable objects in the construction.
    :ivar ade_of_abstract_construction: Augments AbstractConstruction
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    condition_of_construction: Optional[ConditionOfConstructionValueType] = (
        field(
            default=None,
            metadata={
                "name": "conditionOfConstruction",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
    )
    date_of_construction: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "dateOfConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    date_of_demolition: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "dateOfDemolition",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    construction_event: list[ConstructionEventPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "constructionEvent",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    elevation: list[ElevationPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    height: list[HeightPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    occupancy: list[OccupancyPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ade_of_abstract_construction: list[
        AdeofAbstractConstructionPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class AbstractFillingElementType(AbstractOccupiedSpaceType):
    """
    :ivar ade_of_abstract_filling_element: Augments
        AbstractFillingElement with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_abstract_filling_element: list[
        AdeofAbstractFillingElementPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractFillingElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class AbstractFurnitureType(AbstractOccupiedSpaceType):
    """
    :ivar ade_of_abstract_furniture: Augments AbstractFurniture with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    ade_of_abstract_furniture: list[AdeofAbstractFurniturePropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfAbstractFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
    )


@dataclass
class AbstractInstallationType(AbstractOccupiedSpaceType):
    """
    :ivar relation_to_construction: Indicates whether the installation
        is located inside and/or outside of the construction.
    :ivar ade_of_abstract_installation: Augments AbstractInstallation
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    relation_to_construction: Optional[RelationToConstructionType] = field(
        default=None,
        metadata={
            "name": "relationToConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ade_of_abstract_installation: list[
        AdeofAbstractInstallationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class CompositeTimeseriesPropertyType:
    """
    :ivar composite_timeseries:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    composite_timeseries: Optional[CompositeTimeseries] = field(
        default=None,
        metadata={
            "name": "CompositeTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GenericLogicalSpace(GenericLogicalSpaceType):
    """
    A GenericLogicalSpace is a space that is not represented by any explicitly
    modelled AbstractLogicalSpace subclass within CityGML.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class GenericOccupiedSpaceType(AbstractOccupiedSpaceType):
    """
    :ivar class_value: Indicates the specific type of the
        GenericOccupiedSpace.
    :ivar function: Specifies the intended purposes of the
        GenericOccupiedSpace.
    :ivar usage: Specifies the actual uses of the GenericOccupiedSpace.
    :ivar ade_of_generic_occupied_space: Augments the
        GenericOccupiedSpace with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    ade_of_generic_occupied_space: list[
        AdeofGenericOccupiedSpacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfGenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )


@dataclass
class GenericUnoccupiedSpaceType(AbstractUnoccupiedSpaceType):
    """
    :ivar class_value: Indicates the specific type of the
        GenericUnoccupiedSpace.
    :ivar function: Specifies the intended purposes of the
        GenericUnoccupiedSpace.
    :ivar usage: Specifies the actual uses of the
        GenericUnoccupiedSpace.
    :ivar ade_of_generic_unoccupied_space: Augments the
        GenericUnoccupiedSpace with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    ade_of_generic_unoccupied_space: list[
        AdeofGenericUnoccupiedSpacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfGenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )


@dataclass
class AuxiliaryTrafficSpaceType(AbstractUnoccupiedSpaceType):
    """
    :ivar class_value: Indicates the specific type of the
        AuxiliaryTrafficSpace.
    :ivar function: Specifies the intended purposes of the
        AuxiliaryTrafficSpace.
    :ivar usage: Specifies the actual uses of the AuxiliaryTrafficSpace.
    :ivar granularity: Defines whether auxiliary traffic spaces are
        represented by individual ways or by individual lanes, depending
        on the desired level of spatial and semantic decomposition.
    :ivar ade_of_auxiliary_traffic_space: Augments the
        AuxiliaryTrafficSpace with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    granularity: Optional[GranularityValueType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "required": True,
        },
    )
    ade_of_auxiliary_traffic_space: list[
        AdeofAuxiliaryTrafficSpacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )


@dataclass
class ClearanceSpaceType(AbstractUnoccupiedSpaceType):
    """
    :ivar class_value: Indicates the specific type of the
        ClearanceSpace.
    :ivar ade_of_clearance_space: Augments the ClearanceSpace with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: list[CodeType] = field(
        default_factory=list,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_clearance_space: list[AdeofClearanceSpacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )


@dataclass
class HoleType(AbstractUnoccupiedSpaceType):
    """
    :ivar class_value: Indicates the specific type of the Hole.
    :ivar ade_of_hole: Augments the Hole with properties defined in an
        ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_hole: list[AdeofHolePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfHole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )


@dataclass
class HollowSpaceType(AbstractUnoccupiedSpaceType):
    """
    :ivar class_value: Indicates the specific type of the HollowSpace.
    :ivar function: Specifies the intended purposes of the HollowSpace.
    :ivar usage: Specifies the actual uses of the HollowSpace.
    :ivar tunnel_furniture: Relates the furniture objects to the
        HollowSpace.
    :ivar tunnel_installation: Relates the installation objects to the
        HollowSpace.
    :ivar ade_of_hollow_space: Augments the HollowSpace with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel_furniture: list["HollowSpaceType.TunnelFurniture"] = field(
        default_factory=list,
        metadata={
            "name": "tunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel_installation: list["HollowSpaceType.TunnelInstallation"] = field(
        default_factory=list,
        metadata={
            "name": "tunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    ade_of_hollow_space: list[AdeofHollowSpacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfHollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )

    @dataclass
    class TunnelFurniture(AbstractFeatureMemberType):
        """
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class TunnelInstallation(AbstractFeatureMemberType):
        """
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class AbstractVegetationObjectType(AbstractOccupiedSpaceType):
    """
    :ivar ade_of_abstract_vegetation_object: Augments
        AbstractVegetationObject with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"

    ade_of_abstract_vegetation_object: list[
        AdeofAbstractVegetationObjectPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )


@dataclass
class WaterBodyType(AbstractOccupiedSpaceType):
    """
    :ivar class_value: Indicates the specific type of the WaterBody.
    :ivar function: Specifies the intended purposes of the WaterBody.
    :ivar usage: Specifies the actual uses of the WaterBody.
    :ivar ade_of_water_body: Augments the WaterBody with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    ade_of_water_body: list[AdeofWaterBodyPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfWaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )


@dataclass
class ConversionRef(ConversionPropertyType):
    class Meta:
        name = "conversionRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Conversion2(GeneralConversionPropertyType):
    """
    Gml:conversion is an association role to the coordinate conversion used to
    define the derived CRS.
    """

    class Meta:
        name = "conversion"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordOperation(CoordinateOperationPropertyType):
    """
    Gml:coordOperation is an association role to a coordinate operation.
    """

    class Meta:
        name = "coordOperation"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CoordinateOperationRef(CoordinateOperationPropertyType):
    class Meta:
        name = "coordinateOperationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DefinedByConversion(GeneralConversionPropertyType):
    class Meta:
        name = "definedByConversion"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeneralConversionRef(GeneralConversionPropertyType):
    class Meta:
        name = "generalConversionRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class GeneralTransformationRef(GeneralTransformationPropertyType):
    class Meta:
        name = "generalTransformationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class OperationRef(OperationPropertyType):
    class Meta:
        name = "operationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class TransformationRef(TransformationPropertyType):
    class Meta:
        name = "transformationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesOperation(CoordinateOperationPropertyType):
    class Meta:
        name = "usesOperation"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class UsesSingleOperation(CoordinateOperationPropertyType):
    class Meta:
        name = "usesSingleOperation"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DsAggregatePropertyType:
    """
    :ivar ds_initiative:
    :ivar ds_production_series:
    :ivar ds_sensor:
    :ivar ds_platform:
    :ivar ds_series:
    :ivar ds_stereo_mate:
    :ivar ds_other_aggregate:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DS_Aggregate_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_initiative: Optional[DsInitiative] = field(
        default=None,
        metadata={
            "name": "DS_Initiative",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_production_series: Optional[DsProductionSeries] = field(
        default=None,
        metadata={
            "name": "DS_ProductionSeries",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_sensor: Optional[DsSensor] = field(
        default=None,
        metadata={
            "name": "DS_Sensor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_platform: Optional[DsPlatform] = field(
        default=None,
        metadata={
            "name": "DS_Platform",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_series: Optional[DsSeries] = field(
        default=None,
        metadata={
            "name": "DS_Series",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_stereo_mate: Optional[DsStereoMate] = field(
        default=None,
        metadata={
            "name": "DS_StereoMate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_other_aggregate: Optional[DsOtherAggregate] = field(
        default=None,
        metadata={
            "name": "DS_OtherAggregate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsOtherAggregatePropertyType:
    """
    :ivar ds_stereo_mate:
    :ivar ds_other_aggregate:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DS_OtherAggregate_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_stereo_mate: Optional[DsStereoMate] = field(
        default=None,
        metadata={
            "name": "DS_StereoMate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_other_aggregate: Optional[DsOtherAggregate] = field(
        default=None,
        metadata={
            "name": "DS_OtherAggregate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsPlatformPropertyType:
    """
    :ivar ds_platform:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DS_Platform_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_platform: Optional[DsPlatform] = field(
        default=None,
        metadata={
            "name": "DS_Platform",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsProductionSeriesPropertyType:
    """
    :ivar ds_production_series:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DS_ProductionSeries_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_production_series: Optional[DsProductionSeries] = field(
        default=None,
        metadata={
            "name": "DS_ProductionSeries",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsSensorPropertyType:
    """
    :ivar ds_sensor:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DS_Sensor_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_sensor: Optional[DsSensor] = field(
        default=None,
        metadata={
            "name": "DS_Sensor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsSeriesPropertyType:
    """
    :ivar ds_production_series:
    :ivar ds_sensor:
    :ivar ds_platform:
    :ivar ds_series:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DS_Series_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_production_series: Optional[DsProductionSeries] = field(
        default=None,
        metadata={
            "name": "DS_ProductionSeries",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_sensor: Optional[DsSensor] = field(
        default=None,
        metadata={
            "name": "DS_Sensor",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_platform: Optional[DsPlatform] = field(
        default=None,
        metadata={
            "name": "DS_Platform",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    ds_series: Optional[DsSeries] = field(
        default=None,
        metadata={
            "name": "DS_Series",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class DsStereoMatePropertyType:
    """
    :ivar ds_stereo_mate:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DS_StereoMate_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_stereo_mate: Optional[DsStereoMate] = field(
        default=None,
        metadata={
            "name": "DS_StereoMate",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class BridgeFurnitureType(AbstractFurnitureType):
    """
    :ivar class_value: Indicates the specific type of the
        BridgeFurniture.
    :ivar function: Specifies the intended purposes of the
        BridgeFurniture.
    :ivar usage: Specifies the actual uses of the BridgeFurniture.
    :ivar ade_of_bridge_furniture: Augments the BridgeFurniture with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    ade_of_bridge_furniture: list[AdeofBridgeFurniturePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )


@dataclass
class BridgeInstallationType(AbstractInstallationType):
    """
    :ivar class_value: Indicates the specific type of the
        BridgeInstallation.
    :ivar function: Specifies the intended purposes of the
        BridgeInstallation.
    :ivar usage: Specifies the actual uses of the BridgeInstallation.
    :ivar ade_of_bridge_installation: Augments the BridgeInstallation
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    ade_of_bridge_installation: list[AdeofBridgeInstallationPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfBridgeInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
    )


@dataclass
class BridgeRoom(BridgeRoomType):
    """A BridgeRoom is a space within a Bridge or BridgePart intended for human
    occupancy (e.g. a place of work or recreation) and/or containment (storage) of
    animals or things.

    A BridgeRoom is bounded physically and/or virtually (e.g. by
    ClosureSurfaces or GenericSurfaces).
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class BuildingFurnitureType(AbstractFurnitureType):
    """
    :ivar class_value: Indicates the specific type of the
        BuildingFurniture.
    :ivar function: Specifies the intended purposes of the
        BuildingFurniture.
    :ivar usage: Specifies the actual uses of the BuildingFurniture.
    :ivar ade_of_building_furniture: Augments the BuildingFurniture with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    ade_of_building_furniture: list[AdeofBuildingFurniturePropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfBuildingFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )


@dataclass
class BuildingInstallationType(AbstractInstallationType):
    """
    :ivar class_value: Indicates the specific type of the
        BuildingInstallation.
    :ivar function: Specifies the intended purposes of the
        BuildingInstallation.
    :ivar usage: Specifies the actual uses of the BuildingInstallation.
    :ivar ade_of_building_installation: Augments the
        BuildingInstallation with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    ade_of_building_installation: list[
        AdeofBuildingInstallationPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )


@dataclass
class BuildingRoom(BuildingRoomType):
    """A BuildingRoom is a space within a Building or BuildingPart intended for
    human occupancy (e.g. a place of work or recreation) and/or containment of
    animals or things.

    A BuildingRoom is bounded physically and/or virtually (e.g. by
    ClosureSurfaces or GenericSurfaces).
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class BuildingUnit(BuildingUnitType):
    """A BuildingUnit is a logical subdivision of a Building.

    BuildingUnits are formed according to some homogeneous property like
    function, ownership, management, or accessability. They may be
    separately sold, rented out, inherited, managed, etc.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class Storey(StoreyType):
    """A Storey is typically a horizontal section of a Building.

    Storeys are not always defined according to the building structure,
    but can also be defined according to logical considerations.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class CityFurniture(CityFurnitureType):
    """CityFurniture is an object or piece of equipment installed in the outdoor
    environment for various purposes.

    Examples include street signs, traffic signals, street lamps,
    benches, fountains.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/cityfurniture/3.0"


@dataclass
class AbstractConstruction(AbstractConstructionType):
    """AbstractConstruction is the abstract superclass for objects that are
    manufactured by humans from construction materials, are connected to earth, and
    are intended to be permanent.

    A connection with the ground also exists when the construction rests
    by its own weight on the ground or is moveable limited on stationary
    rails or if the construction  is intended to be used mainly
    stationary.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AbstractFillingElement(AbstractFillingElementType):
    """
    AbstractFillingElement is the abstract superclass for different kinds of
    elements that fill the openings of a construction.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AbstractFurniture(AbstractFurnitureType):
    """
    AbstractFurniture is the abstract superclass for the representation of
    furniture objects of a construction.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AbstractInstallation(AbstractInstallationType):
    """
    AbstractInstallation is the abstract superclass for the representation of
    installation objects of a construction.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class DoorType(AbstractFillingElementType):
    """
    :ivar class_value: Indicates the specific type of the Door.
    :ivar function: Specifies the intended purposes of the Door.
    :ivar usage: Specifies the actual uses of the Door.
    :ivar address: Relates to the addresses that are assigned to the
        Door.
    :ivar ade_of_door: Augments the Door with properties defined in an
        ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    address: list[AddressPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ade_of_door: list[AdeofDoorPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfDoor",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class OtherConstructionType(AbstractConstructionType):
    """
    :ivar class_value: Indicates the specific type of the
        OtherConstruction.
    :ivar function: Specifies the intended purposes of the
        OtherConstruction.
    :ivar usage: Specifies the actual uses of the OtherConstruction.
    :ivar ade_of_other_construction: Augments the OtherConstruction with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ade_of_other_construction: list[AdeofOtherConstructionPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfOtherConstruction",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
    )


@dataclass
class WindowType(AbstractFillingElementType):
    """
    :ivar class_value: Indicates the specific type of the Window.
    :ivar function: Specifies the intended purposes of the Window.
    :ivar usage: Specifies the actual uses of the Window.
    :ivar ade_of_window: Augments the Window with properties defined in
        an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ade_of_window: list[AdeofWindowPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfWindow",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class GenericLogicalSpacePropertyType:
    """
    :ivar generic_logical_space:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    generic_logical_space: Optional[GenericLogicalSpace] = field(
        default=None,
        metadata={
            "name": "GenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GenericOccupiedSpace(GenericOccupiedSpaceType):
    """
    A GenericOccupiedSpace is a space that is not represented by any explicitly
    modelled AbstractOccupiedSpace subclass within CityGML.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class GenericUnoccupiedSpace(GenericUnoccupiedSpaceType):
    """
    A GenericUnoccupiedSpace is a space that is not represented by any explicitly
    modelled AbstractUnoccupiedSpace subclass within CityGML.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/generics/3.0"


@dataclass
class AuxiliaryTrafficSpace(AuxiliaryTrafficSpaceType):
    """
    An AuxiliaryTrafficSpace is a space within the transportation space not
    intended for traffic purposes.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class ClearanceSpace(ClearanceSpaceType):
    """
    A ClearanceSpace represents the actual free space above a TrafficArea within
    which a mobile object can move without contacting an obstruction.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class Hole(HoleType):
    """A Hole is an opening in the surface of a Road, Track or Square such as road
    damages, manholes or drains.

    Holes can span multiple transportation objects.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class HollowSpace(HollowSpaceType):
    """A HollowSpace is a space within a Tunnel or TunnelPart intended for certain
    functions (e.g. transport or passage ways, service rooms, emergency shelters).

    A HollowSpace is bounded physically and/or virtually (e.g. by
    ClosureSurfaces or GenericSurfaces).
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class TunnelFurnitureType(AbstractFurnitureType):
    """
    :ivar class_value: Indicates the specific type of the
        TunnelFurniture.
    :ivar function: Specifies the intended purposes of the
        TunnelFurniture.
    :ivar usage: Specifies the actual uses of the TunnelFurniture.
    :ivar ade_of_tunnel_furniture: Augments the TunnelFurniture with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    ade_of_tunnel_furniture: list[AdeofTunnelFurniturePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfTunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )


@dataclass
class TunnelInstallationType(AbstractInstallationType):
    """
    :ivar class_value: Indicates the specific type of the
        TunnelInstallation.
    :ivar function: Specifies the intended purposes of the
        TunnelInstallation.
    :ivar usage: Specifies the actual uses of the TunnelInstallation.
    :ivar ade_of_tunnel_installation: Augments the TunnelInstallation
        with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    ade_of_tunnel_installation: list[AdeofTunnelInstallationPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfTunnelInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
    )


@dataclass
class AbstractVegetationObject(AbstractVegetationObjectType):
    """
    AbstractVegetationObject is the abstract superclass for all kinds of vegetation
    objects.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class PlantCoverType(AbstractVegetationObjectType):
    """
    :ivar class_value: Indicates the specific type of the PlantCover.
    :ivar function: Specifies the intended purposes of the PlantCover.
    :ivar usage: Specifies the actual uses of the PlantCover.
    :ivar average_height: Specifies the average height of the
        PlantCover.
    :ivar min_height: Specifies the minimum height of the PlantCover.
    :ivar max_height: Specifies the maximum height of the PlantCover.
    :ivar ade_of_plant_cover: Augments the PlantCover with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    average_height: Optional[LengthType] = field(
        default=None,
        metadata={
            "name": "averageHeight",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    min_height: Optional[LengthType] = field(
        default=None,
        metadata={
            "name": "minHeight",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    max_height: Optional[LengthType] = field(
        default=None,
        metadata={
            "name": "maxHeight",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    ade_of_plant_cover: list[AdeofPlantCoverPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfPlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )


@dataclass
class SolitaryVegetationObjectType(AbstractVegetationObjectType):
    """
    :ivar class_value: Indicates the specific type of the
        SolitaryVegetationObject.
    :ivar function: Specifies the intended purposes of the
        SolitaryVegetationObject.
    :ivar usage: Specifies the actual uses of the
        SolitaryVegetationObject.
    :ivar species: Indicates the botanical name of the
        SolitaryVegetationObject.
    :ivar height: Distance between the highest point of the vegetation
        object and the lowest point of the terrain at the bottom of the
        object.
    :ivar trunk_diameter: Specifies the diameter of the
        SolitaryCityObject's trunk.
    :ivar crown_diameter: Specifies the diameter of the
        SolitaryCityObject's crown.
    :ivar root_ball_diameter: Specifies the diameter of the
        SolitaryCityObject's root ball.
    :ivar max_root_ball_depth: Specifies the vertical distance between
        the lowest point of the SolitaryVegetationObject's root ball and
        the terrain surface.
    :ivar ade_of_solitary_vegetation_object: Augments the
        SolitaryVegetationObject with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    species: Optional[CodeType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    height: Optional[LengthType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    trunk_diameter: Optional[LengthType] = field(
        default=None,
        metadata={
            "name": "trunkDiameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    crown_diameter: Optional[LengthType] = field(
        default=None,
        metadata={
            "name": "crownDiameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    root_ball_diameter: Optional[LengthType] = field(
        default=None,
        metadata={
            "name": "rootBallDiameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    max_root_ball_depth: Optional[LengthType] = field(
        default=None,
        metadata={
            "name": "maxRootBallDepth",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    ade_of_solitary_vegetation_object: list[
        AdeofSolitaryVegetationObjectPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfSolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )


@dataclass
class WaterBody(WaterBodyType):
    """
    A WaterBody represents significant and permanent or semi-permanent
    accumulations of surface water, usually covering a part of the Earth.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/waterbody/3.0"


@dataclass
class AbstractGeneralDerivedCrstype(AbstractCrstype):
    class Meta:
        name = "AbstractGeneralDerivedCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    defined_by_conversion: Optional[DefinedByConversion] = field(
        default=None,
        metadata={
            "name": "definedByConversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: Optional[Conversion2] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ConcatenatedOperationType(AbstractCoordinateOperationType):
    """Gml:ConcatenatedOperation is an ordered sequence of two or more coordinate
    operations.

    This sequence of operations is constrained by the requirement that
    the source coordinate reference system of step (n+1) must be the
    same as the target coordinate reference system of step (n). The
    source coordinate reference system of the first step and the target
    coordinate reference system of the last step are the source and
    target coordinate reference system associated with the concatenated
    operation. Instead of a forward operation, an inverse operation may
    be used for one or more of the operation steps mentioned above, if
    the inverse operation is uniquely defined by the forward operation.
    The gml:coordOperation property elements are an ordered sequence of
    associations to the two or more operations used by this concatenated
    operation. The AggregationAttributeGroup should be used to specify
    that the coordOperation associations are ordered.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    uses_operation: list[UsesOperation] = field(
        default_factory=list,
        metadata={
            "name": "usesOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_single_operation: list[UsesSingleOperation] = field(
        default_factory=list,
        metadata={
            "name": "usesSingleOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coord_operation: list[CoordOperation] = field(
        default_factory=list,
        metadata={
            "name": "coordOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class PassThroughOperationType(AbstractCoordinateOperationType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    modified_coordinate: list[ModifiedCoordinate] = field(
        default_factory=list,
        metadata={
            "name": "modifiedCoordinate",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 1,
        },
    )
    uses_operation: Optional[UsesOperation] = field(
        default=None,
        metadata={
            "name": "usesOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_single_operation: Optional[UsesSingleOperation] = field(
        default=None,
        metadata={
            "name": "usesSingleOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coord_operation: Optional[CoordOperation] = field(
        default=None,
        metadata={
            "name": "coordOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class DsDataSetType(AbstractObjectType):
    """
    Identifiable collection of data.
    """

    class Meta:
        name = "DS_DataSet_Type"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    has: list[MdMetadataPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
            "min_occurs": 1,
        },
    )
    part_of: list[DsAggregatePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "partOf",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )


@dataclass
class BridgeFurniture(BridgeFurnitureType):
    """A BridgeFurniture is an equipment for occupant use, usually not fixed to the
    bridge.

    [cf. ISO 6707-1]
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class BridgeInstallation(BridgeInstallationType):
    """A BridgeInstallation is a permanent part of a Bridge (inside and/or outside)
    which does not have the significance of a BridgePart.

    In contrast to BridgeConstructiveElements, a BridgeInstallation is
    not essential from a structural point of view. Examples are stairs,
    antennas or railways.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class BridgeRoomPropertyType:
    """
    :ivar bridge_room:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    bridge_room: Optional[BridgeRoom] = field(
        default=None,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractBuildingSubdivisionPropertyType:
    """
    :ivar storey:
    :ivar building_unit:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    storey: Optional[Storey] = field(
        default=None,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_unit: Optional[BuildingUnit] = field(
        default=None,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BuildingFurniture(BuildingFurnitureType):
    """A BuildingFurniture is an equipment for occupant use, usually not fixed to
    the building.

    [cf. ISO 6707-1]
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class BuildingInstallation(BuildingInstallationType):
    """A BuildingInstallation is a permanent part of a Building (inside and/or
    outside) which has not the significance of a BuildingPart.

    Examples are stairs, antennas, balconies or small roofs.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class BuildingRoomPropertyType:
    """
    :ivar building_room:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    building_room: Optional[BuildingRoom] = field(
        default=None,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BuildingUnitPropertyType:
    """
    :ivar building_unit:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    building_unit: Optional[BuildingUnit] = field(
        default=None,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class StoreyPropertyType:
    """
    :ivar storey:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    storey: Optional[Storey] = field(
        default=None,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CityFurniturePropertyType:
    """
    :ivar city_furniture:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/cityfurniture/3.0"

    city_furniture: Optional[CityFurniture] = field(
        default=None,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Door(DoorType):
    """A Door is a construction for closing an opening intended primarily for
    access or egress or both.

    [cf. ISO 6707-1]
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class OtherConstruction(OtherConstructionType):
    """
    An OtherConstruction is a construction that is not covered by any of the other
    subclasses of AbstractConstruction.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class Window(WindowType):
    """A Window is a construction for closing an opening in a wall  or roof,
    primarily intended to admit light and/or provide ventilation.

    [cf. ISO  6707-1]
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class GenericOccupiedSpacePropertyType:
    """
    :ivar generic_occupied_space:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    generic_occupied_space: Optional[GenericOccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class GenericUnoccupiedSpacePropertyType:
    """
    :ivar generic_unoccupied_space:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/generics/3.0"

    generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AuxiliaryTrafficSpacePropertyType:
    """
    :ivar auxiliary_traffic_space:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ClearanceSpacePropertyType:
    """
    :ivar clearance_space:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    clearance_space: Optional[ClearanceSpace] = field(
        default=None,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class HolePropertyType:
    """
    :ivar hole:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    hole: Optional[Hole] = field(
        default=None,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TrafficSpaceType(AbstractUnoccupiedSpaceType):
    """
    :ivar class_value: Indicates the specific type of the TrafficSpace.
    :ivar function: Specifies the intended purposes of the TrafficSpace.
    :ivar usage: Specifies the actual uses of the TrafficSpace.
    :ivar granularity: Defines whether traffic spaces are represented by
        individual ways or by individual lanes, depending on the desired
        level of spatial and semantic decomposition.
    :ivar traffic_direction: Indicates the direction of traffic flow
        relative to the corresponding linear geometry representation.
    :ivar occupancy: Provides information on the residency of persons,
        vehicles, or other moving features in the TrafficSpace.
    :ivar predecessor: Indicates the predecessor(s) of the TrafficSpace.
    :ivar successor: Indicates the successor(s) of the TrafficSpace.
    :ivar clearance_space: Relates to the clearance spaces that are part
        of the TrafficSpace.
    :ivar ade_of_traffic_space: Augments the TrafficSpace with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    granularity: Optional[GranularityValueType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "required": True,
        },
    )
    traffic_direction: Optional[TrafficDirectionValueType] = field(
        default=None,
        metadata={
            "name": "trafficDirection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    occupancy: list[OccupancyPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    predecessor: list["TrafficSpacePropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    successor: list["TrafficSpacePropertyType"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    clearance_space: list["TrafficSpaceType.ClearanceSpace"] = field(
        default_factory=list,
        metadata={
            "name": "clearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_traffic_space: list[AdeofTrafficSpacePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )

    @dataclass
    class ClearanceSpace(AbstractFeatureMemberType):
        """
        :ivar clearance_space:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        clearance_space: Optional[ClearanceSpace] = field(
            default=None,
            metadata={
                "name": "ClearanceSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class HollowSpacePropertyType:
    """
    :ivar hollow_space:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    hollow_space: Optional[HollowSpace] = field(
        default=None,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TunnelFurniture(TunnelFurnitureType):
    """A TunnelFurniture is an equipment for occupant use, usually not fixed to the
    tunnel.

    [cf. ISO 6707-1]
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class TunnelInstallation(TunnelInstallationType):
    """A TunnelInstallation is a permanent part of a Tunnel (inside and/or outside)
    which does not have the significance of a TunnelPart.

    In contrast to TunnelConstructiveElement, a TunnelInstallation is
    not essential from a structural point of view. Examples are stairs,
    antennas or railings.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class PlantCover(PlantCoverType):
    """
    A PlantCover represents a space covered by vegetation.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class SolitaryVegetationObject(SolitaryVegetationObjectType):
    """
    A SolitaryVegetationObject represents individual vegetation objects, e.g. trees
    or bushes.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/vegetation/3.0"


@dataclass
class WaterBodyPropertyType:
    """
    :ivar water_body:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/waterbody/3.0"

    water_body: Optional[WaterBody] = field(
        default=None,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractGeneralDerivedCrs(AbstractGeneralDerivedCrstype):
    """Gml:AbstractGeneralDerivedCRS is a coordinate reference system that is
    defined by its coordinate conversion from another coordinate reference system.

    This abstract complex type shall not be used, extended, or
    restricted, in a GML Application Schema, to define a concrete
    subtype with a meaning equivalent to a concrete subtype specified in
    this document.
    """

    class Meta:
        name = "AbstractGeneralDerivedCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ConcatenatedOperation(ConcatenatedOperationType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PassThroughOperation(PassThroughOperationType):
    """Gml:PassThroughOperation is a pass-through operation specifies that a subset
    of a coordinate tuple is subject to a specific coordinate operation.

    The modifiedCoordinate property elements are an ordered sequence of
    positive integers defining the positions in a coordinate tuple of
    the coordinates affected by this pass-through operation. The
    AggregationAttributeGroup should be used to specify that the
    modifiedCoordinate elements are ordered.
    """

    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ProjectedCrstype(AbstractGeneralDerivedCrstype):
    class Meta:
        name = "ProjectedCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    base_geodetic_crs: Optional[BaseGeodeticCrs] = field(
        default=None,
        metadata={
            "name": "baseGeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_geographic_crs: Optional[BaseGeographicCrs] = field(
        default=None,
        metadata={
            "name": "baseGeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    uses_cartesian_cs: Optional[UsesCartesianCs] = field(
        default=None,
        metadata={
            "name": "usesCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs2] = field(
        default=None,
        metadata={
            "name": "cartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DsDataSet(DsDataSetType):
    class Meta:
        name = "DS_DataSet"
        namespace = "http://www.isotc211.org/2005/gmd"


@dataclass
class BridgeFurniturePropertyType:
    """
    :ivar bridge_furniture:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    bridge_furniture: Optional[BridgeFurniture] = field(
        default=None,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BridgeInstallationPropertyType:
    """
    :ivar bridge_installation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    bridge_installation: Optional[BridgeInstallation] = field(
        default=None,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BuildingFurniturePropertyType:
    """
    :ivar building_furniture:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    building_furniture: Optional[BuildingFurniture] = field(
        default=None,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BuildingInstallationPropertyType:
    """
    :ivar building_installation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    building_installation: Optional[BuildingInstallation] = field(
        default=None,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractFillingElementPropertyType:
    """
    :ivar window:
    :ivar door:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    window: Optional[Window] = field(
        default=None,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door: Optional[Door] = field(
        default=None,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractFurniturePropertyType:
    """
    :ivar tunnel_furniture:
    :ivar building_furniture:
    :ivar bridge_furniture:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    tunnel_furniture: Optional[TunnelFurniture] = field(
        default=None,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_furniture: Optional[BuildingFurniture] = field(
        default=None,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_furniture: Optional[BridgeFurniture] = field(
        default=None,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractInstallationPropertyType:
    """
    :ivar tunnel_installation:
    :ivar building_installation:
    :ivar bridge_installation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    tunnel_installation: Optional[TunnelInstallation] = field(
        default=None,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_installation: Optional[BuildingInstallation] = field(
        default=None,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_installation: Optional[BridgeInstallation] = field(
        default=None,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class DoorPropertyType:
    """
    :ivar door:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    door: Optional[Door] = field(
        default=None,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class OtherConstructionPropertyType:
    """
    :ivar other_construction:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    other_construction: Optional[OtherConstruction] = field(
        default=None,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class WindowPropertyType:
    """
    :ivar window:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    window: Optional[Window] = field(
        default=None,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TrafficSpace(TrafficSpaceType):
    """A TrafficSpace is a space in which traffic takes place.

    Traffic includes the movement of entities such as trains, vehicles,
    pedestrians, ships, or other transportation types.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class TunnelFurniturePropertyType:
    """
    :ivar tunnel_furniture:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    tunnel_furniture: Optional[TunnelFurniture] = field(
        default=None,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TunnelInstallationPropertyType:
    """
    :ivar tunnel_installation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    tunnel_installation: Optional[TunnelInstallation] = field(
        default=None,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractVegetationObjectPropertyType:
    """
    :ivar solitary_vegetation_object:
    :ivar plant_cover:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"

    solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
        default=None,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    plant_cover: Optional[PlantCover] = field(
        default=None,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class PlantCoverPropertyType:
    """
    :ivar plant_cover:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"

    plant_cover: Optional[PlantCover] = field(
        default=None,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class SolitaryVegetationObjectPropertyType:
    """
    :ivar solitary_vegetation_object:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/vegetation/3.0"

    solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
        default=None,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ConcatenatedOperationPropertyType:
    """
    Gml:ConcatenatedOperationPropertyType is a property type for association roles
    to a concatenated operation, either referencing or containing the definition of
    that concatenated operation.

    :ivar concatenated_operation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    concatenated_operation: Optional[ConcatenatedOperation] = field(
        default=None,
        metadata={
            "name": "ConcatenatedOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class PassThroughOperationPropertyType:
    """
    Gml:PassThroughOperationPropertyType is a property type for association roles
    to a pass through operation, either referencing or containing the definition of
    that pass through operation.

    :ivar pass_through_operation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    pass_through_operation: Optional[PassThroughOperation] = field(
        default=None,
        metadata={
            "name": "PassThroughOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ProjectedCrs(ProjectedCrstype):
    """Gml:ProjectedCRS is a 2D coordinate reference system used to approximate the
    shape of the earth on a planar surface, but in such a way that the distortion
    that is inherent to the approximation is carefully controlled and known.

    Distortion correction is commonly applied to calculated bearings and
    distances to produce values that are a close match to actual field
    values.
    """

    class Meta:
        name = "ProjectedCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SingleOperationPropertyType:
    """
    Gml:SingleOperationPropertyType is a property type for association roles to a
    single operation, either referencing or containing the definition of that
    single operation.

    :ivar transformation:
    :ivar conversion:
    :ivar pass_through_operation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pass_through_operation: Optional[PassThroughOperation] = field(
        default=None,
        metadata={
            "name": "PassThroughOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DsDataSetPropertyType:
    """
    :ivar ds_data_set:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar uuidref:
    :ivar nil_reason:
    """

    class Meta:
        name = "DS_DataSet_PropertyType"
        target_namespace = "http://www.isotc211.org/2005/gmd"

    ds_data_set: Optional[DsDataSet] = field(
        default=None,
        metadata={
            "name": "DS_DataSet",
            "type": "Element",
            "namespace": "http://www.isotc211.org/2005/gmd",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    uuidref: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "namespace": "http://www.isotc211.org/2005/gco",
            "pattern": r"other:\w{2,}",
        },
    )


@dataclass
class AbstractConstructiveElementType(AbstractOccupiedSpaceType):
    """
    :ivar is_structural_element: Indicates whether the constructive
        element is essential from a structural point of view. A
        structural element cannot be omitted without collapsing of the
        construction. Examples are pylons and anchorages of bridges.
    :ivar filling: Relates to the elements that fill the opening of the
        constructive element.
    :ivar ade_of_abstract_constructive_element: Augments
        AbstractConstructiveElement with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    is_structural_element: Optional[bool] = field(
        default=None,
        metadata={
            "name": "isStructuralElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    filling: list[AbstractFillingElementPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ade_of_abstract_constructive_element: list[
        AdeofAbstractConstructiveElementPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )


@dataclass
class AbstractTransportationSpaceType(AbstractUnoccupiedSpaceType):
    """
    :ivar traffic_direction: Indicates the direction of traffic flow
        relative to the corresponding linear geometry representation.
    :ivar occupancy: Provides information on the residency of persons,
        vehicles, or other moving features in the transportation space.
    :ivar traffic_space: Relates to the traffic spaces that are part of
        the transportation space.
    :ivar auxiliary_traffic_space: Relates to the auxiliary traffic
        spaces that are part of the transportation space.
    :ivar hole: Relates to the holes that are part of the transportation
        space.
    :ivar marking: Relates to the markings that are part of the
        transportation space.
    :ivar ade_of_abstract_transportation_space: Augments
        AbstractTransportationSpace with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    traffic_direction: Optional[TrafficDirectionValueType] = field(
        default=None,
        metadata={
            "name": "trafficDirection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    occupancy: list[OccupancyPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    traffic_space: list["AbstractTransportationSpaceType.TrafficSpace"] = (
        field(
            default_factory=list,
            metadata={
                "name": "trafficSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
    )
    auxiliary_traffic_space: list[
        "AbstractTransportationSpaceType.AuxiliaryTrafficSpace"
    ] = field(
        default_factory=list,
        metadata={
            "name": "auxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole: list["AbstractTransportationSpaceType.Hole"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    marking: list["AbstractTransportationSpaceType.Marking"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_abstract_transportation_space: list[
        AdeofAbstractTransportationSpacePropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractTransportationSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )

    @dataclass
    class TrafficSpace(AbstractFeatureMemberType):
        """
        :ivar traffic_space:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        traffic_space: Optional[TrafficSpace] = field(
            default=None,
            metadata={
                "name": "TrafficSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class AuxiliaryTrafficSpace(AbstractFeatureMemberType):
        """
        :ivar auxiliary_traffic_space:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
            default=None,
            metadata={
                "name": "AuxiliaryTrafficSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class Hole(AbstractFeatureMemberType):
        """
        :ivar hole:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        hole: Optional[Hole] = field(
            default=None,
            metadata={
                "name": "Hole",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class Marking(AbstractFeatureMemberType):
        """
        :ivar marking:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        marking: Optional[Marking] = field(
            default=None,
            metadata={
                "name": "Marking",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class TrafficSpacePropertyType:
    """
    :ivar traffic_space:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    traffic_space: Optional[TrafficSpace] = field(
        default=None,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ProjectedCrspropertyType:
    """
    Gml:ProjectedCRSPropertyType is a property type for association roles to a
    projected coordinate reference system, either referencing or containing the
    definition of that reference system.

    :ivar projected_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "ProjectedCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    projected_crs: Optional[ProjectedCrs] = field(
        default=None,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class SingleCrspropertyType:
    """
    Gml:SingleCRSPropertyType is a property type for association roles to a single
    coordinate reference system, either referencing or containing the definition of
    that coordinate reference system.

    :ivar geocentric_crs:
    :ivar geographic_crs:
    :ivar temporal_crs:
    :ivar image_crs:
    :ivar engineering_crs:
    :ivar vertical_crs:
    :ivar geodetic_crs:
    :ivar derived_crs:
    :ivar projected_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "SingleCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    geocentric_crs: Optional[GeocentricCrs] = field(
        default=None,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geographic_crs: Optional[GeographicCrs] = field(
        default=None,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_crs: Optional[TemporalCrs] = field(
        default=None,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_crs: Optional[ImageCrs] = field(
        default=None,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_crs: Optional[EngineeringCrs] = field(
        default=None,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_crs: Optional[VerticalCrs] = field(
        default=None,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_crs: Optional[GeodeticCrs] = field(
        default=None,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_crs: Optional["DerivedCrs"] = field(
        default=None,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    projected_crs: Optional[ProjectedCrs] = field(
        default=None,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class ConcatenatedOperationRef(ConcatenatedOperationPropertyType):
    class Meta:
        name = "concatenatedOperationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PassThroughOperationRef(PassThroughOperationPropertyType):
    class Meta:
        name = "passThroughOperationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SingleOperationRef(SingleOperationPropertyType):
    class Meta:
        name = "singleOperationRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BridgeConstructiveElementType(AbstractConstructiveElementType):
    """
    :ivar class_value: Indicates the specific type of the
        BridgeConstructiveElement.
    :ivar function: Specifies the intended purposes of the
        BridgeConstructiveElement.
    :ivar usage: Specifies the actual uses of the
        BridgeConstructiveElement.
    :ivar ade_of_bridge_constructive_element: Augments the
        BridgeConstructiveElement with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    ade_of_bridge_constructive_element: list[
        AdeofBridgeConstructiveElementPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )


@dataclass
class BuildingConstructiveElementType(AbstractConstructiveElementType):
    """
    :ivar class_value: Indicates the specific type of the
        BuildingConstructiveElement.
    :ivar function: Specifies the intended purposes of the
        BuildingConstructiveElement.
    :ivar usage: Specifies the actual uses of the
        BuildingConstructiveElement.
    :ivar ade_of_building_constructive_element: Augments the
        BuildingConstructiveElement with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    ade_of_building_constructive_element: list[
        AdeofBuildingConstructiveElementPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBuildingConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )


@dataclass
class AbstractConstructiveElement(AbstractConstructiveElementType):
    """AbstractConstructiveElement is the abstract superclass for the
    representation of volumetric elements of a construction.

    Examples are walls, beams, slabs.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/construction/3.0"


@dataclass
class AbstractTransportationSpace(AbstractTransportationSpaceType):
    """
    AbstractTransportationSpace is the abstract superclass of transportation
    objects such as Roads, Tracks, Railways, Waterways or Squares.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class IntersectionType(AbstractTransportationSpaceType):
    """
    :ivar class_value: Indicates the specific type of the Intersection.
    :ivar ade_of_intersection: Augments the Intersection with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_intersection: list[AdeofIntersectionPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfIntersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )


@dataclass
class SectionType(AbstractTransportationSpaceType):
    """
    :ivar class_value: Indicates the specific type of the Section.
    :ivar ade_of_section: Augments the Section with properties defined
        in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_section: list[AdeofSectionPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfSection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )


@dataclass
class SquareType(AbstractTransportationSpaceType):
    """
    :ivar class_value: Indicates the specific type of the Square.
    :ivar function: Specifies the intended purposes of the Square.
    :ivar usage: Specifies the actual uses of the Square.
    :ivar ade_of_square: Augments the Square with properties defined in
        an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_square: list[AdeofSquarePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfSquare",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )


@dataclass
class TunnelConstructiveElementType(AbstractConstructiveElementType):
    """
    :ivar class_value: Indicates the specific type of the
        TunnelConstructiveElement.
    :ivar function: Specifies the intended purposes of the
        TunnelConstructiveElement.
    :ivar usage: Specifies the actual uses of the
        TunnelConstructiveElement.
    :ivar ade_of_tunnel_constructive_element: Augments the
        TunnelConstructiveElement with properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    ade_of_tunnel_constructive_element: list[
        AdeofTunnelConstructiveElementPropertyType
    ] = field(
        default_factory=list,
        metadata={
            "name": "adeOfTunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )


@dataclass
class BaseCrs(SingleCrspropertyType):
    """
    Gml:baseCRS is an association role to the coordinate reference system used by
    this derived CRS.
    """

    class Meta:
        name = "baseCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ComponentReferenceSystem(SingleCrspropertyType):
    """The gml:componentReferenceSystem elements are an ordered sequence of
    associations to all the component coordinate reference systems included in this
    compound coordinate reference system.

    The gml:AggregationAttributeGroup should be used to specify that the
    gml:componentReferenceSystem properties are ordered.
    """

    class Meta:
        name = "componentReferenceSystem"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class IncludesSingleCrs(SingleCrspropertyType):
    class Meta:
        name = "includesSingleCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ProjectedCrsref(ProjectedCrspropertyType):
    class Meta:
        name = "projectedCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class SingleCrsref(SingleCrspropertyType):
    class Meta:
        name = "singleCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BridgeConstructiveElement(BridgeConstructiveElementType):
    """A BridgeConstructiveElement is an element of a bridge which is essential
    from a structural point of view.

    Examples are pylons, anchorages, slabs, beams.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class BuildingConstructiveElement(BuildingConstructiveElementType):
    """A BuildingConstructiveElement is an element of a Building which is essential
    from a structural point of view.

    Examples are walls, slabs, staircases, beams.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class Intersection(IntersectionType):
    """
    An Intersection is a transportation space that is a shared segment of multiple
    Road, Track, Railway, or Waterway objects (e.g. a crossing of two roads or a
    level crossing of a road and a railway).
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class Section(SectionType):
    """
    A Section is a transportation space that is a segment of a Road, Railway,
    Track, or Waterway.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class Square(SquareType):
    """A Square is a transportation space for unrestricted movement for vehicles,
    bicycles and/or pedestrians.

    This includes plazas as well as large sealed surfaces such as
    parking lots.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class TunnelConstructiveElement(TunnelConstructiveElementType):
    """A TunnelConstructiveElement is an element of a Tunnel which is essential
    from a structural point of view.

    Examples are walls, slabs, beams.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class CompoundCrstype(AbstractCrstype):
    class Meta:
        name = "CompoundCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    includes_single_crs: list[IncludesSingleCrs] = field(
        default_factory=list,
        metadata={
            "name": "includesSingleCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    component_reference_system: list[ComponentReferenceSystem] = field(
        default_factory=list,
        metadata={
            "name": "componentReferenceSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    aggregation_type: Optional[AggregationType] = field(
        default=None,
        metadata={
            "name": "aggregationType",
            "type": "Attribute",
        },
    )


@dataclass
class DerivedCrstype1(AbstractGeneralDerivedCrstype):
    class Meta:
        name = "DerivedCRSType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    base_crs: Optional[BaseCrs] = field(
        default=None,
        metadata={
            "name": "baseCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    derived_crstype: Optional[DerivedCrstype] = field(
        default=None,
        metadata={
            "name": "derivedCRSType",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        },
    )
    uses_cs: Optional[UsesCs] = field(
        default=None,
        metadata={
            "name": "usesCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinate_system: Optional[CoordinateSystem] = field(
        default=None,
        metadata={
            "name": "coordinateSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractBridgeType(AbstractConstructionType):
    """
    :ivar class_value: Indicates the specific type of the Bridge or
        BridgePart.
    :ivar function: Specifies the intended purposes of the Bridge or
        BridgePart.
    :ivar usage: Specifies the actual uses of the Bridge or BridgePart.
    :ivar is_movable: Indicates whether the Bridge or BridgePart can be
        moved to allow for watercraft to pass.
    :ivar bridge_constructive_element: Relates the constructive elements
        to the Bridge or BridgePart.
    :ivar bridge_installation: Relates the installation objects to the
        Bridge or BridgePart.
    :ivar bridge_room: Relates the rooms to the Bridge or BridgePart.
    :ivar bridge_furniture: Relates the furniture objects to the Bridge
        or BridgePart.
    :ivar address: Relates the addresses to the Bridge or BridgePart.
    :ivar ade_of_abstract_bridge: Augments AbstractBridge with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    is_movable: Optional[bool] = field(
        default=None,
        metadata={
            "name": "isMovable",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge_constructive_element: list[
        "AbstractBridgeType.BridgeConstructiveElement"
    ] = field(
        default_factory=list,
        metadata={
            "name": "bridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge_installation: list["AbstractBridgeType.BridgeInstallation"] = field(
        default_factory=list,
        metadata={
            "name": "bridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge_room: list["AbstractBridgeType.BridgeRoom"] = field(
        default_factory=list,
        metadata={
            "name": "bridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge_furniture: list["AbstractBridgeType.BridgeFurniture"] = field(
        default_factory=list,
        metadata={
            "name": "bridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    address: list[AddressPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    ade_of_abstract_bridge: list[AdeofAbstractBridgePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractBridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )

    @dataclass
    class BridgeConstructiveElement(AbstractFeatureMemberType):
        bridge_constructive_element: Optional[BridgeConstructiveElement] = (
            field(
                default=None,
                metadata={
                    "name": "BridgeConstructiveElement",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/citygml/bridge/3.0",
                    "required": True,
                },
            )
        )

    @dataclass
    class BridgeInstallation(AbstractFeatureMemberType):
        bridge_installation: Optional[BridgeInstallation] = field(
            default=None,
            metadata={
                "name": "BridgeInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
                "required": True,
            },
        )

    @dataclass
    class BridgeRoom(AbstractFeatureMemberType):
        bridge_room: Optional[BridgeRoom] = field(
            default=None,
            metadata={
                "name": "BridgeRoom",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
                "required": True,
            },
        )

    @dataclass
    class BridgeFurniture(AbstractFeatureMemberType):
        bridge_furniture: Optional[BridgeFurniture] = field(
            default=None,
            metadata={
                "name": "BridgeFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
                "required": True,
            },
        )


@dataclass
class BridgeConstructiveElementPropertyType:
    """
    :ivar bridge_constructive_element:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    bridge_constructive_element: Optional[BridgeConstructiveElement] = field(
        default=None,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractBuildingType(AbstractConstructionType):
    """
    :ivar class_value: Indicates the specific type of the Building or
        BuildingPart.
    :ivar function: Specifies the intended purposes of the Building or
        BuildingPart.
    :ivar usage: Specifies the actual uses of the Building or
        BuildingPart.
    :ivar roof_type: Indicates the shape of the roof of the Building or
        BuildingPart.
    :ivar storeys_above_ground: Indicates the number of storeys
        positioned above ground level.
    :ivar storeys_below_ground: Indicates the number of storeys
        positioned below ground level.
    :ivar storey_heights_above_ground: Lists the heights of each storey
        above ground. The first value in the list denotes the height of
        the storey closest to the ground level, the last value denotes
        the height furthest away.
    :ivar storey_heights_below_ground: Lists the height of each storey
        below ground. The first value in the list denotes the height of
        the storey closest to the ground level, the last value denotes
        the height furthest away.
    :ivar building_constructive_element: Relates the constructive
        elements to the Building or BuildingPart.
    :ivar building_installation: Relates the installation objects to the
        Building or BuildingPart.
    :ivar building_room: Relates the rooms to the Building or
        BuildingPart.
    :ivar building_furniture: Relates the furniture objects to the
        Building or BuildingPart.
    :ivar building_subdivision: Relates the logical subdivisions to the
        Building or BuildingPart.
    :ivar address: Relates the addresses to the Building or
        BuildingPart.
    :ivar ade_of_abstract_building: Augments AbstractBuilding with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    roof_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "roofType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    storeys_above_ground: Optional[int] = field(
        default=None,
        metadata={
            "name": "storeysAboveGround",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    storeys_below_ground: Optional[int] = field(
        default=None,
        metadata={
            "name": "storeysBelowGround",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    storey_heights_above_ground: Optional[MeasureOrNilReasonListType] = field(
        default=None,
        metadata={
            "name": "storeyHeightsAboveGround",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    storey_heights_below_ground: Optional[MeasureOrNilReasonListType] = field(
        default=None,
        metadata={
            "name": "storeyHeightsBelowGround",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_constructive_element: list[
        "AbstractBuildingType.BuildingConstructiveElement"
    ] = field(
        default_factory=list,
        metadata={
            "name": "buildingConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_installation: list[
        "AbstractBuildingType.BuildingInstallation"
    ] = field(
        default_factory=list,
        metadata={
            "name": "buildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_room: list["AbstractBuildingType.BuildingRoom"] = field(
        default_factory=list,
        metadata={
            "name": "buildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_furniture: list["AbstractBuildingType.BuildingFurniture"] = field(
        default_factory=list,
        metadata={
            "name": "buildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_subdivision: list["AbstractBuildingType.BuildingSubdivision"] = (
        field(
            default_factory=list,
            metadata={
                "name": "buildingSubdivision",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    address: list[AddressPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    ade_of_abstract_building: list[AdeofAbstractBuildingPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractBuilding",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )

    @dataclass
    class BuildingConstructiveElement(AbstractFeatureMemberType):
        building_constructive_element: Optional[
            BuildingConstructiveElement
        ] = field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
                "required": True,
            },
        )

    @dataclass
    class BuildingInstallation(AbstractFeatureMemberType):
        building_installation: Optional[BuildingInstallation] = field(
            default=None,
            metadata={
                "name": "BuildingInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
                "required": True,
            },
        )

    @dataclass
    class BuildingRoom(AbstractFeatureMemberType):
        building_room: Optional[BuildingRoom] = field(
            default=None,
            metadata={
                "name": "BuildingRoom",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
                "required": True,
            },
        )

    @dataclass
    class BuildingFurniture(AbstractFeatureMemberType):
        building_furniture: Optional[BuildingFurniture] = field(
            default=None,
            metadata={
                "name": "BuildingFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
                "required": True,
            },
        )

    @dataclass
    class BuildingSubdivision(AbstractFeatureMemberType):
        storey: Optional[Storey] = field(
            default=None,
            metadata={
                "name": "Storey",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        building_unit: Optional[BuildingUnit] = field(
            default=None,
            metadata={
                "name": "BuildingUnit",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )


@dataclass
class BuildingConstructiveElementPropertyType:
    """
    :ivar building_constructive_element:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    building_constructive_element: Optional[BuildingConstructiveElement] = (
        field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractConstructiveElementPropertyType:
    """
    :ivar tunnel_constructive_element:
    :ivar building_constructive_element:
    :ivar bridge_constructive_element:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    tunnel_constructive_element: Optional[TunnelConstructiveElement] = field(
        default=None,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_constructive_element: Optional[BuildingConstructiveElement] = (
        field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    bridge_constructive_element: Optional[BridgeConstructiveElement] = field(
        default=None,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class IntersectionPropertyType:
    """
    :ivar intersection:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    intersection: Optional[Intersection] = field(
        default=None,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class RailwayType(AbstractTransportationSpaceType):
    """
    :ivar class_value: Indicates the specific type of the Railway.
    :ivar function: Specifies the intended purposes of the Railway.
    :ivar usage: Specifies the actual uses of the Railway.
    :ivar section: Relates to the sections that are part of the Railway.
    :ivar intersection: Relates to the intersections that are part of
        the Railway.
    :ivar ade_of_railway: Augments the Railway with properties defined
        in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: list["RailwayType.Section"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: list["RailwayType.Intersection"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_railway: list[AdeofRailwayPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfRailway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )

    @dataclass
    class Section(AbstractFeatureMemberType):
        """
        :ivar section:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        section: Optional[Section] = field(
            default=None,
            metadata={
                "name": "Section",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class Intersection(AbstractFeatureMemberType):
        """
        :ivar intersection:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        intersection: Optional[Intersection] = field(
            default=None,
            metadata={
                "name": "Intersection",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class RoadType(AbstractTransportationSpaceType):
    """
    :ivar class_value: Indicates the specific type of the Road.
    :ivar function: Specifies the intended purposes of the Road.
    :ivar usage: Specifies the actual uses of the Road.
    :ivar section: Relates to the sections that are part of the Road.
    :ivar intersection: Relates to the intersections that are part of
        the Road.
    :ivar ade_of_road: Augments the Road with properties defined in an
        ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: list["RoadType.Section"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: list["RoadType.Intersection"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_road: list[AdeofRoadPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfRoad",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )

    @dataclass
    class Section(AbstractFeatureMemberType):
        """
        :ivar section:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        section: Optional[Section] = field(
            default=None,
            metadata={
                "name": "Section",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class Intersection(AbstractFeatureMemberType):
        """
        :ivar intersection:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        intersection: Optional[Intersection] = field(
            default=None,
            metadata={
                "name": "Intersection",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class SectionPropertyType:
    """
    :ivar section:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    section: Optional[Section] = field(
        default=None,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class SquarePropertyType:
    """
    :ivar square:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    square: Optional[Square] = field(
        default=None,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TrackType(AbstractTransportationSpaceType):
    """
    :ivar class_value: Indicates the specific type of the Track.
    :ivar function: Specifies the intended purposes of the Track.
    :ivar usage: Specifies the actual uses of the Track.
    :ivar section: Relates to the sections that are part of the Track.
    :ivar intersection: Relates to the intersections that are part of
        the Track.
    :ivar ade_of_track: Augments the Track with properties defined in an
        ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: list["TrackType.Section"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: list["TrackType.Intersection"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_track: list[AdeofTrackPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfTrack",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )

    @dataclass
    class Section(AbstractFeatureMemberType):
        """
        :ivar section:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        section: Optional[Section] = field(
            default=None,
            metadata={
                "name": "Section",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class Intersection(AbstractFeatureMemberType):
        """
        :ivar intersection:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        intersection: Optional[Intersection] = field(
            default=None,
            metadata={
                "name": "Intersection",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class WaterwayType(AbstractTransportationSpaceType):
    """
    :ivar class_value: Indicates the specific type of the Waterway.
    :ivar function: Specifies the intended purposes of the Waterway.
    :ivar usage: Specifies the actual uses of the Waterway.
    :ivar section: Relates to the sections that are part of the
        Waterway.
    :ivar intersection: Relates to the intersections that are part of
        the Waterway.
    :ivar ade_of_waterway: Augments the Waterway with properties defined
        in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: list["WaterwayType.Section"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: list["WaterwayType.Intersection"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    ade_of_waterway: list[AdeofWaterwayPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfWaterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )

    @dataclass
    class Section(AbstractFeatureMemberType):
        """
        :ivar section:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        section: Optional[Section] = field(
            default=None,
            metadata={
                "name": "Section",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class Intersection(AbstractFeatureMemberType):
        """
        :ivar intersection:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        intersection: Optional[Intersection] = field(
            default=None,
            metadata={
                "name": "Intersection",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class AbstractTunnelType(AbstractConstructionType):
    """
    :ivar class_value: Indicates the specific type of the Tunnel or
        TunnelPart.
    :ivar function: Specifies the intended purposes of the Tunnel or
        TunnelPart.
    :ivar usage: Specifies the actual uses of the Tunnel or TunnelPart.
    :ivar tunnel_constructive_element: Relates the constructive elements
        to the Tunnel or TunnelPart.
    :ivar tunnel_installation: Relates the installation objects to the
        Tunnel or TunnelPart.
    :ivar hollow_space: Relates the hollow spaces to the Tunnel or
        TunnelPart.
    :ivar tunnel_furniture: Relates the furniture objects to the Tunnel
        or TunnelPart.
    :ivar ade_of_abstract_tunnel: Augments AbstractTunnel with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel_constructive_element: list[
        "AbstractTunnelType.TunnelConstructiveElement"
    ] = field(
        default_factory=list,
        metadata={
            "name": "tunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel_installation: list["AbstractTunnelType.TunnelInstallation"] = field(
        default_factory=list,
        metadata={
            "name": "tunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    hollow_space: list["AbstractTunnelType.HollowSpace"] = field(
        default_factory=list,
        metadata={
            "name": "hollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel_furniture: list["AbstractTunnelType.TunnelFurniture"] = field(
        default_factory=list,
        metadata={
            "name": "tunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    ade_of_abstract_tunnel: list[AdeofAbstractTunnelPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfAbstractTunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )

    @dataclass
    class TunnelConstructiveElement(AbstractFeatureMemberType):
        tunnel_constructive_element: Optional[TunnelConstructiveElement] = (
            field(
                default=None,
                metadata={
                    "name": "TunnelConstructiveElement",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
                    "required": True,
                },
            )
        )

    @dataclass
    class TunnelInstallation(AbstractFeatureMemberType):
        tunnel_installation: Optional[TunnelInstallation] = field(
            default=None,
            metadata={
                "name": "TunnelInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
                "required": True,
            },
        )

    @dataclass
    class HollowSpace(AbstractFeatureMemberType):
        hollow_space: Optional[HollowSpace] = field(
            default=None,
            metadata={
                "name": "HollowSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
                "required": True,
            },
        )

    @dataclass
    class TunnelFurniture(AbstractFeatureMemberType):
        tunnel_furniture: Optional[TunnelFurniture] = field(
            default=None,
            metadata={
                "name": "TunnelFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
                "required": True,
            },
        )


@dataclass
class TunnelConstructiveElementPropertyType:
    """
    :ivar tunnel_constructive_element:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    tunnel_constructive_element: Optional[TunnelConstructiveElement] = field(
        default=None,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CompoundCrs(CompoundCrstype):
    """Gml:CompundCRS is a coordinate reference system describing the position of
    points through two or more independent coordinate reference systems.

    It is associated with a non-repeating sequence of two or more
    instances of SingleCRS.
    """

    class Meta:
        name = "CompoundCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivedCrs(DerivedCrstype1):
    """Gml:DerivedCRS is a single coordinate reference system that is defined by
    its coordinate conversion from another single coordinate reference system known
    as the base CRS.

    The base CRS can be a projected coordinate reference system, if this
    DerivedCRS is used for a georectified grid coverage as described in
    ISO 19123, Clause 8.
    """

    class Meta:
        name = "DerivedCRS"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractBridge(AbstractBridgeType):
    """
    AbstractBridge is an abstract superclass representing the common attributes and
    associations of the classes Bridge and BridgePart.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class BridgePartType(AbstractBridgeType):
    """
    :ivar ade_of_bridge_part: Augments the BridgePart with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    ade_of_bridge_part: list[AdeofBridgePartPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )


@dataclass
class AbstractBuilding(AbstractBuildingType):
    """
    AbstractBuilding is an abstract superclass representing the common attributes
    and associations of the classes Building and BuildingPart.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class BuildingPartType(AbstractBuildingType):
    """
    :ivar ade_of_building_part: Augments the BuildingPart with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    ade_of_building_part: list[AdeofBuildingPartPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )


@dataclass
class Railway(RailwayType):
    """
    A Railway is a transportation space used by wheeled vehicles on rails.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class Road(RoadType):
    """
    A Road is a transportation space used by vehicles, bicycles and/or pedestrians.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class Track1(TrackType):
    """A Track is a small path mainly used by pedestrians.

    Tracks can be segmented into Sections and Intersections.
    """

    class Meta:
        name = "Track"
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class Waterway(WaterwayType):
    """
    A Waterway is a transportation space used for the movement of vessels upon or
    within a water body.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/transportation/3.0"


@dataclass
class AbstractTunnel(AbstractTunnelType):
    """
    AbstractTunnel is an abstract superclass representing the common attributes and
    associations of the classes Tunnel and TunnelPart.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class TunnelPartType(AbstractTunnelType):
    """
    :ivar ade_of_tunnel_part: Augments the TunnelPart with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    ade_of_tunnel_part: list[AdeofTunnelPartPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfTunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )


@dataclass
class CompoundCrspropertyType:
    """
    Gml:CompoundCRSPropertyType is a property type for association roles to a
    compound coordinate reference system, either referencing or containing the
    definition of that reference system.

    :ivar compound_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "CompoundCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    compound_crs: Optional[CompoundCrs] = field(
        default=None,
        metadata={
            "name": "CompoundCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DerivedCrspropertyType:
    """
    Gml:DerivedCRSPropertyType is a property type for association roles to a non-
    projected derived coordinate reference system, either referencing or containing
    the definition of that reference system.

    :ivar derived_crs:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        name = "DerivedCRSPropertyType"
        target_namespace = "http://www.opengis.net/gml/3.2"

    derived_crs: Optional[DerivedCrs] = field(
        default=None,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class DictionaryEntryType(AbstractMemberType):
    """
    :ivar definition_proxy:
    :ivar definition_collection:
    :ivar time_ordinal_reference_system:
    :ivar time_clock:
    :ivar time_calendar:
    :ivar time_coordinate_system:
    :ivar time_reference_system:
    :ivar operation_parameter_group:
    :ivar operation_parameter:
    :ivar operation_method:
    :ivar concatenated_operation:
    :ivar transformation:
    :ivar conversion:
    :ivar pass_through_operation:
    :ivar prime_meridian:
    :ivar ellipsoid:
    :ivar temporal_datum:
    :ivar vertical_datum:
    :ivar image_datum:
    :ivar engineering_datum:
    :ivar geodetic_datum:
    :ivar oblique_cartesian_cs:
    :ivar temporal_cs:
    :ivar affine_cs:
    :ivar cylindrical_cs:
    :ivar polar_cs:
    :ivar spherical_cs:
    :ivar user_defined_cs:
    :ivar linear_cs:
    :ivar time_cs:
    :ivar vertical_cs:
    :ivar cartesian_cs:
    :ivar ellipsoidal_cs:
    :ivar coordinate_system_axis:
    :ivar compound_crs:
    :ivar geocentric_crs:
    :ivar geographic_crs:
    :ivar temporal_crs:
    :ivar image_crs:
    :ivar engineering_crs:
    :ivar vertical_crs:
    :ivar geodetic_crs:
    :ivar derived_crs:
    :ivar projected_crs:
    :ivar conventional_unit:
    :ivar derived_unit:
    :ivar base_unit:
    :ivar unit_definition:
    :ivar dictionary:
    :ivar definition:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    definition_proxy: Optional[DefinitionProxy] = field(
        default=None,
        metadata={
            "name": "DefinitionProxy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    definition_collection: Optional[DefinitionCollection] = field(
        default=None,
        metadata={
            "name": "DefinitionCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_ordinal_reference_system: Optional[TimeOrdinalReferenceSystem] = (
        field(
            default=None,
            metadata={
                "name": "TimeOrdinalReferenceSystem",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
    )
    time_clock: Optional[TimeClock] = field(
        default=None,
        metadata={
            "name": "TimeClock",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_calendar: Optional[TimeCalendar] = field(
        default=None,
        metadata={
            "name": "TimeCalendar",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_coordinate_system: Optional[TimeCoordinateSystem] = field(
        default=None,
        metadata={
            "name": "TimeCoordinateSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_reference_system: Optional[TimeReferenceSystem] = field(
        default=None,
        metadata={
            "name": "TimeReferenceSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter_group: Optional[OperationParameterGroup] = field(
        default=None,
        metadata={
            "name": "OperationParameterGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter: Optional[OperationParameter1] = field(
        default=None,
        metadata={
            "name": "OperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_method: Optional[OperationMethod] = field(
        default=None,
        metadata={
            "name": "OperationMethod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    concatenated_operation: Optional[ConcatenatedOperation] = field(
        default=None,
        metadata={
            "name": "ConcatenatedOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    transformation: Optional[Transformation] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: Optional[Conversion1] = field(
        default=None,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pass_through_operation: Optional[PassThroughOperation] = field(
        default=None,
        metadata={
            "name": "PassThroughOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    prime_meridian: Optional[PrimeMeridian1] = field(
        default=None,
        metadata={
            "name": "PrimeMeridian",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoid: Optional[Ellipsoid1] = field(
        default=None,
        metadata={
            "name": "Ellipsoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_datum: Optional[TemporalDatum1] = field(
        default=None,
        metadata={
            "name": "TemporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_datum: Optional[VerticalDatum1] = field(
        default=None,
        metadata={
            "name": "VerticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_datum: Optional[ImageDatum1] = field(
        default=None,
        metadata={
            "name": "ImageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_datum: Optional[EngineeringDatum1] = field(
        default=None,
        metadata={
            "name": "EngineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_datum: Optional[GeodeticDatum1] = field(
        default=None,
        metadata={
            "name": "GeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    oblique_cartesian_cs: Optional[ObliqueCartesianCs] = field(
        default=None,
        metadata={
            "name": "ObliqueCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_cs: Optional[TemporalCs] = field(
        default=None,
        metadata={
            "name": "TemporalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    affine_cs: Optional[AffineCs1] = field(
        default=None,
        metadata={
            "name": "AffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cylindrical_cs: Optional[CylindricalCs1] = field(
        default=None,
        metadata={
            "name": "CylindricalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polar_cs: Optional[PolarCs1] = field(
        default=None,
        metadata={
            "name": "PolarCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    spherical_cs: Optional[SphericalCs1] = field(
        default=None,
        metadata={
            "name": "SphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    user_defined_cs: Optional[UserDefinedCs1] = field(
        default=None,
        metadata={
            "name": "UserDefinedCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_cs: Optional[LinearCs1] = field(
        default=None,
        metadata={
            "name": "LinearCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_cs: Optional[TimeCs1] = field(
        default=None,
        metadata={
            "name": "TimeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_cs: Optional[VerticalCs1] = field(
        default=None,
        metadata={
            "name": "VerticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: Optional[CartesianCs1] = field(
        default=None,
        metadata={
            "name": "CartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoidal_cs: Optional[EllipsoidalCs1] = field(
        default=None,
        metadata={
            "name": "EllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinate_system_axis: Optional[CoordinateSystemAxis] = field(
        default=None,
        metadata={
            "name": "CoordinateSystemAxis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    compound_crs: Optional[CompoundCrs] = field(
        default=None,
        metadata={
            "name": "CompoundCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geocentric_crs: Optional[GeocentricCrs] = field(
        default=None,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geographic_crs: Optional[GeographicCrs] = field(
        default=None,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_crs: Optional[TemporalCrs] = field(
        default=None,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_crs: Optional[ImageCrs] = field(
        default=None,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_crs: Optional[EngineeringCrs] = field(
        default=None,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_crs: Optional[VerticalCrs] = field(
        default=None,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_crs: Optional[GeodeticCrs] = field(
        default=None,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_crs: Optional[DerivedCrs] = field(
        default=None,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    projected_crs: Optional[ProjectedCrs] = field(
        default=None,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conventional_unit: Optional[ConventionalUnit] = field(
        default=None,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: Optional[DerivedUnit] = field(
        default=None,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: Optional[BaseUnit] = field(
        default=None,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: Optional[UnitDefinition] = field(
        default=None,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dictionary: Optional[Dictionary] = field(
        default=None,
        metadata={
            "name": "Dictionary",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    definition: Optional[Definition] = field(
        default=None,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractUnoccupiedSpacePropertyType:
    """
    :ivar hollow_space:
    :ivar traffic_space:
    :ivar hole:
    :ivar clearance_space:
    :ivar auxiliary_traffic_space:
    :ivar waterway:
    :ivar track:
    :ivar square:
    :ivar section:
    :ivar road:
    :ivar railway:
    :ivar intersection:
    :ivar generic_unoccupied_space:
    :ivar building_room:
    :ivar bridge_room:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    hollow_space: Optional[HollowSpace] = field(
        default=None,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    traffic_space: Optional[TrafficSpace] = field(
        default=None,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole: Optional[Hole] = field(
        default=None,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    clearance_space: Optional[ClearanceSpace] = field(
        default=None,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    waterway: Optional[Waterway] = field(
        default=None,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    track: Optional[Track1] = field(
        default=None,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    square: Optional[Square] = field(
        default=None,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: Optional[Section] = field(
        default=None,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    road: Optional[Road] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    railway: Optional[Railway] = field(
        default=None,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: Optional[Intersection] = field(
        default=None,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    building_room: Optional[BuildingRoom] = field(
        default=None,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_room: Optional[BridgeRoom] = field(
        default=None,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BridgePart(BridgePartType):
    """A BridgePart is a physical or functional subdivision of a Bridge.

    It would be considered a Bridge, if it were not part of a collection
    of other BridgeParts.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class BuildingPart(BuildingPartType):
    """A BuildingPart is a physical or functional subdivision of a Building.

    It would be considered a Building, if it were not part of a
    collection of other BuildingParts.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class AbstractTransportationSpacePropertyType:
    """
    :ivar waterway:
    :ivar track:
    :ivar square:
    :ivar section:
    :ivar road:
    :ivar railway:
    :ivar intersection:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    waterway: Optional[Waterway] = field(
        default=None,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    track: Optional[Track1] = field(
        default=None,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    square: Optional[Square] = field(
        default=None,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: Optional[Section] = field(
        default=None,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    road: Optional[Road] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    railway: Optional[Railway] = field(
        default=None,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: Optional[Intersection] = field(
        default=None,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class RailwayPropertyType:
    """
    :ivar railway:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    railway: Optional[Railway] = field(
        default=None,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class RoadPropertyType:
    """
    :ivar road:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    road: Optional[Road] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TrackPropertyType:
    """
    :ivar track:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    track: Optional[Track1] = field(
        default=None,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class WaterwayPropertyType:
    """
    :ivar waterway:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/transportation/3.0"

    waterway: Optional[Waterway] = field(
        default=None,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TunnelPart(TunnelPartType):
    """A TunnelPart is a physical or functional subdivision of a Tunnel.

    It would be considered a Tunnel, if it were not part of a collection
    of other TunnelParts.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class CompoundCrsref(CompoundCrspropertyType):
    class Meta:
        name = "compoundCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DefinitionMember(DictionaryEntryType):
    class Meta:
        name = "definitionMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DerivedCrsref(DerivedCrspropertyType):
    class Meta:
        name = "derivedCRSRef"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DictionaryEntry(DictionaryEntryType):
    """This property element contains or refers to the definitions which are
    members of a dictionary.

    The content model follows the standard GML property pattern, so a
    gml:dictionaryEntry may either contain or refer to a single
    gml:Definition. Since gml:Dictionary is substitutable for
    gml:Definition, the content of an entry may itself be a lower level
    dictionary. Note that if the value is provided by reference, this
    definition does not carry a handle (gml:id) in this context, so does
    not allow external references to this specific definition in this
    context.  When used in this way the referenced definition will
    usually be in a dictionary in the same XML document.
    """

    class Meta:
        name = "dictionaryEntry"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class BridgePartPropertyType:
    """
    :ivar bridge_part:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BridgeType(AbstractBridgeType):
    """
    :ivar bridge_part: Relates the bridge parts to the Bridge.
    :ivar ade_of_bridge: Augments the Bridge with properties defined in
        an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    bridge_part: list["BridgeType.BridgePart"] = field(
        default_factory=list,
        metadata={
            "name": "bridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    ade_of_bridge: list[AdeofBridgePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )

    @dataclass
    class BridgePart(AbstractFeatureMemberType):
        """
        :ivar bridge_part:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        bridge_part: Optional[BridgePart] = field(
            default=None,
            metadata={
                "name": "BridgePart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class BuildingPartPropertyType:
    """
    :ivar building_part:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BuildingType(AbstractBuildingType):
    """
    :ivar building_part: Relates the building parts to the Building.
    :ivar ade_of_building: Augments the Building with properties defined
        in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    building_part: list["BuildingType.BuildingPart"] = field(
        default_factory=list,
        metadata={
            "name": "buildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    ade_of_building: list[AdeofBuildingPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfBuilding",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )

    @dataclass
    class BuildingPart(AbstractFeatureMemberType):
        """
        :ivar building_part:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        building_part: Optional[BuildingPart] = field(
            default=None,
            metadata={
                "name": "BuildingPart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class TunnelPartPropertyType:
    """
    :ivar tunnel_part:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TunnelType(AbstractTunnelType):
    """
    :ivar tunnel_part: Relates the tunnel parts to the Tunnel.
    :ivar ade_of_tunnel: Augments the Tunnel with properties defined in
        an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    tunnel_part: list["TunnelType.TunnelPart"] = field(
        default_factory=list,
        metadata={
            "name": "tunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    ade_of_tunnel: list[AdeofTunnelPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfTunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )

    @dataclass
    class TunnelPart(AbstractFeatureMemberType):
        """
        :ivar tunnel_part:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        tunnel_part: Optional[TunnelPart] = field(
            default=None,
            metadata={
                "name": "TunnelPart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class Bridge(BridgeType):
    """A Bridge represents a structure that affords the passage of pedestrians,
    animals, vehicles, and service(s) above obstacles or between two points at a
    height above ground.

    [cf. ISO 6707-1]
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/bridge/3.0"


@dataclass
class Building(BuildingType):
    """A Building is a free-standing, self-supporting construction that is roofed,
    usually walled, and can be entered by humans and is normally designed to stand
    permanently in one place.

    It is intended for human occupancy (e.g. a place of work or
    recreation), habitation and/or shelter of humans, animals or things.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/building/3.0"


@dataclass
class Tunnel(TunnelType):
    """A Tunnel represents a horizontal or sloping enclosed passage way of a
    certain length, mainly underground or underwater.

    [cf. ISO 6707-1]
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/tunnel/3.0"


@dataclass
class AbstractCityObjectPropertyType:
    """
    :ivar relief_feature:
    :ivar tinrelief:
    :ivar raster_relief:
    :ivar mass_point_relief:
    :ivar breakline_relief:
    :ivar water_surface:
    :ivar water_ground_surface:
    :ivar traffic_area:
    :ivar marking:
    :ivar hole_surface:
    :ivar auxiliary_traffic_area:
    :ivar land_use:
    :ivar generic_thematic_surface:
    :ivar window_surface:
    :ivar door_surface:
    :ivar wall_surface:
    :ivar roof_surface:
    :ivar outer_floor_surface:
    :ivar outer_ceiling_surface:
    :ivar interior_wall_surface:
    :ivar ground_surface:
    :ivar floor_surface:
    :ivar ceiling_surface:
    :ivar closure_surface:
    :ivar hollow_space:
    :ivar traffic_space:
    :ivar hole:
    :ivar clearance_space:
    :ivar auxiliary_traffic_space:
    :ivar waterway:
    :ivar track:
    :ivar square:
    :ivar section:
    :ivar road:
    :ivar railway:
    :ivar intersection:
    :ivar generic_unoccupied_space:
    :ivar building_room:
    :ivar bridge_room:
    :ivar water_body:
    :ivar solitary_vegetation_object:
    :ivar plant_cover:
    :ivar generic_occupied_space:
    :ivar city_furniture:
    :ivar tunnel_installation:
    :ivar building_installation:
    :ivar bridge_installation:
    :ivar tunnel_furniture:
    :ivar building_furniture:
    :ivar bridge_furniture:
    :ivar window:
    :ivar door:
    :ivar tunnel_constructive_element:
    :ivar building_constructive_element:
    :ivar bridge_constructive_element:
    :ivar tunnel_part:
    :ivar tunnel:
    :ivar building_part:
    :ivar building:
    :ivar bridge_part:
    :ivar bridge:
    :ivar other_construction:
    :ivar generic_logical_space:
    :ivar city_object_group:
    :ivar storey:
    :ivar building_unit:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    relief_feature: Optional[ReliefFeature] = field(
        default=None,
        metadata={
            "name": "ReliefFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    tinrelief: Optional[Tinrelief] = field(
        default=None,
        metadata={
            "name": "TINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    raster_relief: Optional[RasterRelief] = field(
        default=None,
        metadata={
            "name": "RasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    mass_point_relief: Optional[MassPointRelief] = field(
        default=None,
        metadata={
            "name": "MassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    breakline_relief: Optional[BreaklineRelief] = field(
        default=None,
        metadata={
            "name": "BreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    water_surface: Optional[WaterSurface] = field(
        default=None,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    water_ground_surface: Optional[WaterGroundSurface] = field(
        default=None,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    traffic_area: Optional[TrafficArea] = field(
        default=None,
        metadata={
            "name": "TrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    marking: Optional[Marking] = field(
        default=None,
        metadata={
            "name": "Marking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole_surface: Optional[HoleSurface] = field(
        default=None,
        metadata={
            "name": "HoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    land_use: Optional[LandUse] = field(
        default=None,
        metadata={
            "name": "LandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    generic_thematic_surface: Optional[GenericThematicSurface] = field(
        default=None,
        metadata={
            "name": "GenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    window_surface: Optional[WindowSurface] = field(
        default=None,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door_surface: Optional[DoorSurface] = field(
        default=None,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    wall_surface: Optional[WallSurface] = field(
        default=None,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    roof_surface: Optional[RoofSurface] = field(
        default=None,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_floor_surface: Optional[OuterFloorSurface] = field(
        default=None,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
        default=None,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    interior_wall_surface: Optional[InteriorWallSurface] = field(
        default=None,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ground_surface: Optional[GroundSurface] = field(
        default=None,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    floor_surface: Optional[FloorSurface] = field(
        default=None,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ceiling_surface: Optional[CeilingSurface] = field(
        default=None,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    closure_surface: Optional[ClosureSurface] = field(
        default=None,
        metadata={
            "name": "ClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    hollow_space: Optional[HollowSpace] = field(
        default=None,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    traffic_space: Optional[TrafficSpace] = field(
        default=None,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole: Optional[Hole] = field(
        default=None,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    clearance_space: Optional[ClearanceSpace] = field(
        default=None,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    waterway: Optional[Waterway] = field(
        default=None,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    track: Optional[Track1] = field(
        default=None,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    square: Optional[Square] = field(
        default=None,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: Optional[Section] = field(
        default=None,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    road: Optional[Road] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    railway: Optional[Railway] = field(
        default=None,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: Optional[Intersection] = field(
        default=None,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    building_room: Optional[BuildingRoom] = field(
        default=None,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_room: Optional[BridgeRoom] = field(
        default=None,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    water_body: Optional[WaterBody] = field(
        default=None,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
        default=None,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    plant_cover: Optional[PlantCover] = field(
        default=None,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    generic_occupied_space: Optional[GenericOccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_furniture: Optional[CityFurniture] = field(
        default=None,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    tunnel_installation: Optional[TunnelInstallation] = field(
        default=None,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_installation: Optional[BuildingInstallation] = field(
        default=None,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_installation: Optional[BridgeInstallation] = field(
        default=None,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_furniture: Optional[TunnelFurniture] = field(
        default=None,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_furniture: Optional[BuildingFurniture] = field(
        default=None,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_furniture: Optional[BridgeFurniture] = field(
        default=None,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    window: Optional[Window] = field(
        default=None,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door: Optional[Door] = field(
        default=None,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    tunnel_constructive_element: Optional[TunnelConstructiveElement] = field(
        default=None,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_constructive_element: Optional[BuildingConstructiveElement] = (
        field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    bridge_constructive_element: Optional[BridgeConstructiveElement] = field(
        default=None,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    other_construction: Optional[OtherConstruction] = field(
        default=None,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    generic_logical_space: Optional[GenericLogicalSpace] = field(
        default=None,
        metadata={
            "name": "GenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_object_group: Optional["CityObjectGroup"] = field(
        default=None,
        metadata={
            "name": "CityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    storey: Optional[Storey] = field(
        default=None,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_unit: Optional[BuildingUnit] = field(
        default=None,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractOccupiedSpacePropertyType:
    """
    :ivar water_body:
    :ivar solitary_vegetation_object:
    :ivar plant_cover:
    :ivar generic_occupied_space:
    :ivar city_furniture:
    :ivar tunnel_installation:
    :ivar building_installation:
    :ivar bridge_installation:
    :ivar tunnel_furniture:
    :ivar building_furniture:
    :ivar bridge_furniture:
    :ivar window:
    :ivar door:
    :ivar tunnel_constructive_element:
    :ivar building_constructive_element:
    :ivar bridge_constructive_element:
    :ivar tunnel_part:
    :ivar tunnel:
    :ivar building_part:
    :ivar building:
    :ivar bridge_part:
    :ivar bridge:
    :ivar other_construction:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    water_body: Optional[WaterBody] = field(
        default=None,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
        default=None,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    plant_cover: Optional[PlantCover] = field(
        default=None,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    generic_occupied_space: Optional[GenericOccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_furniture: Optional[CityFurniture] = field(
        default=None,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    tunnel_installation: Optional[TunnelInstallation] = field(
        default=None,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_installation: Optional[BuildingInstallation] = field(
        default=None,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_installation: Optional[BridgeInstallation] = field(
        default=None,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_furniture: Optional[TunnelFurniture] = field(
        default=None,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_furniture: Optional[BuildingFurniture] = field(
        default=None,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_furniture: Optional[BridgeFurniture] = field(
        default=None,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    window: Optional[Window] = field(
        default=None,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door: Optional[Door] = field(
        default=None,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    tunnel_constructive_element: Optional[TunnelConstructiveElement] = field(
        default=None,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_constructive_element: Optional[BuildingConstructiveElement] = (
        field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    bridge_constructive_element: Optional[BridgeConstructiveElement] = field(
        default=None,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    other_construction: Optional[OtherConstruction] = field(
        default=None,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractPhysicalSpacePropertyType:
    """
    :ivar hollow_space:
    :ivar traffic_space:
    :ivar hole:
    :ivar clearance_space:
    :ivar auxiliary_traffic_space:
    :ivar waterway:
    :ivar track:
    :ivar square:
    :ivar section:
    :ivar road:
    :ivar railway:
    :ivar intersection:
    :ivar generic_unoccupied_space:
    :ivar building_room:
    :ivar bridge_room:
    :ivar water_body:
    :ivar solitary_vegetation_object:
    :ivar plant_cover:
    :ivar generic_occupied_space:
    :ivar city_furniture:
    :ivar tunnel_installation:
    :ivar building_installation:
    :ivar bridge_installation:
    :ivar tunnel_furniture:
    :ivar building_furniture:
    :ivar bridge_furniture:
    :ivar window:
    :ivar door:
    :ivar tunnel_constructive_element:
    :ivar building_constructive_element:
    :ivar bridge_constructive_element:
    :ivar tunnel_part:
    :ivar tunnel:
    :ivar building_part:
    :ivar building:
    :ivar bridge_part:
    :ivar bridge:
    :ivar other_construction:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    hollow_space: Optional[HollowSpace] = field(
        default=None,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    traffic_space: Optional[TrafficSpace] = field(
        default=None,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole: Optional[Hole] = field(
        default=None,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    clearance_space: Optional[ClearanceSpace] = field(
        default=None,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    waterway: Optional[Waterway] = field(
        default=None,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    track: Optional[Track1] = field(
        default=None,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    square: Optional[Square] = field(
        default=None,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: Optional[Section] = field(
        default=None,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    road: Optional[Road] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    railway: Optional[Railway] = field(
        default=None,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: Optional[Intersection] = field(
        default=None,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    building_room: Optional[BuildingRoom] = field(
        default=None,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_room: Optional[BridgeRoom] = field(
        default=None,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    water_body: Optional[WaterBody] = field(
        default=None,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
        default=None,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    plant_cover: Optional[PlantCover] = field(
        default=None,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    generic_occupied_space: Optional[GenericOccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_furniture: Optional[CityFurniture] = field(
        default=None,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    tunnel_installation: Optional[TunnelInstallation] = field(
        default=None,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_installation: Optional[BuildingInstallation] = field(
        default=None,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_installation: Optional[BridgeInstallation] = field(
        default=None,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_furniture: Optional[TunnelFurniture] = field(
        default=None,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_furniture: Optional[BuildingFurniture] = field(
        default=None,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_furniture: Optional[BridgeFurniture] = field(
        default=None,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    window: Optional[Window] = field(
        default=None,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door: Optional[Door] = field(
        default=None,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    tunnel_constructive_element: Optional[TunnelConstructiveElement] = field(
        default=None,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_constructive_element: Optional[BuildingConstructiveElement] = (
        field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    bridge_constructive_element: Optional[BridgeConstructiveElement] = field(
        default=None,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    other_construction: Optional[OtherConstruction] = field(
        default=None,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractBridgePropertyType:
    """
    :ivar bridge_part:
    :ivar bridge:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BridgePropertyType:
    """
    :ivar bridge:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/bridge/3.0"

    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractBuildingPropertyType:
    """
    :ivar building_part:
    :ivar building:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class BuildingPropertyType:
    """
    :ivar building:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/building/3.0"

    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractConstructionPropertyType:
    """
    :ivar tunnel_part:
    :ivar tunnel:
    :ivar building_part:
    :ivar building:
    :ivar bridge_part:
    :ivar bridge:
    :ivar other_construction:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/construction/3.0"

    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    other_construction: Optional[OtherConstruction] = field(
        default=None,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractTunnelPropertyType:
    """
    :ivar tunnel_part:
    :ivar tunnel:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class TunnelPropertyType:
    """
    :ivar tunnel:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/tunnel/3.0"

    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CityObjectRelationType(AbstractGmltype):
    """
    :ivar generic_attribute: Relates generic attributes to the
        CityObjectRelation.
    :ivar relation_type: Indicates the specific type of the
        CityObjectRelation.
    :ivar related_to: Relates other city objects to the city object. It
        also describes how the city objects are related to each other.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    generic_attribute: list[AbstractGenericAttributePropertyType] = field(
        default_factory=list,
        metadata={
            "name": "genericAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    relation_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "relationType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )
    related_to: Optional[AbstractCityObjectPropertyType] = field(
        default=None,
        metadata={
            "name": "relatedTo",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "required": True,
        },
    )


@dataclass
class CityObjectGroupType(AbstractLogicalSpaceType):
    """
    :ivar class_value: Indicates the specific type of the
        CityObjectGroup.
    :ivar function: Specifies the intended purposes of the
        CityObjectGroup.
    :ivar usage: Specifies the actual usages of the CityObjectGroup.
    :ivar group_member: Relates to the city objects that are part of the
        CityObjectGroup.
    :ivar parent: Relates to a city object to which the CityObjectGroup
        belongs.
    :ivar ade_of_city_object_group: Augments the CityObjectGroup with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/cityobjectgroup/3.0"

    class_value: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "class",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    function: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    usage: list[CodeType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    group_member: list["CityObjectGroupType.GroupMember"] = field(
        default_factory=list,
        metadata={
            "name": "groupMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    parent: Optional[AbstractCityObjectPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    ade_of_city_object_group: list[AdeofCityObjectGroupPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfCityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )

    @dataclass
    class GroupMember(AbstractFeatureMemberType):
        """
        :ivar role:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role_attribute: A URI with a minimum length of 1
            character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        role: Optional["Role"] = field(
            default=None,
            metadata={
                "name": "Role",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role_attribute: Optional[str] = field(
            default=None,
            metadata={
                "name": "role",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class SensorConnectionType:
    """
    :ivar connection_type: Indicates the type of Sensor API to which the
        SensorConnection refers.
    :ivar observation_property: Specifies the phenomenon for which the
        SensorConnection provides observations.
    :ivar uom: Specifies the unit of measurement of the observations.
    :ivar sensor_id: Specifies the unique identifier of the sensor from
        which the SensorConnection retrieves observations.
    :ivar sensor_name: Specifies the name of the sensor from which the
        SensorConnection retrieves observations.
    :ivar observation_id: Specifies the unique identifier of the
        observation that is retrieved by the SensorConnection.
    :ivar datastream_id: Specifies the datastream that is retrieved by
        the SensorConnection.
    :ivar base_url: Specifies the base URL of the Sensor API request.
    :ivar auth_type: Specifies the type of authentication required to be
        able to access the Sensor API.
    :ivar mqtt_server: Specifies the name of the MQTT Server. This
        attribute is relevant when the MQTT Protocol is used to connect
        to a Sensor API.
    :ivar mqtt_topic: Names the specific datastream that is retrieved by
        the SensorConnection. This attribute is relevant when the MQTT
        Protocol is used to connect to a Sensor API.
    :ivar link_to_observation: Specifies the complete URL to the
        observation request.
    :ivar link_to_sensor_description: Specifies the complete URL to the
        sensor description request.
    :ivar sensor_location: Relates the sensor to the city object where
        it is located.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    connection_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "connectionType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    observation_property: Optional[str] = field(
        default=None,
        metadata={
            "name": "observationProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    sensor_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "sensorID",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    sensor_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "sensorName",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    observation_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "observationID",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    datastream_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "datastreamID",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    base_url: Optional[str] = field(
        default=None,
        metadata={
            "name": "baseURL",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    auth_type: Optional[CodeType] = field(
        default=None,
        metadata={
            "name": "authType",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    mqtt_server: Optional[str] = field(
        default=None,
        metadata={
            "name": "mqttServer",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    mqtt_topic: Optional[str] = field(
        default=None,
        metadata={
            "name": "mqttTopic",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    link_to_observation: Optional[str] = field(
        default=None,
        metadata={
            "name": "linkToObservation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    link_to_sensor_description: Optional[str] = field(
        default=None,
        metadata={
            "name": "linkToSensorDescription",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    sensor_location: Optional[AbstractCityObjectPropertyType] = field(
        default=None,
        metadata={
            "name": "sensorLocation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )


@dataclass
class CityObjectRelation(CityObjectRelationType):
    """
    CityObjectRelation represents a specific relation from the city object in which
    it is included to another city object.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class CityObjectGroup(CityObjectGroupType):
    """A CityObjectGroup represents an application-specific aggregation of city
    objects according to some user-defined criteria.

    Examples for groups are the buildings in a specific region, the
    result of a query, or objects put together for visualization
    purposes. Each member of a group may be qualified by a role name,
    reflecting the role each city object plays in the context of the
    group.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/cityobjectgroup/3.0"


@dataclass
class SensorConnection(SensorConnectionType):
    """A SensorConnection provides all details that are required to retrieve a
    specific datastream from an external sensor web service.

    It comprises the service type (e.g. OGC SensorThings API, OGC Sensor
    Observation Services, MQTT, proprietary platforms), the URL of the
    sensor service, the identifier for the sensor or thing, and its
    observed property as well as information about the required
    authentication method.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AbstractLogicalSpacePropertyType:
    """
    :ivar generic_logical_space:
    :ivar city_object_group:
    :ivar storey:
    :ivar building_unit:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    generic_logical_space: Optional[GenericLogicalSpace] = field(
        default=None,
        metadata={
            "name": "GenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_object_group: Optional[CityObjectGroup] = field(
        default=None,
        metadata={
            "name": "CityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    storey: Optional[Storey] = field(
        default=None,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_unit: Optional[BuildingUnit] = field(
        default=None,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractSpacePropertyType:
    """
    :ivar hollow_space:
    :ivar traffic_space:
    :ivar hole:
    :ivar clearance_space:
    :ivar auxiliary_traffic_space:
    :ivar waterway:
    :ivar track:
    :ivar square:
    :ivar section:
    :ivar road:
    :ivar railway:
    :ivar intersection:
    :ivar generic_unoccupied_space:
    :ivar building_room:
    :ivar bridge_room:
    :ivar water_body:
    :ivar solitary_vegetation_object:
    :ivar plant_cover:
    :ivar generic_occupied_space:
    :ivar city_furniture:
    :ivar tunnel_installation:
    :ivar building_installation:
    :ivar bridge_installation:
    :ivar tunnel_furniture:
    :ivar building_furniture:
    :ivar bridge_furniture:
    :ivar window:
    :ivar door:
    :ivar tunnel_constructive_element:
    :ivar building_constructive_element:
    :ivar bridge_constructive_element:
    :ivar tunnel_part:
    :ivar tunnel:
    :ivar building_part:
    :ivar building:
    :ivar bridge_part:
    :ivar bridge:
    :ivar other_construction:
    :ivar generic_logical_space:
    :ivar city_object_group:
    :ivar storey:
    :ivar building_unit:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    hollow_space: Optional[HollowSpace] = field(
        default=None,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    traffic_space: Optional[TrafficSpace] = field(
        default=None,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole: Optional[Hole] = field(
        default=None,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    clearance_space: Optional[ClearanceSpace] = field(
        default=None,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    waterway: Optional[Waterway] = field(
        default=None,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    track: Optional[Track1] = field(
        default=None,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    square: Optional[Square] = field(
        default=None,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: Optional[Section] = field(
        default=None,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    road: Optional[Road] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    railway: Optional[Railway] = field(
        default=None,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: Optional[Intersection] = field(
        default=None,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    building_room: Optional[BuildingRoom] = field(
        default=None,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_room: Optional[BridgeRoom] = field(
        default=None,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    water_body: Optional[WaterBody] = field(
        default=None,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
        default=None,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    plant_cover: Optional[PlantCover] = field(
        default=None,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    generic_occupied_space: Optional[GenericOccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_furniture: Optional[CityFurniture] = field(
        default=None,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    tunnel_installation: Optional[TunnelInstallation] = field(
        default=None,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_installation: Optional[BuildingInstallation] = field(
        default=None,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_installation: Optional[BridgeInstallation] = field(
        default=None,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_furniture: Optional[TunnelFurniture] = field(
        default=None,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_furniture: Optional[BuildingFurniture] = field(
        default=None,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_furniture: Optional[BridgeFurniture] = field(
        default=None,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    window: Optional[Window] = field(
        default=None,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door: Optional[Door] = field(
        default=None,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    tunnel_constructive_element: Optional[TunnelConstructiveElement] = field(
        default=None,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_constructive_element: Optional[BuildingConstructiveElement] = (
        field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    bridge_constructive_element: Optional[BridgeConstructiveElement] = field(
        default=None,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    other_construction: Optional[OtherConstruction] = field(
        default=None,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    generic_logical_space: Optional[GenericLogicalSpace] = field(
        default=None,
        metadata={
            "name": "GenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_object_group: Optional[CityObjectGroup] = field(
        default=None,
        metadata={
            "name": "CityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    storey: Optional[Storey] = field(
        default=None,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_unit: Optional[BuildingUnit] = field(
        default=None,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CityObjectRelationPropertyType:
    """
    :ivar city_object_relation:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    city_object_relation: Optional[CityObjectRelation] = field(
        default=None,
        metadata={
            "name": "CityObjectRelation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CityObjectGroupPropertyType:
    """
    :ivar city_object_group:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/cityobjectgroup/3.0"

    city_object_group: Optional[CityObjectGroup] = field(
        default=None,
        metadata={
            "name": "CityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class RoleType(AbstractGmltype):
    """
    :ivar role: Describes the role the city object plays within the
        CityObjectGroup.
    :ivar group_member: Relates to the city objects that are part of the
        CityObjectGroup.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/cityobjectgroup/3.0"

    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    group_member: Optional["RoleType.GroupMember"] = field(
        default=None,
        metadata={
            "name": "groupMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
            "required": True,
        },
    )

    @dataclass
    class GroupMember(AbstractFeatureMemberType):
        """
        :ivar relief_feature:
        :ivar tinrelief:
        :ivar raster_relief:
        :ivar mass_point_relief:
        :ivar breakline_relief:
        :ivar water_surface:
        :ivar water_ground_surface:
        :ivar traffic_area:
        :ivar marking:
        :ivar hole_surface:
        :ivar auxiliary_traffic_area:
        :ivar land_use:
        :ivar generic_thematic_surface:
        :ivar window_surface:
        :ivar door_surface:
        :ivar wall_surface:
        :ivar roof_surface:
        :ivar outer_floor_surface:
        :ivar outer_ceiling_surface:
        :ivar interior_wall_surface:
        :ivar ground_surface:
        :ivar floor_surface:
        :ivar ceiling_surface:
        :ivar closure_surface:
        :ivar hollow_space:
        :ivar traffic_space:
        :ivar hole:
        :ivar clearance_space:
        :ivar auxiliary_traffic_space:
        :ivar waterway:
        :ivar track:
        :ivar square:
        :ivar section:
        :ivar road:
        :ivar railway:
        :ivar intersection:
        :ivar generic_unoccupied_space:
        :ivar building_room:
        :ivar bridge_room:
        :ivar water_body:
        :ivar solitary_vegetation_object:
        :ivar plant_cover:
        :ivar generic_occupied_space:
        :ivar city_furniture:
        :ivar tunnel_installation:
        :ivar building_installation:
        :ivar bridge_installation:
        :ivar tunnel_furniture:
        :ivar building_furniture:
        :ivar bridge_furniture:
        :ivar window:
        :ivar door:
        :ivar tunnel_constructive_element:
        :ivar building_constructive_element:
        :ivar bridge_constructive_element:
        :ivar tunnel_part:
        :ivar tunnel:
        :ivar building_part:
        :ivar building:
        :ivar bridge_part:
        :ivar bridge:
        :ivar other_construction:
        :ivar generic_logical_space:
        :ivar city_object_group:
        :ivar storey:
        :ivar building_unit:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        relief_feature: Optional[ReliefFeature] = field(
            default=None,
            metadata={
                "name": "ReliefFeature",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        tinrelief: Optional[Tinrelief] = field(
            default=None,
            metadata={
                "name": "TINRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        raster_relief: Optional[RasterRelief] = field(
            default=None,
            metadata={
                "name": "RasterRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        mass_point_relief: Optional[MassPointRelief] = field(
            default=None,
            metadata={
                "name": "MassPointRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        breakline_relief: Optional[BreaklineRelief] = field(
            default=None,
            metadata={
                "name": "BreaklineRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        water_surface: Optional[WaterSurface] = field(
            default=None,
            metadata={
                "name": "WaterSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        water_ground_surface: Optional[WaterGroundSurface] = field(
            default=None,
            metadata={
                "name": "WaterGroundSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        traffic_area: Optional[TrafficArea] = field(
            default=None,
            metadata={
                "name": "TrafficArea",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        marking: Optional[Marking] = field(
            default=None,
            metadata={
                "name": "Marking",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        hole_surface: Optional[HoleSurface] = field(
            default=None,
            metadata={
                "name": "HoleSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
            default=None,
            metadata={
                "name": "AuxiliaryTrafficArea",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        land_use: Optional[LandUse] = field(
            default=None,
            metadata={
                "name": "LandUse",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/landuse/3.0",
            },
        )
        generic_thematic_surface: Optional[GenericThematicSurface] = field(
            default=None,
            metadata={
                "name": "GenericThematicSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        window_surface: Optional[WindowSurface] = field(
            default=None,
            metadata={
                "name": "WindowSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        door_surface: Optional[DoorSurface] = field(
            default=None,
            metadata={
                "name": "DoorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        wall_surface: Optional[WallSurface] = field(
            default=None,
            metadata={
                "name": "WallSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        roof_surface: Optional[RoofSurface] = field(
            default=None,
            metadata={
                "name": "RoofSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        outer_floor_surface: Optional[OuterFloorSurface] = field(
            default=None,
            metadata={
                "name": "OuterFloorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
            default=None,
            metadata={
                "name": "OuterCeilingSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        interior_wall_surface: Optional[InteriorWallSurface] = field(
            default=None,
            metadata={
                "name": "InteriorWallSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        ground_surface: Optional[GroundSurface] = field(
            default=None,
            metadata={
                "name": "GroundSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        floor_surface: Optional[FloorSurface] = field(
            default=None,
            metadata={
                "name": "FloorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        ceiling_surface: Optional[CeilingSurface] = field(
            default=None,
            metadata={
                "name": "CeilingSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        closure_surface: Optional[ClosureSurface] = field(
            default=None,
            metadata={
                "name": "ClosureSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
        hollow_space: Optional[HollowSpace] = field(
            default=None,
            metadata={
                "name": "HollowSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        traffic_space: Optional[TrafficSpace] = field(
            default=None,
            metadata={
                "name": "TrafficSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        hole: Optional[Hole] = field(
            default=None,
            metadata={
                "name": "Hole",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        clearance_space: Optional[ClearanceSpace] = field(
            default=None,
            metadata={
                "name": "ClearanceSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
            default=None,
            metadata={
                "name": "AuxiliaryTrafficSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        waterway: Optional[Waterway] = field(
            default=None,
            metadata={
                "name": "Waterway",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        track: Optional[Track1] = field(
            default=None,
            metadata={
                "name": "Track",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        square: Optional[Square] = field(
            default=None,
            metadata={
                "name": "Square",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        section: Optional[Section] = field(
            default=None,
            metadata={
                "name": "Section",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        road: Optional[Road] = field(
            default=None,
            metadata={
                "name": "Road",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        railway: Optional[Railway] = field(
            default=None,
            metadata={
                "name": "Railway",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        intersection: Optional[Intersection] = field(
            default=None,
            metadata={
                "name": "Intersection",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
            default=None,
            metadata={
                "name": "GenericUnoccupiedSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        building_room: Optional[BuildingRoom] = field(
            default=None,
            metadata={
                "name": "BuildingRoom",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_room: Optional[BridgeRoom] = field(
            default=None,
            metadata={
                "name": "BridgeRoom",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        water_body: Optional[WaterBody] = field(
            default=None,
            metadata={
                "name": "WaterBody",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
            default=None,
            metadata={
                "name": "SolitaryVegetationObject",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
            },
        )
        plant_cover: Optional[PlantCover] = field(
            default=None,
            metadata={
                "name": "PlantCover",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
            },
        )
        generic_occupied_space: Optional[GenericOccupiedSpace] = field(
            default=None,
            metadata={
                "name": "GenericOccupiedSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        city_furniture: Optional[CityFurniture] = field(
            default=None,
            metadata={
                "name": "CityFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
            },
        )
        tunnel_installation: Optional[TunnelInstallation] = field(
            default=None,
            metadata={
                "name": "TunnelInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_installation: Optional[BuildingInstallation] = field(
            default=None,
            metadata={
                "name": "BuildingInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_installation: Optional[BridgeInstallation] = field(
            default=None,
            metadata={
                "name": "BridgeInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        tunnel_furniture: Optional[TunnelFurniture] = field(
            default=None,
            metadata={
                "name": "TunnelFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_furniture: Optional[BuildingFurniture] = field(
            default=None,
            metadata={
                "name": "BuildingFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_furniture: Optional[BridgeFurniture] = field(
            default=None,
            metadata={
                "name": "BridgeFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        window: Optional[Window] = field(
            default=None,
            metadata={
                "name": "Window",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        door: Optional[Door] = field(
            default=None,
            metadata={
                "name": "Door",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        tunnel_constructive_element: Optional[TunnelConstructiveElement] = (
            field(
                default=None,
                metadata={
                    "name": "TunnelConstructiveElement",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
                },
            )
        )
        building_constructive_element: Optional[
            BuildingConstructiveElement
        ] = field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_constructive_element: Optional[BridgeConstructiveElement] = (
            field(
                default=None,
                metadata={
                    "name": "BridgeConstructiveElement",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/citygml/bridge/3.0",
                },
            )
        )
        tunnel_part: Optional[TunnelPart] = field(
            default=None,
            metadata={
                "name": "TunnelPart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        tunnel: Optional[Tunnel] = field(
            default=None,
            metadata={
                "name": "Tunnel",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_part: Optional[BuildingPart] = field(
            default=None,
            metadata={
                "name": "BuildingPart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        building: Optional[Building] = field(
            default=None,
            metadata={
                "name": "Building",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_part: Optional[BridgePart] = field(
            default=None,
            metadata={
                "name": "BridgePart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        bridge: Optional[Bridge] = field(
            default=None,
            metadata={
                "name": "Bridge",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        other_construction: Optional[OtherConstruction] = field(
            default=None,
            metadata={
                "name": "OtherConstruction",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        generic_logical_space: Optional[GenericLogicalSpace] = field(
            default=None,
            metadata={
                "name": "GenericLogicalSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        city_object_group: Optional[CityObjectGroup] = field(
            default=None,
            metadata={
                "name": "CityObjectGroup",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
            },
        )
        storey: Optional[Storey] = field(
            default=None,
            metadata={
                "name": "Storey",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        building_unit: Optional[BuildingUnit] = field(
            default=None,
            metadata={
                "name": "BuildingUnit",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class SensorConnectionPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    sensor_connection: Optional[SensorConnection] = field(
        default=None,
        metadata={
            "name": "SensorConnection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )


@dataclass
class Role(RoleType):
    """
    Role qualifies the function of a city object within the CityObjectGroup.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/cityobjectgroup/3.0"


@dataclass
class DynamizerType(AbstractDynamizerType):
    """
    :ivar attribute_ref: Specifies the attribute of a CityGML feature
        whose value is overridden or replaced by the (dynamic) values
        specified by the Dynamizer.
    :ivar start_time: Specifies the beginning of the time span for which
        the Dynamizer provides dynamic values.
    :ivar end_time: Specifies the end of the time span for which the
        Dynamizer provides dynamic values.
    :ivar dynamic_data: Relates to the timeseries data that is given
        either inline within a CityGML dataset or by a link to an
        external file containing timeseries data.
    :ivar sensor_connection: Relates to the sensor API that delivers
        timeseries data.
    :ivar ade_of_dynamizer: Augments the Dynamizer with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    attribute_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "attributeRef",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "required": True,
        },
    )
    start_time: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "startTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    end_time: Optional[TimePositionType] = field(
        default=None,
        metadata={
            "name": "endTime",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    dynamic_data: Optional["DynamizerType.DynamicData"] = field(
        default=None,
        metadata={
            "name": "dynamicData",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    sensor_connection: Optional[SensorConnectionPropertyType] = field(
        default=None,
        metadata={
            "name": "sensorConnection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    ade_of_dynamizer: list[AdeofDynamizerPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfDynamizer",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )

    @dataclass
    class DynamicData(AbstractFeatureMemberType):
        """
        :ivar composite_timeseries:
        :ivar tabulated_file_timeseries:
        :ivar standard_file_timeseries:
        :ivar generic_timeseries:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        composite_timeseries: Optional[CompositeTimeseries] = field(
            default=None,
            metadata={
                "name": "CompositeTimeseries",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
        tabulated_file_timeseries: Optional[TabulatedFileTimeseries] = field(
            default=None,
            metadata={
                "name": "TabulatedFileTimeseries",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
        standard_file_timeseries: Optional[StandardFileTimeseries] = field(
            default=None,
            metadata={
                "name": "StandardFileTimeseries",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
        generic_timeseries: Optional[GenericTimeseries] = field(
            default=None,
            metadata={
                "name": "GenericTimeseries",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class RolePropertyType:
    """
    :ivar role:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role_attribute: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/cityobjectgroup/3.0"

    role: Optional[Role] = field(
        default=None,
        metadata={
            "name": "Role",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role_attribute: Optional[str] = field(
        default=None,
        metadata={
            "name": "role",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Dynamizer(DynamizerType):
    """A Dynamizer is an object that injects timeseries data for an individual
    attribute of the city object in which it is included.

    The timeseries data overrides the static value of the referenced
    city object attribute in order to represent dynamic, i.e. time-
    dependent, variations of its value.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/dynamizer/3.0"


@dataclass
class AbstractDynamizerPropertyType:
    """
    :ivar dynamizer:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    dynamizer: Optional[Dynamizer] = field(
        default=None,
        metadata={
            "name": "Dynamizer",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractFeatureWithLifespanPropertyType:
    """
    :ivar city_model:
    :ivar version_transition:
    :ivar version:
    :ivar dynamizer:
    :ivar relief_feature:
    :ivar tinrelief:
    :ivar raster_relief:
    :ivar mass_point_relief:
    :ivar breakline_relief:
    :ivar water_surface:
    :ivar water_ground_surface:
    :ivar traffic_area:
    :ivar marking:
    :ivar hole_surface:
    :ivar auxiliary_traffic_area:
    :ivar land_use:
    :ivar generic_thematic_surface:
    :ivar window_surface:
    :ivar door_surface:
    :ivar wall_surface:
    :ivar roof_surface:
    :ivar outer_floor_surface:
    :ivar outer_ceiling_surface:
    :ivar interior_wall_surface:
    :ivar ground_surface:
    :ivar floor_surface:
    :ivar ceiling_surface:
    :ivar closure_surface:
    :ivar hollow_space:
    :ivar traffic_space:
    :ivar hole:
    :ivar clearance_space:
    :ivar auxiliary_traffic_space:
    :ivar waterway:
    :ivar track:
    :ivar square:
    :ivar section:
    :ivar road:
    :ivar railway:
    :ivar intersection:
    :ivar generic_unoccupied_space:
    :ivar building_room:
    :ivar bridge_room:
    :ivar water_body:
    :ivar solitary_vegetation_object:
    :ivar plant_cover:
    :ivar generic_occupied_space:
    :ivar city_furniture:
    :ivar tunnel_installation:
    :ivar building_installation:
    :ivar bridge_installation:
    :ivar tunnel_furniture:
    :ivar building_furniture:
    :ivar bridge_furniture:
    :ivar window:
    :ivar door:
    :ivar tunnel_constructive_element:
    :ivar building_constructive_element:
    :ivar bridge_constructive_element:
    :ivar tunnel_part:
    :ivar tunnel:
    :ivar building_part:
    :ivar building:
    :ivar bridge_part:
    :ivar bridge:
    :ivar other_construction:
    :ivar generic_logical_space:
    :ivar city_object_group:
    :ivar storey:
    :ivar building_unit:
    :ivar appearance:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    city_model: Optional["CityModel"] = field(
        default=None,
        metadata={
            "name": "CityModel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    version_transition: Optional["VersionTransition"] = field(
        default=None,
        metadata={
            "name": "VersionTransition",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    version: Optional["Version"] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    dynamizer: Optional[Dynamizer] = field(
        default=None,
        metadata={
            "name": "Dynamizer",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    relief_feature: Optional[ReliefFeature] = field(
        default=None,
        metadata={
            "name": "ReliefFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    tinrelief: Optional[Tinrelief] = field(
        default=None,
        metadata={
            "name": "TINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    raster_relief: Optional[RasterRelief] = field(
        default=None,
        metadata={
            "name": "RasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    mass_point_relief: Optional[MassPointRelief] = field(
        default=None,
        metadata={
            "name": "MassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    breakline_relief: Optional[BreaklineRelief] = field(
        default=None,
        metadata={
            "name": "BreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    water_surface: Optional[WaterSurface] = field(
        default=None,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    water_ground_surface: Optional[WaterGroundSurface] = field(
        default=None,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    traffic_area: Optional[TrafficArea] = field(
        default=None,
        metadata={
            "name": "TrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    marking: Optional[Marking] = field(
        default=None,
        metadata={
            "name": "Marking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole_surface: Optional[HoleSurface] = field(
        default=None,
        metadata={
            "name": "HoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    land_use: Optional[LandUse] = field(
        default=None,
        metadata={
            "name": "LandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    generic_thematic_surface: Optional[GenericThematicSurface] = field(
        default=None,
        metadata={
            "name": "GenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    window_surface: Optional[WindowSurface] = field(
        default=None,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door_surface: Optional[DoorSurface] = field(
        default=None,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    wall_surface: Optional[WallSurface] = field(
        default=None,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    roof_surface: Optional[RoofSurface] = field(
        default=None,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_floor_surface: Optional[OuterFloorSurface] = field(
        default=None,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
        default=None,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    interior_wall_surface: Optional[InteriorWallSurface] = field(
        default=None,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ground_surface: Optional[GroundSurface] = field(
        default=None,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    floor_surface: Optional[FloorSurface] = field(
        default=None,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ceiling_surface: Optional[CeilingSurface] = field(
        default=None,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    closure_surface: Optional[ClosureSurface] = field(
        default=None,
        metadata={
            "name": "ClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    hollow_space: Optional[HollowSpace] = field(
        default=None,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    traffic_space: Optional[TrafficSpace] = field(
        default=None,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole: Optional[Hole] = field(
        default=None,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    clearance_space: Optional[ClearanceSpace] = field(
        default=None,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    waterway: Optional[Waterway] = field(
        default=None,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    track: Optional[Track1] = field(
        default=None,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    square: Optional[Square] = field(
        default=None,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: Optional[Section] = field(
        default=None,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    road: Optional[Road] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    railway: Optional[Railway] = field(
        default=None,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: Optional[Intersection] = field(
        default=None,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    building_room: Optional[BuildingRoom] = field(
        default=None,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_room: Optional[BridgeRoom] = field(
        default=None,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    water_body: Optional[WaterBody] = field(
        default=None,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
        default=None,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    plant_cover: Optional[PlantCover] = field(
        default=None,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    generic_occupied_space: Optional[GenericOccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_furniture: Optional[CityFurniture] = field(
        default=None,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    tunnel_installation: Optional[TunnelInstallation] = field(
        default=None,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_installation: Optional[BuildingInstallation] = field(
        default=None,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_installation: Optional[BridgeInstallation] = field(
        default=None,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_furniture: Optional[TunnelFurniture] = field(
        default=None,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_furniture: Optional[BuildingFurniture] = field(
        default=None,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_furniture: Optional[BridgeFurniture] = field(
        default=None,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    window: Optional[Window] = field(
        default=None,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door: Optional[Door] = field(
        default=None,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    tunnel_constructive_element: Optional[TunnelConstructiveElement] = field(
        default=None,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_constructive_element: Optional[BuildingConstructiveElement] = (
        field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    bridge_constructive_element: Optional[BridgeConstructiveElement] = field(
        default=None,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    other_construction: Optional[OtherConstruction] = field(
        default=None,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    generic_logical_space: Optional[GenericLogicalSpace] = field(
        default=None,
        metadata={
            "name": "GenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_object_group: Optional[CityObjectGroup] = field(
        default=None,
        metadata={
            "name": "CityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    storey: Optional[Storey] = field(
        default=None,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_unit: Optional[BuildingUnit] = field(
        default=None,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    appearance: Optional[Appearance] = field(
        default=None,
        metadata={
            "name": "Appearance",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CityModelType(AbstractFeatureWithLifespanType):
    """
    :ivar engineering_crs: Specifies the local engineering coordinate
        reference system of the CityModel that can be provided inline
        the CityModel instead of referencing a well-known CRS
        definition. The definition of an engineering CRS requires an
        anchor point which relates the origin of the local coordinate
        system to a point on the earth’s surface in order to facilitate
        the transformation of coordinates from the local engineering
        CRS.
    :ivar city_object_member: Specifies the city objects that are part
        of the CityModel.
    :ivar appearance_member: Specifies the appearances of the CityModel.
    :ivar version_member: Specifies the different versions of the
        CityModel.
    :ivar version_transition_member: Specifies the transitions between
        the different versions of the CityModel.
    :ivar feature_member: Specifies the feature objects that are part of
        the CityModel. It allows to include objects that are not derived
        from a class defined in the CityGML conceptual model, but from
        the ISO 19109 class AnyFeature.
    :ivar ade_of_city_model: Augments the CityModel with properties
        defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    engineering_crs: Optional["CityModelType.EngineeringCrs"] = field(
        default=None,
        metadata={
            "name": "engineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    city_object_member: list["CityModelType.CityObjectMember"] = field(
        default_factory=list,
        metadata={
            "name": "cityObjectMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    appearance_member: list["CityModelType.AppearanceMember"] = field(
        default_factory=list,
        metadata={
            "name": "appearanceMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    version_member: list["CityModelType.VersionMember"] = field(
        default_factory=list,
        metadata={
            "name": "versionMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    version_transition_member: list[
        "CityModelType.VersionTransitionMember"
    ] = field(
        default_factory=list,
        metadata={
            "name": "versionTransitionMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    feature_member: list["CityModelType.FeatureMember"] = field(
        default_factory=list,
        metadata={
            "name": "featureMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    ade_of_city_model: list[AdeofCityModelPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfCityModel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )

    @dataclass
    class EngineeringCrs(AbstractMetadataPropertyType):
        """
        :ivar engineering_crs:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        engineering_crs: Optional[EngineeringCrs] = field(
            default=None,
            metadata={
                "name": "EngineeringCRS",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class CityObjectMember(AbstractFeatureMemberType):
        """
        :ivar relief_feature:
        :ivar tinrelief:
        :ivar raster_relief:
        :ivar mass_point_relief:
        :ivar breakline_relief:
        :ivar water_surface:
        :ivar water_ground_surface:
        :ivar traffic_area:
        :ivar marking:
        :ivar hole_surface:
        :ivar auxiliary_traffic_area:
        :ivar land_use:
        :ivar generic_thematic_surface:
        :ivar window_surface:
        :ivar door_surface:
        :ivar wall_surface:
        :ivar roof_surface:
        :ivar outer_floor_surface:
        :ivar outer_ceiling_surface:
        :ivar interior_wall_surface:
        :ivar ground_surface:
        :ivar floor_surface:
        :ivar ceiling_surface:
        :ivar closure_surface:
        :ivar hollow_space:
        :ivar traffic_space:
        :ivar hole:
        :ivar clearance_space:
        :ivar auxiliary_traffic_space:
        :ivar waterway:
        :ivar track:
        :ivar square:
        :ivar section:
        :ivar road:
        :ivar railway:
        :ivar intersection:
        :ivar generic_unoccupied_space:
        :ivar building_room:
        :ivar bridge_room:
        :ivar water_body:
        :ivar solitary_vegetation_object:
        :ivar plant_cover:
        :ivar generic_occupied_space:
        :ivar city_furniture:
        :ivar tunnel_installation:
        :ivar building_installation:
        :ivar bridge_installation:
        :ivar tunnel_furniture:
        :ivar building_furniture:
        :ivar bridge_furniture:
        :ivar window:
        :ivar door:
        :ivar tunnel_constructive_element:
        :ivar building_constructive_element:
        :ivar bridge_constructive_element:
        :ivar tunnel_part:
        :ivar tunnel:
        :ivar building_part:
        :ivar building:
        :ivar bridge_part:
        :ivar bridge:
        :ivar other_construction:
        :ivar generic_logical_space:
        :ivar city_object_group:
        :ivar storey:
        :ivar building_unit:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        relief_feature: Optional[ReliefFeature] = field(
            default=None,
            metadata={
                "name": "ReliefFeature",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        tinrelief: Optional[Tinrelief] = field(
            default=None,
            metadata={
                "name": "TINRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        raster_relief: Optional[RasterRelief] = field(
            default=None,
            metadata={
                "name": "RasterRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        mass_point_relief: Optional[MassPointRelief] = field(
            default=None,
            metadata={
                "name": "MassPointRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        breakline_relief: Optional[BreaklineRelief] = field(
            default=None,
            metadata={
                "name": "BreaklineRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        water_surface: Optional[WaterSurface] = field(
            default=None,
            metadata={
                "name": "WaterSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        water_ground_surface: Optional[WaterGroundSurface] = field(
            default=None,
            metadata={
                "name": "WaterGroundSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        traffic_area: Optional[TrafficArea] = field(
            default=None,
            metadata={
                "name": "TrafficArea",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        marking: Optional[Marking] = field(
            default=None,
            metadata={
                "name": "Marking",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        hole_surface: Optional[HoleSurface] = field(
            default=None,
            metadata={
                "name": "HoleSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
            default=None,
            metadata={
                "name": "AuxiliaryTrafficArea",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        land_use: Optional[LandUse] = field(
            default=None,
            metadata={
                "name": "LandUse",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/landuse/3.0",
            },
        )
        generic_thematic_surface: Optional[GenericThematicSurface] = field(
            default=None,
            metadata={
                "name": "GenericThematicSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        window_surface: Optional[WindowSurface] = field(
            default=None,
            metadata={
                "name": "WindowSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        door_surface: Optional[DoorSurface] = field(
            default=None,
            metadata={
                "name": "DoorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        wall_surface: Optional[WallSurface] = field(
            default=None,
            metadata={
                "name": "WallSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        roof_surface: Optional[RoofSurface] = field(
            default=None,
            metadata={
                "name": "RoofSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        outer_floor_surface: Optional[OuterFloorSurface] = field(
            default=None,
            metadata={
                "name": "OuterFloorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
            default=None,
            metadata={
                "name": "OuterCeilingSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        interior_wall_surface: Optional[InteriorWallSurface] = field(
            default=None,
            metadata={
                "name": "InteriorWallSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        ground_surface: Optional[GroundSurface] = field(
            default=None,
            metadata={
                "name": "GroundSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        floor_surface: Optional[FloorSurface] = field(
            default=None,
            metadata={
                "name": "FloorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        ceiling_surface: Optional[CeilingSurface] = field(
            default=None,
            metadata={
                "name": "CeilingSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        closure_surface: Optional[ClosureSurface] = field(
            default=None,
            metadata={
                "name": "ClosureSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
        hollow_space: Optional[HollowSpace] = field(
            default=None,
            metadata={
                "name": "HollowSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        traffic_space: Optional[TrafficSpace] = field(
            default=None,
            metadata={
                "name": "TrafficSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        hole: Optional[Hole] = field(
            default=None,
            metadata={
                "name": "Hole",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        clearance_space: Optional[ClearanceSpace] = field(
            default=None,
            metadata={
                "name": "ClearanceSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
            default=None,
            metadata={
                "name": "AuxiliaryTrafficSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        waterway: Optional[Waterway] = field(
            default=None,
            metadata={
                "name": "Waterway",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        track: Optional[Track1] = field(
            default=None,
            metadata={
                "name": "Track",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        square: Optional[Square] = field(
            default=None,
            metadata={
                "name": "Square",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        section: Optional[Section] = field(
            default=None,
            metadata={
                "name": "Section",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        road: Optional[Road] = field(
            default=None,
            metadata={
                "name": "Road",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        railway: Optional[Railway] = field(
            default=None,
            metadata={
                "name": "Railway",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        intersection: Optional[Intersection] = field(
            default=None,
            metadata={
                "name": "Intersection",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
            default=None,
            metadata={
                "name": "GenericUnoccupiedSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        building_room: Optional[BuildingRoom] = field(
            default=None,
            metadata={
                "name": "BuildingRoom",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_room: Optional[BridgeRoom] = field(
            default=None,
            metadata={
                "name": "BridgeRoom",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        water_body: Optional[WaterBody] = field(
            default=None,
            metadata={
                "name": "WaterBody",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
            default=None,
            metadata={
                "name": "SolitaryVegetationObject",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
            },
        )
        plant_cover: Optional[PlantCover] = field(
            default=None,
            metadata={
                "name": "PlantCover",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
            },
        )
        generic_occupied_space: Optional[GenericOccupiedSpace] = field(
            default=None,
            metadata={
                "name": "GenericOccupiedSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        city_furniture: Optional[CityFurniture] = field(
            default=None,
            metadata={
                "name": "CityFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
            },
        )
        tunnel_installation: Optional[TunnelInstallation] = field(
            default=None,
            metadata={
                "name": "TunnelInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_installation: Optional[BuildingInstallation] = field(
            default=None,
            metadata={
                "name": "BuildingInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_installation: Optional[BridgeInstallation] = field(
            default=None,
            metadata={
                "name": "BridgeInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        tunnel_furniture: Optional[TunnelFurniture] = field(
            default=None,
            metadata={
                "name": "TunnelFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_furniture: Optional[BuildingFurniture] = field(
            default=None,
            metadata={
                "name": "BuildingFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_furniture: Optional[BridgeFurniture] = field(
            default=None,
            metadata={
                "name": "BridgeFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        window: Optional[Window] = field(
            default=None,
            metadata={
                "name": "Window",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        door: Optional[Door] = field(
            default=None,
            metadata={
                "name": "Door",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        tunnel_constructive_element: Optional[TunnelConstructiveElement] = (
            field(
                default=None,
                metadata={
                    "name": "TunnelConstructiveElement",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
                },
            )
        )
        building_constructive_element: Optional[
            BuildingConstructiveElement
        ] = field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_constructive_element: Optional[BridgeConstructiveElement] = (
            field(
                default=None,
                metadata={
                    "name": "BridgeConstructiveElement",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/citygml/bridge/3.0",
                },
            )
        )
        tunnel_part: Optional[TunnelPart] = field(
            default=None,
            metadata={
                "name": "TunnelPart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        tunnel: Optional[Tunnel] = field(
            default=None,
            metadata={
                "name": "Tunnel",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_part: Optional[BuildingPart] = field(
            default=None,
            metadata={
                "name": "BuildingPart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        building: Optional[Building] = field(
            default=None,
            metadata={
                "name": "Building",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_part: Optional[BridgePart] = field(
            default=None,
            metadata={
                "name": "BridgePart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        bridge: Optional[Bridge] = field(
            default=None,
            metadata={
                "name": "Bridge",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        other_construction: Optional[OtherConstruction] = field(
            default=None,
            metadata={
                "name": "OtherConstruction",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        generic_logical_space: Optional[GenericLogicalSpace] = field(
            default=None,
            metadata={
                "name": "GenericLogicalSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        city_object_group: Optional[CityObjectGroup] = field(
            default=None,
            metadata={
                "name": "CityObjectGroup",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
            },
        )
        storey: Optional[Storey] = field(
            default=None,
            metadata={
                "name": "Storey",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        building_unit: Optional[BuildingUnit] = field(
            default=None,
            metadata={
                "name": "BuildingUnit",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class AppearanceMember(AbstractFeatureMemberType):
        """
        :ivar appearance:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        appearance: Optional[Appearance] = field(
            default=None,
            metadata={
                "name": "Appearance",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class VersionMember(AbstractFeatureMemberType):
        """
        :ivar version:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        version: Optional["Version"] = field(
            default=None,
            metadata={
                "name": "Version",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class VersionTransitionMember(AbstractFeatureMemberType):
        """
        :ivar version_transition:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        version_transition: Optional["VersionTransition"] = field(
            default=None,
            metadata={
                "name": "VersionTransition",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )

    @dataclass
    class FeatureMember(AbstractFeatureMemberType):
        """
        :ivar composite_timeseries:
        :ivar tabulated_file_timeseries:
        :ivar standard_file_timeseries:
        :ivar generic_timeseries:
        :ivar x3_dmaterial:
        :ivar parameterized_texture:
        :ivar georeferenced_texture:
        :ivar address:
        :ivar point_cloud:
        :ivar city_model:
        :ivar version_transition:
        :ivar version:
        :ivar dynamizer:
        :ivar relief_feature:
        :ivar tinrelief:
        :ivar raster_relief:
        :ivar mass_point_relief:
        :ivar breakline_relief:
        :ivar water_surface:
        :ivar water_ground_surface:
        :ivar traffic_area:
        :ivar marking:
        :ivar hole_surface:
        :ivar auxiliary_traffic_area:
        :ivar land_use:
        :ivar generic_thematic_surface:
        :ivar window_surface:
        :ivar door_surface:
        :ivar wall_surface:
        :ivar roof_surface:
        :ivar outer_floor_surface:
        :ivar outer_ceiling_surface:
        :ivar interior_wall_surface:
        :ivar ground_surface:
        :ivar floor_surface:
        :ivar ceiling_surface:
        :ivar closure_surface:
        :ivar hollow_space:
        :ivar traffic_space:
        :ivar hole:
        :ivar clearance_space:
        :ivar auxiliary_traffic_space:
        :ivar waterway:
        :ivar track:
        :ivar square:
        :ivar section:
        :ivar road:
        :ivar railway:
        :ivar intersection:
        :ivar generic_unoccupied_space:
        :ivar building_room:
        :ivar bridge_room:
        :ivar water_body:
        :ivar solitary_vegetation_object:
        :ivar plant_cover:
        :ivar generic_occupied_space:
        :ivar city_furniture:
        :ivar tunnel_installation:
        :ivar building_installation:
        :ivar bridge_installation:
        :ivar tunnel_furniture:
        :ivar building_furniture:
        :ivar bridge_furniture:
        :ivar window:
        :ivar door:
        :ivar tunnel_constructive_element:
        :ivar building_constructive_element:
        :ivar bridge_constructive_element:
        :ivar tunnel_part:
        :ivar tunnel:
        :ivar building_part:
        :ivar building:
        :ivar bridge_part:
        :ivar bridge:
        :ivar other_construction:
        :ivar generic_logical_space:
        :ivar city_object_group:
        :ivar storey:
        :ivar building_unit:
        :ivar appearance:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        composite_timeseries: Optional[CompositeTimeseries] = field(
            default=None,
            metadata={
                "name": "CompositeTimeseries",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
        tabulated_file_timeseries: Optional[TabulatedFileTimeseries] = field(
            default=None,
            metadata={
                "name": "TabulatedFileTimeseries",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
        standard_file_timeseries: Optional[StandardFileTimeseries] = field(
            default=None,
            metadata={
                "name": "StandardFileTimeseries",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
        generic_timeseries: Optional[GenericTimeseries] = field(
            default=None,
            metadata={
                "name": "GenericTimeseries",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
        x3_dmaterial: Optional[X3Dmaterial] = field(
            default=None,
            metadata={
                "name": "X3DMaterial",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            },
        )
        parameterized_texture: Optional[ParameterizedTexture] = field(
            default=None,
            metadata={
                "name": "ParameterizedTexture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            },
        )
        georeferenced_texture: Optional[GeoreferencedTexture] = field(
            default=None,
            metadata={
                "name": "GeoreferencedTexture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            },
        )
        address: Optional[Address2] = field(
            default=None,
            metadata={
                "name": "Address",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
        point_cloud: Optional[PointCloud] = field(
            default=None,
            metadata={
                "name": "PointCloud",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
            },
        )
        city_model: Optional["CityModel"] = field(
            default=None,
            metadata={
                "name": "CityModel",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
        version_transition: Optional["VersionTransition"] = field(
            default=None,
            metadata={
                "name": "VersionTransition",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            },
        )
        version: Optional["Version"] = field(
            default=None,
            metadata={
                "name": "Version",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            },
        )
        dynamizer: Optional[Dynamizer] = field(
            default=None,
            metadata={
                "name": "Dynamizer",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
        relief_feature: Optional[ReliefFeature] = field(
            default=None,
            metadata={
                "name": "ReliefFeature",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        tinrelief: Optional[Tinrelief] = field(
            default=None,
            metadata={
                "name": "TINRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        raster_relief: Optional[RasterRelief] = field(
            default=None,
            metadata={
                "name": "RasterRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        mass_point_relief: Optional[MassPointRelief] = field(
            default=None,
            metadata={
                "name": "MassPointRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        breakline_relief: Optional[BreaklineRelief] = field(
            default=None,
            metadata={
                "name": "BreaklineRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        water_surface: Optional[WaterSurface] = field(
            default=None,
            metadata={
                "name": "WaterSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        water_ground_surface: Optional[WaterGroundSurface] = field(
            default=None,
            metadata={
                "name": "WaterGroundSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        traffic_area: Optional[TrafficArea] = field(
            default=None,
            metadata={
                "name": "TrafficArea",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        marking: Optional[Marking] = field(
            default=None,
            metadata={
                "name": "Marking",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        hole_surface: Optional[HoleSurface] = field(
            default=None,
            metadata={
                "name": "HoleSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
            default=None,
            metadata={
                "name": "AuxiliaryTrafficArea",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        land_use: Optional[LandUse] = field(
            default=None,
            metadata={
                "name": "LandUse",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/landuse/3.0",
            },
        )
        generic_thematic_surface: Optional[GenericThematicSurface] = field(
            default=None,
            metadata={
                "name": "GenericThematicSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        window_surface: Optional[WindowSurface] = field(
            default=None,
            metadata={
                "name": "WindowSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        door_surface: Optional[DoorSurface] = field(
            default=None,
            metadata={
                "name": "DoorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        wall_surface: Optional[WallSurface] = field(
            default=None,
            metadata={
                "name": "WallSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        roof_surface: Optional[RoofSurface] = field(
            default=None,
            metadata={
                "name": "RoofSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        outer_floor_surface: Optional[OuterFloorSurface] = field(
            default=None,
            metadata={
                "name": "OuterFloorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
            default=None,
            metadata={
                "name": "OuterCeilingSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        interior_wall_surface: Optional[InteriorWallSurface] = field(
            default=None,
            metadata={
                "name": "InteriorWallSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        ground_surface: Optional[GroundSurface] = field(
            default=None,
            metadata={
                "name": "GroundSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        floor_surface: Optional[FloorSurface] = field(
            default=None,
            metadata={
                "name": "FloorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        ceiling_surface: Optional[CeilingSurface] = field(
            default=None,
            metadata={
                "name": "CeilingSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        closure_surface: Optional[ClosureSurface] = field(
            default=None,
            metadata={
                "name": "ClosureSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
        hollow_space: Optional[HollowSpace] = field(
            default=None,
            metadata={
                "name": "HollowSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        traffic_space: Optional[TrafficSpace] = field(
            default=None,
            metadata={
                "name": "TrafficSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        hole: Optional[Hole] = field(
            default=None,
            metadata={
                "name": "Hole",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        clearance_space: Optional[ClearanceSpace] = field(
            default=None,
            metadata={
                "name": "ClearanceSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
            default=None,
            metadata={
                "name": "AuxiliaryTrafficSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        waterway: Optional[Waterway] = field(
            default=None,
            metadata={
                "name": "Waterway",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        track: Optional[Track1] = field(
            default=None,
            metadata={
                "name": "Track",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        square: Optional[Square] = field(
            default=None,
            metadata={
                "name": "Square",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        section: Optional[Section] = field(
            default=None,
            metadata={
                "name": "Section",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        road: Optional[Road] = field(
            default=None,
            metadata={
                "name": "Road",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        railway: Optional[Railway] = field(
            default=None,
            metadata={
                "name": "Railway",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        intersection: Optional[Intersection] = field(
            default=None,
            metadata={
                "name": "Intersection",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
            default=None,
            metadata={
                "name": "GenericUnoccupiedSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        building_room: Optional[BuildingRoom] = field(
            default=None,
            metadata={
                "name": "BuildingRoom",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_room: Optional[BridgeRoom] = field(
            default=None,
            metadata={
                "name": "BridgeRoom",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        water_body: Optional[WaterBody] = field(
            default=None,
            metadata={
                "name": "WaterBody",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
            default=None,
            metadata={
                "name": "SolitaryVegetationObject",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
            },
        )
        plant_cover: Optional[PlantCover] = field(
            default=None,
            metadata={
                "name": "PlantCover",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
            },
        )
        generic_occupied_space: Optional[GenericOccupiedSpace] = field(
            default=None,
            metadata={
                "name": "GenericOccupiedSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        city_furniture: Optional[CityFurniture] = field(
            default=None,
            metadata={
                "name": "CityFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
            },
        )
        tunnel_installation: Optional[TunnelInstallation] = field(
            default=None,
            metadata={
                "name": "TunnelInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_installation: Optional[BuildingInstallation] = field(
            default=None,
            metadata={
                "name": "BuildingInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_installation: Optional[BridgeInstallation] = field(
            default=None,
            metadata={
                "name": "BridgeInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        tunnel_furniture: Optional[TunnelFurniture] = field(
            default=None,
            metadata={
                "name": "TunnelFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_furniture: Optional[BuildingFurniture] = field(
            default=None,
            metadata={
                "name": "BuildingFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_furniture: Optional[BridgeFurniture] = field(
            default=None,
            metadata={
                "name": "BridgeFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        window: Optional[Window] = field(
            default=None,
            metadata={
                "name": "Window",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        door: Optional[Door] = field(
            default=None,
            metadata={
                "name": "Door",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        tunnel_constructive_element: Optional[TunnelConstructiveElement] = (
            field(
                default=None,
                metadata={
                    "name": "TunnelConstructiveElement",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
                },
            )
        )
        building_constructive_element: Optional[
            BuildingConstructiveElement
        ] = field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_constructive_element: Optional[BridgeConstructiveElement] = (
            field(
                default=None,
                metadata={
                    "name": "BridgeConstructiveElement",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/citygml/bridge/3.0",
                },
            )
        )
        tunnel_part: Optional[TunnelPart] = field(
            default=None,
            metadata={
                "name": "TunnelPart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        tunnel: Optional[Tunnel] = field(
            default=None,
            metadata={
                "name": "Tunnel",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_part: Optional[BuildingPart] = field(
            default=None,
            metadata={
                "name": "BuildingPart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        building: Optional[Building] = field(
            default=None,
            metadata={
                "name": "Building",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_part: Optional[BridgePart] = field(
            default=None,
            metadata={
                "name": "BridgePart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        bridge: Optional[Bridge] = field(
            default=None,
            metadata={
                "name": "Bridge",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        other_construction: Optional[OtherConstruction] = field(
            default=None,
            metadata={
                "name": "OtherConstruction",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        generic_logical_space: Optional[GenericLogicalSpace] = field(
            default=None,
            metadata={
                "name": "GenericLogicalSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        city_object_group: Optional[CityObjectGroup] = field(
            default=None,
            metadata={
                "name": "CityObjectGroup",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
            },
        )
        storey: Optional[Storey] = field(
            default=None,
            metadata={
                "name": "Storey",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        building_unit: Optional[BuildingUnit] = field(
            default=None,
            metadata={
                "name": "BuildingUnit",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        appearance: Optional[Appearance] = field(
            default=None,
            metadata={
                "name": "Appearance",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class DynamizerPropertyType:
    """
    :ivar dynamizer:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/dynamizer/3.0"

    dynamizer: Optional[Dynamizer] = field(
        default=None,
        metadata={
            "name": "Dynamizer",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class CityModel(CityModelType):
    """
    CityModel is the container for all objects belonging to a city model.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/3.0"


@dataclass
class TransactionType:
    """
    :ivar type_value: Indicates the specific type of the Transaction.
    :ivar old_feature: Relates to the version of the city object prior
        to the Transaction.
    :ivar new_feature: Relates to the version of the city object
        subsequent to the Transaction.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/versioning/3.0"

    type_value: Optional[TransactionTypeValueType] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            "required": True,
        },
    )
    old_feature: Optional[AbstractFeatureWithLifespanPropertyType] = field(
        default=None,
        metadata={
            "name": "oldFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    new_feature: Optional[AbstractFeatureWithLifespanPropertyType] = field(
        default=None,
        metadata={
            "name": "newFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )


@dataclass
class CityModelPropertyType:
    """
    :ivar city_model:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    city_model: Optional[CityModel] = field(
        default=None,
        metadata={
            "name": "CityModel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class Transaction(TransactionType):
    """Transaction represents a modification of the city model by the creation,
    termination, or replacement of a specific city object.

    While the creation of a city object also marks its first object
    version, the termination marks the end of existence of a real world
    object and, hence, also terminates the final version of a city
    object. The replacement of a city object means that a specific
    version of it is replaced by a new version.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/versioning/3.0"


@dataclass
class VersionType(AbstractVersionType):
    """
    :ivar tag: Allows for adding keywords to the city model version.
    :ivar version_member: Relates to all city objects that are part of
        the city model version.
    :ivar ade_of_version: Augments the Version with properties defined
        in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/versioning/3.0"

    tag: list[str] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    version_member: list["VersionType.VersionMember"] = field(
        default_factory=list,
        metadata={
            "name": "versionMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    ade_of_version: list[AdeofVersionPropertyType] = field(
        default_factory=list,
        metadata={
            "name": "adeOfVersion",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )

    @dataclass
    class VersionMember(AbstractFeatureMemberType):
        """
        :ivar city_model:
        :ivar version_transition:
        :ivar version:
        :ivar dynamizer:
        :ivar relief_feature:
        :ivar tinrelief:
        :ivar raster_relief:
        :ivar mass_point_relief:
        :ivar breakline_relief:
        :ivar water_surface:
        :ivar water_ground_surface:
        :ivar traffic_area:
        :ivar marking:
        :ivar hole_surface:
        :ivar auxiliary_traffic_area:
        :ivar land_use:
        :ivar generic_thematic_surface:
        :ivar window_surface:
        :ivar door_surface:
        :ivar wall_surface:
        :ivar roof_surface:
        :ivar outer_floor_surface:
        :ivar outer_ceiling_surface:
        :ivar interior_wall_surface:
        :ivar ground_surface:
        :ivar floor_surface:
        :ivar ceiling_surface:
        :ivar closure_surface:
        :ivar hollow_space:
        :ivar traffic_space:
        :ivar hole:
        :ivar clearance_space:
        :ivar auxiliary_traffic_space:
        :ivar waterway:
        :ivar track:
        :ivar square:
        :ivar section:
        :ivar road:
        :ivar railway:
        :ivar intersection:
        :ivar generic_unoccupied_space:
        :ivar building_room:
        :ivar bridge_room:
        :ivar water_body:
        :ivar solitary_vegetation_object:
        :ivar plant_cover:
        :ivar generic_occupied_space:
        :ivar city_furniture:
        :ivar tunnel_installation:
        :ivar building_installation:
        :ivar bridge_installation:
        :ivar tunnel_furniture:
        :ivar building_furniture:
        :ivar bridge_furniture:
        :ivar window:
        :ivar door:
        :ivar tunnel_constructive_element:
        :ivar building_constructive_element:
        :ivar bridge_constructive_element:
        :ivar tunnel_part:
        :ivar tunnel:
        :ivar building_part:
        :ivar building:
        :ivar bridge_part:
        :ivar bridge:
        :ivar other_construction:
        :ivar generic_logical_space:
        :ivar city_object_group:
        :ivar storey:
        :ivar building_unit:
        :ivar appearance:
        :ivar type_value: Enumeration of values for the type attribute
        :ivar href:
        :ivar role: A URI with a minimum length of 1 character.
        :ivar arcrole: A URI with a minimum length of 1 character.
        :ivar title:
        :ivar show: Enumeration of values for the show attribute
        :ivar actuate: Enumeration of values for the actuate attribute
        :ivar nil_reason:
        :ivar remote_schema:
        """

        city_model: Optional[CityModel] = field(
            default=None,
            metadata={
                "name": "CityModel",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
        version_transition: Optional["VersionTransition"] = field(
            default=None,
            metadata={
                "name": "VersionTransition",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            },
        )
        version: Optional["Version"] = field(
            default=None,
            metadata={
                "name": "Version",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            },
        )
        dynamizer: Optional[Dynamizer] = field(
            default=None,
            metadata={
                "name": "Dynamizer",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            },
        )
        relief_feature: Optional[ReliefFeature] = field(
            default=None,
            metadata={
                "name": "ReliefFeature",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        tinrelief: Optional[Tinrelief] = field(
            default=None,
            metadata={
                "name": "TINRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        raster_relief: Optional[RasterRelief] = field(
            default=None,
            metadata={
                "name": "RasterRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        mass_point_relief: Optional[MassPointRelief] = field(
            default=None,
            metadata={
                "name": "MassPointRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        breakline_relief: Optional[BreaklineRelief] = field(
            default=None,
            metadata={
                "name": "BreaklineRelief",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/relief/3.0",
            },
        )
        water_surface: Optional[WaterSurface] = field(
            default=None,
            metadata={
                "name": "WaterSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        water_ground_surface: Optional[WaterGroundSurface] = field(
            default=None,
            metadata={
                "name": "WaterGroundSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        traffic_area: Optional[TrafficArea] = field(
            default=None,
            metadata={
                "name": "TrafficArea",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        marking: Optional[Marking] = field(
            default=None,
            metadata={
                "name": "Marking",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        hole_surface: Optional[HoleSurface] = field(
            default=None,
            metadata={
                "name": "HoleSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
            default=None,
            metadata={
                "name": "AuxiliaryTrafficArea",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        land_use: Optional[LandUse] = field(
            default=None,
            metadata={
                "name": "LandUse",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/landuse/3.0",
            },
        )
        generic_thematic_surface: Optional[GenericThematicSurface] = field(
            default=None,
            metadata={
                "name": "GenericThematicSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        window_surface: Optional[WindowSurface] = field(
            default=None,
            metadata={
                "name": "WindowSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        door_surface: Optional[DoorSurface] = field(
            default=None,
            metadata={
                "name": "DoorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        wall_surface: Optional[WallSurface] = field(
            default=None,
            metadata={
                "name": "WallSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        roof_surface: Optional[RoofSurface] = field(
            default=None,
            metadata={
                "name": "RoofSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        outer_floor_surface: Optional[OuterFloorSurface] = field(
            default=None,
            metadata={
                "name": "OuterFloorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
            default=None,
            metadata={
                "name": "OuterCeilingSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        interior_wall_surface: Optional[InteriorWallSurface] = field(
            default=None,
            metadata={
                "name": "InteriorWallSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        ground_surface: Optional[GroundSurface] = field(
            default=None,
            metadata={
                "name": "GroundSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        floor_surface: Optional[FloorSurface] = field(
            default=None,
            metadata={
                "name": "FloorSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        ceiling_surface: Optional[CeilingSurface] = field(
            default=None,
            metadata={
                "name": "CeilingSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        closure_surface: Optional[ClosureSurface] = field(
            default=None,
            metadata={
                "name": "ClosureSurface",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/3.0",
            },
        )
        hollow_space: Optional[HollowSpace] = field(
            default=None,
            metadata={
                "name": "HollowSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        traffic_space: Optional[TrafficSpace] = field(
            default=None,
            metadata={
                "name": "TrafficSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        hole: Optional[Hole] = field(
            default=None,
            metadata={
                "name": "Hole",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        clearance_space: Optional[ClearanceSpace] = field(
            default=None,
            metadata={
                "name": "ClearanceSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
            default=None,
            metadata={
                "name": "AuxiliaryTrafficSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        waterway: Optional[Waterway] = field(
            default=None,
            metadata={
                "name": "Waterway",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        track: Optional[Track1] = field(
            default=None,
            metadata={
                "name": "Track",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        square: Optional[Square] = field(
            default=None,
            metadata={
                "name": "Square",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        section: Optional[Section] = field(
            default=None,
            metadata={
                "name": "Section",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        road: Optional[Road] = field(
            default=None,
            metadata={
                "name": "Road",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        railway: Optional[Railway] = field(
            default=None,
            metadata={
                "name": "Railway",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        intersection: Optional[Intersection] = field(
            default=None,
            metadata={
                "name": "Intersection",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            },
        )
        generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
            default=None,
            metadata={
                "name": "GenericUnoccupiedSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        building_room: Optional[BuildingRoom] = field(
            default=None,
            metadata={
                "name": "BuildingRoom",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_room: Optional[BridgeRoom] = field(
            default=None,
            metadata={
                "name": "BridgeRoom",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        water_body: Optional[WaterBody] = field(
            default=None,
            metadata={
                "name": "WaterBody",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            },
        )
        solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
            default=None,
            metadata={
                "name": "SolitaryVegetationObject",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
            },
        )
        plant_cover: Optional[PlantCover] = field(
            default=None,
            metadata={
                "name": "PlantCover",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
            },
        )
        generic_occupied_space: Optional[GenericOccupiedSpace] = field(
            default=None,
            metadata={
                "name": "GenericOccupiedSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        city_furniture: Optional[CityFurniture] = field(
            default=None,
            metadata={
                "name": "CityFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
            },
        )
        tunnel_installation: Optional[TunnelInstallation] = field(
            default=None,
            metadata={
                "name": "TunnelInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_installation: Optional[BuildingInstallation] = field(
            default=None,
            metadata={
                "name": "BuildingInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_installation: Optional[BridgeInstallation] = field(
            default=None,
            metadata={
                "name": "BridgeInstallation",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        tunnel_furniture: Optional[TunnelFurniture] = field(
            default=None,
            metadata={
                "name": "TunnelFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_furniture: Optional[BuildingFurniture] = field(
            default=None,
            metadata={
                "name": "BuildingFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_furniture: Optional[BridgeFurniture] = field(
            default=None,
            metadata={
                "name": "BridgeFurniture",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        window: Optional[Window] = field(
            default=None,
            metadata={
                "name": "Window",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        door: Optional[Door] = field(
            default=None,
            metadata={
                "name": "Door",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        tunnel_constructive_element: Optional[TunnelConstructiveElement] = (
            field(
                default=None,
                metadata={
                    "name": "TunnelConstructiveElement",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
                },
            )
        )
        building_constructive_element: Optional[
            BuildingConstructiveElement
        ] = field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_constructive_element: Optional[BridgeConstructiveElement] = (
            field(
                default=None,
                metadata={
                    "name": "BridgeConstructiveElement",
                    "type": "Element",
                    "namespace": "http://www.opengis.net/citygml/bridge/3.0",
                },
            )
        )
        tunnel_part: Optional[TunnelPart] = field(
            default=None,
            metadata={
                "name": "TunnelPart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        tunnel: Optional[Tunnel] = field(
            default=None,
            metadata={
                "name": "Tunnel",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            },
        )
        building_part: Optional[BuildingPart] = field(
            default=None,
            metadata={
                "name": "BuildingPart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        building: Optional[Building] = field(
            default=None,
            metadata={
                "name": "Building",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        bridge_part: Optional[BridgePart] = field(
            default=None,
            metadata={
                "name": "BridgePart",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        bridge: Optional[Bridge] = field(
            default=None,
            metadata={
                "name": "Bridge",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            },
        )
        other_construction: Optional[OtherConstruction] = field(
            default=None,
            metadata={
                "name": "OtherConstruction",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/construction/3.0",
            },
        )
        generic_logical_space: Optional[GenericLogicalSpace] = field(
            default=None,
            metadata={
                "name": "GenericLogicalSpace",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/generics/3.0",
            },
        )
        city_object_group: Optional[CityObjectGroup] = field(
            default=None,
            metadata={
                "name": "CityObjectGroup",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
            },
        )
        storey: Optional[Storey] = field(
            default=None,
            metadata={
                "name": "Storey",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        building_unit: Optional[BuildingUnit] = field(
            default=None,
            metadata={
                "name": "BuildingUnit",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
        appearance: Optional[Appearance] = field(
            default=None,
            metadata={
                "name": "Appearance",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            },
        )
        type_value: TypeValue = field(
            init=False,
            default=TypeValue.SIMPLE,
            metadata={
                "name": "type",
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        href: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        role: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        arcrole: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
                "min_length": 1,
            },
        )
        title: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        show: Optional[ShowValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        actuate: Optional[ActuateValue] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "namespace": "http://www.w3.org/1999/xlink",
            },
        )
        nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
            default=None,
            metadata={
                "name": "nilReason",
                "type": "Attribute",
                "pattern": r"other:\w{2,}",
            },
        )
        remote_schema: Optional[str] = field(
            default=None,
            metadata={
                "name": "remoteSchema",
                "type": "Attribute",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )


@dataclass
class TransactionPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/citygml/versioning/3.0"

    transaction: Optional[Transaction] = field(
        default=None,
        metadata={
            "name": "Transaction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            "required": True,
        },
    )


@dataclass
class Version(VersionType):
    """Version represents a defined state of a city model consisting of the
    dedicated versions of all city object instances that belong to the respective
    city model version.

    Versions can have names, a description and can be labeled with an
    arbitrary number of user defined tags.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/versioning/3.0"


@dataclass
class AbstractVersionPropertyType:
    """
    :ivar version:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    version: Optional[Version] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class VersionPropertyType:
    """
    :ivar version:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/versioning/3.0"

    version: Optional[Version] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class VersionTransitionType(AbstractVersionTransitionType):
    """
    :ivar reason: Specifies why the VersionTransition has been carried
        out.
    :ivar clone_predecessor: Indicates whether the set of city object
        instances belonging to the successor version of the city model
        is either explicitly enumerated within the successor version
        object (attribute clonePredecessor=false),  or has to be derived
        from the modifications of the city model provided as a list of
        transactions on the city object versions contained in the
        predecessor version (attribute clonePredecessor=true).
    :ivar type_value: Indicates the specific type of the
        VersionTransition.
    :ivar from_value: Relates to the predecessor version of the
        VersionTransition.
    :ivar to: Relates to the sucessor version of the VersionTransition.
    :ivar transaction: Relates to all transactions that have been
        applied as part of the VersionTransition.
    :ivar ade_of_version_transition: Augments the VersionTransition with
        properties defined in an ADE.
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/versioning/3.0"

    reason: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    clone_predecessor: Optional[bool] = field(
        default=None,
        metadata={
            "name": "clonePredecessor",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            "required": True,
        },
    )
    type_value: Optional[TransitionTypeValueType] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    from_value: Optional[VersionPropertyType] = field(
        default=None,
        metadata={
            "name": "from",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    to: Optional[VersionPropertyType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    transaction: list[TransactionPropertyType] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    ade_of_version_transition: list[AdeofVersionTransitionPropertyType] = (
        field(
            default_factory=list,
            metadata={
                "name": "adeOfVersionTransition",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            },
        )
    )


@dataclass
class VersionTransition(VersionTransitionType):
    """VersionTransition describes the change of the state of a city model from one
    version to another.

    Version transitions can have names, a description and can be further
    qualified by a type and a reason.
    """

    class Meta:
        namespace = "http://www.opengis.net/citygml/versioning/3.0"


@dataclass
class AbstractFeaturePropertyType:
    """
    :ivar composite_timeseries:
    :ivar tabulated_file_timeseries:
    :ivar standard_file_timeseries:
    :ivar generic_timeseries:
    :ivar x3_dmaterial:
    :ivar parameterized_texture:
    :ivar georeferenced_texture:
    :ivar address:
    :ivar point_cloud:
    :ivar city_model:
    :ivar version_transition:
    :ivar version:
    :ivar dynamizer:
    :ivar relief_feature:
    :ivar tinrelief:
    :ivar raster_relief:
    :ivar mass_point_relief:
    :ivar breakline_relief:
    :ivar water_surface:
    :ivar water_ground_surface:
    :ivar traffic_area:
    :ivar marking:
    :ivar hole_surface:
    :ivar auxiliary_traffic_area:
    :ivar land_use:
    :ivar generic_thematic_surface:
    :ivar window_surface:
    :ivar door_surface:
    :ivar wall_surface:
    :ivar roof_surface:
    :ivar outer_floor_surface:
    :ivar outer_ceiling_surface:
    :ivar interior_wall_surface:
    :ivar ground_surface:
    :ivar floor_surface:
    :ivar ceiling_surface:
    :ivar closure_surface:
    :ivar hollow_space:
    :ivar traffic_space:
    :ivar hole:
    :ivar clearance_space:
    :ivar auxiliary_traffic_space:
    :ivar waterway:
    :ivar track:
    :ivar square:
    :ivar section:
    :ivar road:
    :ivar railway:
    :ivar intersection:
    :ivar generic_unoccupied_space:
    :ivar building_room:
    :ivar bridge_room:
    :ivar water_body:
    :ivar solitary_vegetation_object:
    :ivar plant_cover:
    :ivar generic_occupied_space:
    :ivar city_furniture:
    :ivar tunnel_installation:
    :ivar building_installation:
    :ivar bridge_installation:
    :ivar tunnel_furniture:
    :ivar building_furniture:
    :ivar bridge_furniture:
    :ivar window:
    :ivar door:
    :ivar tunnel_constructive_element:
    :ivar building_constructive_element:
    :ivar bridge_constructive_element:
    :ivar tunnel_part:
    :ivar tunnel:
    :ivar building_part:
    :ivar building:
    :ivar bridge_part:
    :ivar bridge:
    :ivar other_construction:
    :ivar generic_logical_space:
    :ivar city_object_group:
    :ivar storey:
    :ivar building_unit:
    :ivar appearance:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    composite_timeseries: Optional[CompositeTimeseries] = field(
        default=None,
        metadata={
            "name": "CompositeTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    tabulated_file_timeseries: Optional[TabulatedFileTimeseries] = field(
        default=None,
        metadata={
            "name": "TabulatedFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    standard_file_timeseries: Optional[StandardFileTimeseries] = field(
        default=None,
        metadata={
            "name": "StandardFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    generic_timeseries: Optional[GenericTimeseries] = field(
        default=None,
        metadata={
            "name": "GenericTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    x3_dmaterial: Optional[X3Dmaterial] = field(
        default=None,
        metadata={
            "name": "X3DMaterial",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    parameterized_texture: Optional[ParameterizedTexture] = field(
        default=None,
        metadata={
            "name": "ParameterizedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    georeferenced_texture: Optional[GeoreferencedTexture] = field(
        default=None,
        metadata={
            "name": "GeoreferencedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    address: Optional[Address2] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    point_cloud: Optional[PointCloud] = field(
        default=None,
        metadata={
            "name": "PointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )
    city_model: Optional[CityModel] = field(
        default=None,
        metadata={
            "name": "CityModel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    version_transition: Optional[VersionTransition] = field(
        default=None,
        metadata={
            "name": "VersionTransition",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    version: Optional[Version] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    dynamizer: Optional[Dynamizer] = field(
        default=None,
        metadata={
            "name": "Dynamizer",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    relief_feature: Optional[ReliefFeature] = field(
        default=None,
        metadata={
            "name": "ReliefFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    tinrelief: Optional[Tinrelief] = field(
        default=None,
        metadata={
            "name": "TINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    raster_relief: Optional[RasterRelief] = field(
        default=None,
        metadata={
            "name": "RasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    mass_point_relief: Optional[MassPointRelief] = field(
        default=None,
        metadata={
            "name": "MassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    breakline_relief: Optional[BreaklineRelief] = field(
        default=None,
        metadata={
            "name": "BreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    water_surface: Optional[WaterSurface] = field(
        default=None,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    water_ground_surface: Optional[WaterGroundSurface] = field(
        default=None,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    traffic_area: Optional[TrafficArea] = field(
        default=None,
        metadata={
            "name": "TrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    marking: Optional[Marking] = field(
        default=None,
        metadata={
            "name": "Marking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole_surface: Optional[HoleSurface] = field(
        default=None,
        metadata={
            "name": "HoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    land_use: Optional[LandUse] = field(
        default=None,
        metadata={
            "name": "LandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    generic_thematic_surface: Optional[GenericThematicSurface] = field(
        default=None,
        metadata={
            "name": "GenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    window_surface: Optional[WindowSurface] = field(
        default=None,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door_surface: Optional[DoorSurface] = field(
        default=None,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    wall_surface: Optional[WallSurface] = field(
        default=None,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    roof_surface: Optional[RoofSurface] = field(
        default=None,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_floor_surface: Optional[OuterFloorSurface] = field(
        default=None,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
        default=None,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    interior_wall_surface: Optional[InteriorWallSurface] = field(
        default=None,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ground_surface: Optional[GroundSurface] = field(
        default=None,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    floor_surface: Optional[FloorSurface] = field(
        default=None,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ceiling_surface: Optional[CeilingSurface] = field(
        default=None,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    closure_surface: Optional[ClosureSurface] = field(
        default=None,
        metadata={
            "name": "ClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    hollow_space: Optional[HollowSpace] = field(
        default=None,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    traffic_space: Optional[TrafficSpace] = field(
        default=None,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole: Optional[Hole] = field(
        default=None,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    clearance_space: Optional[ClearanceSpace] = field(
        default=None,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    waterway: Optional[Waterway] = field(
        default=None,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    track: Optional[Track1] = field(
        default=None,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    square: Optional[Square] = field(
        default=None,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: Optional[Section] = field(
        default=None,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    road: Optional[Road] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    railway: Optional[Railway] = field(
        default=None,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: Optional[Intersection] = field(
        default=None,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    building_room: Optional[BuildingRoom] = field(
        default=None,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_room: Optional[BridgeRoom] = field(
        default=None,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    water_body: Optional[WaterBody] = field(
        default=None,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
        default=None,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    plant_cover: Optional[PlantCover] = field(
        default=None,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    generic_occupied_space: Optional[GenericOccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_furniture: Optional[CityFurniture] = field(
        default=None,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    tunnel_installation: Optional[TunnelInstallation] = field(
        default=None,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_installation: Optional[BuildingInstallation] = field(
        default=None,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_installation: Optional[BridgeInstallation] = field(
        default=None,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_furniture: Optional[TunnelFurniture] = field(
        default=None,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_furniture: Optional[BuildingFurniture] = field(
        default=None,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_furniture: Optional[BridgeFurniture] = field(
        default=None,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    window: Optional[Window] = field(
        default=None,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door: Optional[Door] = field(
        default=None,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    tunnel_constructive_element: Optional[TunnelConstructiveElement] = field(
        default=None,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_constructive_element: Optional[BuildingConstructiveElement] = (
        field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    bridge_constructive_element: Optional[BridgeConstructiveElement] = field(
        default=None,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    other_construction: Optional[OtherConstruction] = field(
        default=None,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    generic_logical_space: Optional[GenericLogicalSpace] = field(
        default=None,
        metadata={
            "name": "GenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_object_group: Optional[CityObjectGroup] = field(
        default=None,
        metadata={
            "name": "CityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    storey: Optional[Storey] = field(
        default=None,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_unit: Optional[BuildingUnit] = field(
        default=None,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    appearance: Optional[Appearance] = field(
        default=None,
        metadata={
            "name": "Appearance",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AbstractVersionTransitionPropertyType:
    """
    :ivar version_transition:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/3.0"

    version_transition: Optional[VersionTransition] = field(
        default=None,
        metadata={
            "name": "VersionTransition",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class VersionTransitionPropertyType:
    """
    :ivar version_transition:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    :ivar owns:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/citygml/versioning/3.0"

    version_transition: Optional[VersionTransition] = field(
        default=None,
        metadata={
            "name": "VersionTransition",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class FeatureArrayPropertyType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_timeseries: list[CompositeTimeseries] = field(
        default_factory=list,
        metadata={
            "name": "CompositeTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "sequence": 1,
        },
    )
    tabulated_file_timeseries: list[TabulatedFileTimeseries] = field(
        default_factory=list,
        metadata={
            "name": "TabulatedFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "sequence": 1,
        },
    )
    standard_file_timeseries: list[StandardFileTimeseries] = field(
        default_factory=list,
        metadata={
            "name": "StandardFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "sequence": 1,
        },
    )
    generic_timeseries: list[GenericTimeseries] = field(
        default_factory=list,
        metadata={
            "name": "GenericTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "sequence": 1,
        },
    )
    x3_dmaterial: list[X3Dmaterial] = field(
        default_factory=list,
        metadata={
            "name": "X3DMaterial",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "sequence": 1,
        },
    )
    parameterized_texture: list[ParameterizedTexture] = field(
        default_factory=list,
        metadata={
            "name": "ParameterizedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "sequence": 1,
        },
    )
    georeferenced_texture: list[GeoreferencedTexture] = field(
        default_factory=list,
        metadata={
            "name": "GeoreferencedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "sequence": 1,
        },
    )
    address: list[Address2] = field(
        default_factory=list,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "sequence": 1,
        },
    )
    point_cloud: list[PointCloud] = field(
        default_factory=list,
        metadata={
            "name": "PointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
            "sequence": 1,
        },
    )
    city_model: list[CityModel] = field(
        default_factory=list,
        metadata={
            "name": "CityModel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "sequence": 1,
        },
    )
    version_transition: list[VersionTransition] = field(
        default_factory=list,
        metadata={
            "name": "VersionTransition",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            "sequence": 1,
        },
    )
    version: list[Version] = field(
        default_factory=list,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
            "sequence": 1,
        },
    )
    dynamizer: list[Dynamizer] = field(
        default_factory=list,
        metadata={
            "name": "Dynamizer",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
            "sequence": 1,
        },
    )
    relief_feature: list[ReliefFeature] = field(
        default_factory=list,
        metadata={
            "name": "ReliefFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
            "sequence": 1,
        },
    )
    tinrelief: list[Tinrelief] = field(
        default_factory=list,
        metadata={
            "name": "TINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
            "sequence": 1,
        },
    )
    raster_relief: list[RasterRelief] = field(
        default_factory=list,
        metadata={
            "name": "RasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
            "sequence": 1,
        },
    )
    mass_point_relief: list[MassPointRelief] = field(
        default_factory=list,
        metadata={
            "name": "MassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
            "sequence": 1,
        },
    )
    breakline_relief: list[BreaklineRelief] = field(
        default_factory=list,
        metadata={
            "name": "BreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
            "sequence": 1,
        },
    )
    water_surface: list[WaterSurface] = field(
        default_factory=list,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            "sequence": 1,
        },
    )
    water_ground_surface: list[WaterGroundSurface] = field(
        default_factory=list,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            "sequence": 1,
        },
    )
    traffic_area: list[TrafficArea] = field(
        default_factory=list,
        metadata={
            "name": "TrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    marking: list[Marking] = field(
        default_factory=list,
        metadata={
            "name": "Marking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    hole_surface: list[HoleSurface] = field(
        default_factory=list,
        metadata={
            "name": "HoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    auxiliary_traffic_area: list[AuxiliaryTrafficArea] = field(
        default_factory=list,
        metadata={
            "name": "AuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    land_use: list[LandUse] = field(
        default_factory=list,
        metadata={
            "name": "LandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
            "sequence": 1,
        },
    )
    generic_thematic_surface: list[GenericThematicSurface] = field(
        default_factory=list,
        metadata={
            "name": "GenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "sequence": 1,
        },
    )
    window_surface: list[WindowSurface] = field(
        default_factory=list,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    door_surface: list[DoorSurface] = field(
        default_factory=list,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    wall_surface: list[WallSurface] = field(
        default_factory=list,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    roof_surface: list[RoofSurface] = field(
        default_factory=list,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    outer_floor_surface: list[OuterFloorSurface] = field(
        default_factory=list,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    outer_ceiling_surface: list[OuterCeilingSurface] = field(
        default_factory=list,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    interior_wall_surface: list[InteriorWallSurface] = field(
        default_factory=list,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    ground_surface: list[GroundSurface] = field(
        default_factory=list,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    floor_surface: list[FloorSurface] = field(
        default_factory=list,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    ceiling_surface: list[CeilingSurface] = field(
        default_factory=list,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    closure_surface: list[ClosureSurface] = field(
        default_factory=list,
        metadata={
            "name": "ClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
            "sequence": 1,
        },
    )
    hollow_space: list[HollowSpace] = field(
        default_factory=list,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            "sequence": 1,
        },
    )
    traffic_space: list[TrafficSpace] = field(
        default_factory=list,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    hole: list[Hole] = field(
        default_factory=list,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    clearance_space: list[ClearanceSpace] = field(
        default_factory=list,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    auxiliary_traffic_space: list[AuxiliaryTrafficSpace] = field(
        default_factory=list,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    waterway: list[Waterway] = field(
        default_factory=list,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    track: list[Track1] = field(
        default_factory=list,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    square: list[Square] = field(
        default_factory=list,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    section: list[Section] = field(
        default_factory=list,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    road: list[Road] = field(
        default_factory=list,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    railway: list[Railway] = field(
        default_factory=list,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    intersection: list[Intersection] = field(
        default_factory=list,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
            "sequence": 1,
        },
    )
    generic_unoccupied_space: list[GenericUnoccupiedSpace] = field(
        default_factory=list,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "sequence": 1,
        },
    )
    building_room: list[BuildingRoom] = field(
        default_factory=list,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "sequence": 1,
        },
    )
    bridge_room: list[BridgeRoom] = field(
        default_factory=list,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            "sequence": 1,
        },
    )
    water_body: list[WaterBody] = field(
        default_factory=list,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
            "sequence": 1,
        },
    )
    solitary_vegetation_object: list[SolitaryVegetationObject] = field(
        default_factory=list,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
            "sequence": 1,
        },
    )
    plant_cover: list[PlantCover] = field(
        default_factory=list,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
            "sequence": 1,
        },
    )
    generic_occupied_space: list[GenericOccupiedSpace] = field(
        default_factory=list,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "sequence": 1,
        },
    )
    city_furniture: list[CityFurniture] = field(
        default_factory=list,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
            "sequence": 1,
        },
    )
    tunnel_installation: list[TunnelInstallation] = field(
        default_factory=list,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            "sequence": 1,
        },
    )
    building_installation: list[BuildingInstallation] = field(
        default_factory=list,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "sequence": 1,
        },
    )
    bridge_installation: list[BridgeInstallation] = field(
        default_factory=list,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            "sequence": 1,
        },
    )
    tunnel_furniture: list[TunnelFurniture] = field(
        default_factory=list,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            "sequence": 1,
        },
    )
    building_furniture: list[BuildingFurniture] = field(
        default_factory=list,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "sequence": 1,
        },
    )
    bridge_furniture: list[BridgeFurniture] = field(
        default_factory=list,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            "sequence": 1,
        },
    )
    window: list[Window] = field(
        default_factory=list,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    door: list[Door] = field(
        default_factory=list,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    tunnel_constructive_element: list[TunnelConstructiveElement] = field(
        default_factory=list,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            "sequence": 1,
        },
    )
    building_constructive_element: list[BuildingConstructiveElement] = field(
        default_factory=list,
        metadata={
            "name": "BuildingConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "sequence": 1,
        },
    )
    bridge_constructive_element: list[BridgeConstructiveElement] = field(
        default_factory=list,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            "sequence": 1,
        },
    )
    tunnel_part: list[TunnelPart] = field(
        default_factory=list,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            "sequence": 1,
        },
    )
    tunnel: list[Tunnel] = field(
        default_factory=list,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
            "sequence": 1,
        },
    )
    building_part: list[BuildingPart] = field(
        default_factory=list,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "sequence": 1,
        },
    )
    building: list[Building] = field(
        default_factory=list,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "sequence": 1,
        },
    )
    bridge_part: list[BridgePart] = field(
        default_factory=list,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            "sequence": 1,
        },
    )
    bridge: list[Bridge] = field(
        default_factory=list,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
            "sequence": 1,
        },
    )
    other_construction: list[OtherConstruction] = field(
        default_factory=list,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
            "sequence": 1,
        },
    )
    generic_logical_space: list[GenericLogicalSpace] = field(
        default_factory=list,
        metadata={
            "name": "GenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
            "sequence": 1,
        },
    )
    city_object_group: list[CityObjectGroup] = field(
        default_factory=list,
        metadata={
            "name": "CityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
            "sequence": 1,
        },
    )
    storey: list[Storey] = field(
        default_factory=list,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "sequence": 1,
        },
    )
    building_unit: list[BuildingUnit] = field(
        default_factory=list,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
            "sequence": 1,
        },
    )
    appearance: list[Appearance] = field(
        default_factory=list,
        metadata={
            "name": "Appearance",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
            "sequence": 1,
        },
    )
    feature_collection: list["FeatureCollection"] = field(
        default_factory=list,
        metadata={
            "name": "FeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    directed_observation_at_distance: list[DirectedObservationAtDistance] = (
        field(
            default_factory=list,
            metadata={
                "name": "DirectedObservationAtDistance",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
                "sequence": 1,
            },
        )
    )
    directed_observation: list[DirectedObservation] = field(
        default_factory=list,
        metadata={
            "name": "DirectedObservation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    observation: list[Observation] = field(
        default_factory=list,
        metadata={
            "name": "Observation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    rectified_grid_coverage: list[RectifiedGridCoverage] = field(
        default_factory=list,
        metadata={
            "name": "RectifiedGridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    grid_coverage: list[GridCoverage] = field(
        default_factory=list,
        metadata={
            "name": "GridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_solid_coverage: list[MultiSolidCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiSolidCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_surface_coverage: list[MultiSurfaceCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiSurfaceCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_curve_coverage: list[MultiCurveCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiCurveCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    multi_point_coverage: list[MultiPointCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiPointCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    dynamic_feature_collection: list[DynamicFeatureCollection] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )
    dynamic_feature: list[DynamicFeature] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequence": 1,
        },
    )


@dataclass
class FeaturePropertyType:
    """
    :ivar composite_timeseries:
    :ivar tabulated_file_timeseries:
    :ivar standard_file_timeseries:
    :ivar generic_timeseries:
    :ivar x3_dmaterial:
    :ivar parameterized_texture:
    :ivar georeferenced_texture:
    :ivar address:
    :ivar point_cloud:
    :ivar city_model:
    :ivar version_transition:
    :ivar version:
    :ivar dynamizer:
    :ivar relief_feature:
    :ivar tinrelief:
    :ivar raster_relief:
    :ivar mass_point_relief:
    :ivar breakline_relief:
    :ivar water_surface:
    :ivar water_ground_surface:
    :ivar traffic_area:
    :ivar marking:
    :ivar hole_surface:
    :ivar auxiliary_traffic_area:
    :ivar land_use:
    :ivar generic_thematic_surface:
    :ivar window_surface:
    :ivar door_surface:
    :ivar wall_surface:
    :ivar roof_surface:
    :ivar outer_floor_surface:
    :ivar outer_ceiling_surface:
    :ivar interior_wall_surface:
    :ivar ground_surface:
    :ivar floor_surface:
    :ivar ceiling_surface:
    :ivar closure_surface:
    :ivar hollow_space:
    :ivar traffic_space:
    :ivar hole:
    :ivar clearance_space:
    :ivar auxiliary_traffic_space:
    :ivar waterway:
    :ivar track:
    :ivar square:
    :ivar section:
    :ivar road:
    :ivar railway:
    :ivar intersection:
    :ivar generic_unoccupied_space:
    :ivar building_room:
    :ivar bridge_room:
    :ivar water_body:
    :ivar solitary_vegetation_object:
    :ivar plant_cover:
    :ivar generic_occupied_space:
    :ivar city_furniture:
    :ivar tunnel_installation:
    :ivar building_installation:
    :ivar bridge_installation:
    :ivar tunnel_furniture:
    :ivar building_furniture:
    :ivar bridge_furniture:
    :ivar window:
    :ivar door:
    :ivar tunnel_constructive_element:
    :ivar building_constructive_element:
    :ivar bridge_constructive_element:
    :ivar tunnel_part:
    :ivar tunnel:
    :ivar building_part:
    :ivar building:
    :ivar bridge_part:
    :ivar bridge:
    :ivar other_construction:
    :ivar generic_logical_space:
    :ivar city_object_group:
    :ivar storey:
    :ivar building_unit:
    :ivar appearance:
    :ivar feature_collection:
    :ivar directed_observation_at_distance:
    :ivar directed_observation:
    :ivar observation:
    :ivar rectified_grid_coverage:
    :ivar grid_coverage:
    :ivar multi_solid_coverage:
    :ivar multi_surface_coverage:
    :ivar multi_curve_coverage:
    :ivar multi_point_coverage:
    :ivar dynamic_feature_collection:
    :ivar dynamic_feature:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_timeseries: Optional[CompositeTimeseries] = field(
        default=None,
        metadata={
            "name": "CompositeTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    tabulated_file_timeseries: Optional[TabulatedFileTimeseries] = field(
        default=None,
        metadata={
            "name": "TabulatedFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    standard_file_timeseries: Optional[StandardFileTimeseries] = field(
        default=None,
        metadata={
            "name": "StandardFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    generic_timeseries: Optional[GenericTimeseries] = field(
        default=None,
        metadata={
            "name": "GenericTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    x3_dmaterial: Optional[X3Dmaterial] = field(
        default=None,
        metadata={
            "name": "X3DMaterial",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    parameterized_texture: Optional[ParameterizedTexture] = field(
        default=None,
        metadata={
            "name": "ParameterizedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    georeferenced_texture: Optional[GeoreferencedTexture] = field(
        default=None,
        metadata={
            "name": "GeoreferencedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    address: Optional[Address2] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    point_cloud: Optional[PointCloud] = field(
        default=None,
        metadata={
            "name": "PointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )
    city_model: Optional[CityModel] = field(
        default=None,
        metadata={
            "name": "CityModel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    version_transition: Optional[VersionTransition] = field(
        default=None,
        metadata={
            "name": "VersionTransition",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    version: Optional[Version] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    dynamizer: Optional[Dynamizer] = field(
        default=None,
        metadata={
            "name": "Dynamizer",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    relief_feature: Optional[ReliefFeature] = field(
        default=None,
        metadata={
            "name": "ReliefFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    tinrelief: Optional[Tinrelief] = field(
        default=None,
        metadata={
            "name": "TINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    raster_relief: Optional[RasterRelief] = field(
        default=None,
        metadata={
            "name": "RasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    mass_point_relief: Optional[MassPointRelief] = field(
        default=None,
        metadata={
            "name": "MassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    breakline_relief: Optional[BreaklineRelief] = field(
        default=None,
        metadata={
            "name": "BreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    water_surface: Optional[WaterSurface] = field(
        default=None,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    water_ground_surface: Optional[WaterGroundSurface] = field(
        default=None,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    traffic_area: Optional[TrafficArea] = field(
        default=None,
        metadata={
            "name": "TrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    marking: Optional[Marking] = field(
        default=None,
        metadata={
            "name": "Marking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole_surface: Optional[HoleSurface] = field(
        default=None,
        metadata={
            "name": "HoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    land_use: Optional[LandUse] = field(
        default=None,
        metadata={
            "name": "LandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    generic_thematic_surface: Optional[GenericThematicSurface] = field(
        default=None,
        metadata={
            "name": "GenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    window_surface: Optional[WindowSurface] = field(
        default=None,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door_surface: Optional[DoorSurface] = field(
        default=None,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    wall_surface: Optional[WallSurface] = field(
        default=None,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    roof_surface: Optional[RoofSurface] = field(
        default=None,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_floor_surface: Optional[OuterFloorSurface] = field(
        default=None,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
        default=None,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    interior_wall_surface: Optional[InteriorWallSurface] = field(
        default=None,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ground_surface: Optional[GroundSurface] = field(
        default=None,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    floor_surface: Optional[FloorSurface] = field(
        default=None,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ceiling_surface: Optional[CeilingSurface] = field(
        default=None,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    closure_surface: Optional[ClosureSurface] = field(
        default=None,
        metadata={
            "name": "ClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    hollow_space: Optional[HollowSpace] = field(
        default=None,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    traffic_space: Optional[TrafficSpace] = field(
        default=None,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole: Optional[Hole] = field(
        default=None,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    clearance_space: Optional[ClearanceSpace] = field(
        default=None,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    waterway: Optional[Waterway] = field(
        default=None,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    track: Optional[Track1] = field(
        default=None,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    square: Optional[Square] = field(
        default=None,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: Optional[Section] = field(
        default=None,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    road: Optional[Road] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    railway: Optional[Railway] = field(
        default=None,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: Optional[Intersection] = field(
        default=None,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    building_room: Optional[BuildingRoom] = field(
        default=None,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_room: Optional[BridgeRoom] = field(
        default=None,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    water_body: Optional[WaterBody] = field(
        default=None,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
        default=None,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    plant_cover: Optional[PlantCover] = field(
        default=None,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    generic_occupied_space: Optional[GenericOccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_furniture: Optional[CityFurniture] = field(
        default=None,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    tunnel_installation: Optional[TunnelInstallation] = field(
        default=None,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_installation: Optional[BuildingInstallation] = field(
        default=None,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_installation: Optional[BridgeInstallation] = field(
        default=None,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_furniture: Optional[TunnelFurniture] = field(
        default=None,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_furniture: Optional[BuildingFurniture] = field(
        default=None,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_furniture: Optional[BridgeFurniture] = field(
        default=None,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    window: Optional[Window] = field(
        default=None,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door: Optional[Door] = field(
        default=None,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    tunnel_constructive_element: Optional[TunnelConstructiveElement] = field(
        default=None,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_constructive_element: Optional[BuildingConstructiveElement] = (
        field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    bridge_constructive_element: Optional[BridgeConstructiveElement] = field(
        default=None,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    other_construction: Optional[OtherConstruction] = field(
        default=None,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    generic_logical_space: Optional[GenericLogicalSpace] = field(
        default=None,
        metadata={
            "name": "GenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_object_group: Optional[CityObjectGroup] = field(
        default=None,
        metadata={
            "name": "CityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    storey: Optional[Storey] = field(
        default=None,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_unit: Optional[BuildingUnit] = field(
        default=None,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    appearance: Optional[Appearance] = field(
        default=None,
        metadata={
            "name": "Appearance",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    feature_collection: Optional["FeatureCollection"] = field(
        default=None,
        metadata={
            "name": "FeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation_at_distance: Optional[
        "DirectedObservationAtDistance"
    ] = field(
        default=None,
        metadata={
            "name": "DirectedObservationAtDistance",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation: Optional["DirectedObservation"] = field(
        default=None,
        metadata={
            "name": "DirectedObservation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    observation: Optional["Observation"] = field(
        default=None,
        metadata={
            "name": "Observation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid_coverage: Optional[RectifiedGridCoverage] = field(
        default=None,
        metadata={
            "name": "RectifiedGridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_coverage: Optional[GridCoverage] = field(
        default=None,
        metadata={
            "name": "GridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid_coverage: Optional[MultiSolidCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSolidCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface_coverage: Optional[MultiSurfaceCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSurfaceCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve_coverage: Optional[MultiCurveCoverage] = field(
        default=None,
        metadata={
            "name": "MultiCurveCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point_coverage: Optional[MultiPointCoverage] = field(
        default=None,
        metadata={
            "name": "MultiPointCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature_collection: Optional[DynamicFeatureCollection] = field(
        default=None,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature: Optional[DynamicFeature] = field(
        default=None,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class FeatureMember(FeaturePropertyType):
    class Meta:
        name = "featureMember"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FeatureMembers(FeatureArrayPropertyType):
    class Meta:
        name = "featureMembers"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FeatureProperty(FeaturePropertyType):
    class Meta:
        name = "featureProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractFeatureCollectionType(AbstractFeatureType1):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    feature_member: list[FeatureMember] = field(
        default_factory=list,
        metadata={
            "name": "featureMember",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    feature_members: Optional[FeatureMembers] = field(
        default=None,
        metadata={
            "name": "featureMembers",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class AbstractFeatureCollection(AbstractFeatureCollectionType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FeatureCollectionType(AbstractFeatureCollectionType):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class FeatureCollection(FeatureCollectionType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArrayAssociationType:
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    transaction: list[Transaction] = field(
        default_factory=list,
        metadata={
            "name": "Transaction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    timeseries_component: list[TimeseriesComponent] = field(
        default_factory=list,
        metadata={
            "name": "TimeseriesComponent",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    time_value_pair: list[TimeValuePair] = field(
        default_factory=list,
        metadata={
            "name": "TimeValuePair",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    sensor_connection: list[SensorConnection] = field(
        default_factory=list,
        metadata={
            "name": "SensorConnection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    room_height: list[RoomHeight] = field(
        default_factory=list,
        metadata={
            "name": "RoomHeight",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    height: list[Height] = field(
        default_factory=list,
        metadata={
            "name": "Height",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    elevation: list[Elevation] = field(
        default_factory=list,
        metadata={
            "name": "Elevation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    construction_event: list[ConstructionEvent] = field(
        default_factory=list,
        metadata={
            "name": "ConstructionEvent",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    tex_coord_list: list[TexCoordList] = field(
        default_factory=list,
        metadata={
            "name": "TexCoordList",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    tex_coord_gen: list[TexCoordGen] = field(
        default_factory=list,
        metadata={
            "name": "TexCoordGen",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    qualified_volume: list[QualifiedVolume] = field(
        default_factory=list,
        metadata={
            "name": "QualifiedVolume",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    qualified_area: list[QualifiedArea] = field(
        default_factory=list,
        metadata={
            "name": "QualifiedArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    occupancy: list[Occupancy] = field(
        default_factory=list,
        metadata={
            "name": "Occupancy",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    external_reference: list[ExternalReference] = field(
        default_factory=list,
        metadata={
            "name": "ExternalReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    uri_attribute: list[UriAttribute] = field(
        default_factory=list,
        metadata={
            "name": "UriAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    string_attribute: list[StringAttribute] = field(
        default_factory=list,
        metadata={
            "name": "StringAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    measure_attribute: list[MeasureAttribute] = field(
        default_factory=list,
        metadata={
            "name": "MeasureAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    int_attribute: list[IntAttribute] = field(
        default_factory=list,
        metadata={
            "name": "IntAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    generic_attribute_set: list[GenericAttributeSet] = field(
        default_factory=list,
        metadata={
            "name": "GenericAttributeSet",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    double_attribute: list[DoubleAttribute] = field(
        default_factory=list,
        metadata={
            "name": "DoubleAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    date_attribute: list[DateAttribute] = field(
        default_factory=list,
        metadata={
            "name": "DateAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    code_attribute: list[CodeAttribute] = field(
        default_factory=list,
        metadata={
            "name": "CodeAttribute",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    generic_meta_data: list[GenericMetaData] = field(
        default_factory=list,
        metadata={
            "name": "GenericMetaData",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value_group: list[ParameterValueGroup] = field(
        default_factory=list,
        metadata={
            "name": "ParameterValueGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    parameter_value: list[ParameterValue1] = field(
        default_factory=list,
        metadata={
            "name": "ParameterValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_function: list[GridFunction] = field(
        default_factory=list,
        metadata={
            "name": "GridFunction",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coverage_mapping_rule: list[CoverageMappingRule] = field(
        default_factory=list,
        metadata={
            "name": "CoverageMappingRule",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coverage_function: list[CoverageFunction] = field(
        default_factory=list,
        metadata={
            "name": "coverageFunction",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    file: list[File] = field(
        default_factory=list,
        metadata={
            "name": "File",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    data_block: list[DataBlock] = field(
        default_factory=list,
        metadata={
            "name": "DataBlock",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity_extent: list[QuantityExtent] = field(
        default_factory=list,
        metadata={
            "name": "QuantityExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    count_extent: list[CountExtent] = field(
        default_factory=list,
        metadata={
            "name": "CountExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    category_extent: list[CategoryExtent] = field(
        default_factory=list,
        metadata={
            "name": "CategoryExtent",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    value_array: list[ValueArray] = field(
        default_factory=list,
        metadata={
            "name": "ValueArray",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_value: list[CompositeValue] = field(
        default_factory=list,
        metadata={
            "name": "CompositeValue",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity_list: list[QuantityList] = field(
        default_factory=list,
        metadata={
            "name": "QuantityList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    count_list: list[CountList] = field(
        default_factory=list,
        metadata={
            "name": "CountList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    category_list: list[CategoryList] = field(
        default_factory=list,
        metadata={
            "name": "CategoryList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    boolean_list: list[BooleanList] = field(
        default_factory=list,
        metadata={
            "name": "BooleanList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    quantity: list[Quantity] = field(
        default_factory=list,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    count: list[Count] = field(
        default_factory=list,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    category: list[Category] = field(
        default_factory=list,
        metadata={
            "name": "Category",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    boolean: list[Boolean1] = field(
        default_factory=list,
        metadata={
            "name": "Boolean",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "nillable": True,
        },
    )
    affine_placement: list[AffinePlacement] = field(
        default_factory=list,
        metadata={
            "name": "AffinePlacement",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodesic: list[Geodesic] = field(
        default_factory=list,
        metadata={
            "name": "Geodesic",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodesic_string: list[GeodesicString] = field(
        default_factory=list,
        metadata={
            "name": "GeodesicString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    clothoid: list[Clothoid] = field(
        default_factory=list,
        metadata={
            "name": "Clothoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    offset_curve: list[OffsetCurve] = field(
        default_factory=list,
        metadata={
            "name": "OffsetCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    bezier: list[Bezier] = field(
        default_factory=list,
        metadata={
            "name": "Bezier",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    bspline: list[Bspline] = field(
        default_factory=list,
        metadata={
            "name": "BSpline",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cubic_spline: list[CubicSpline] = field(
        default_factory=list,
        metadata={
            "name": "CubicSpline",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    circle_by_center_point: list[CircleByCenterPoint] = field(
        default_factory=list,
        metadata={
            "name": "CircleByCenterPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    arc_by_center_point: list[ArcByCenterPoint] = field(
        default_factory=list,
        metadata={
            "name": "ArcByCenterPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    arc_by_bulge: list[ArcByBulge] = field(
        default_factory=list,
        metadata={
            "name": "ArcByBulge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    arc_string_by_bulge: list[ArcStringByBulge] = field(
        default_factory=list,
        metadata={
            "name": "ArcStringByBulge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    circle: list[Circle] = field(
        default_factory=list,
        metadata={
            "name": "Circle",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    arc: list[Arc] = field(
        default_factory=list,
        metadata={
            "name": "Arc",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    arc_string: list[ArcString] = field(
        default_factory=list,
        metadata={
            "name": "ArcString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string_segment: list[LineStringSegment] = field(
        default_factory=list,
        metadata={
            "name": "LineStringSegment",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    envelope_with_time_period: list[EnvelopeWithTimePeriod] = field(
        default_factory=list,
        metadata={
            "name": "EnvelopeWithTimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    envelope: list[Envelope] = field(
        default_factory=list,
        metadata={
            "name": "Envelope",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    role: list[Role] = field(
        default_factory=list,
        metadata={
            "name": "Role",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    texture_association: list[TextureAssociation] = field(
        default_factory=list,
        metadata={
            "name": "TextureAssociation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    implicit_geometry: list[ImplicitGeometry] = field(
        default_factory=list,
        metadata={
            "name": "ImplicitGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    city_object_relation: list[CityObjectRelation] = field(
        default_factory=list,
        metadata={
            "name": "CityObjectRelation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    array: list["Array"] = field(
        default_factory=list,
        metadata={
            "name": "Array",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    bag: list["Bag"] = field(
        default_factory=list,
        metadata={
            "name": "Bag",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    topo_complex: list[TopoComplex] = field(
        default_factory=list,
        metadata={
            "name": "TopoComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    topo_solid: list[TopoSolid] = field(
        default_factory=list,
        metadata={
            "name": "TopoSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    face: list[Face] = field(
        default_factory=list,
        metadata={
            "name": "Face",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    edge: list[Edge] = field(
        default_factory=list,
        metadata={
            "name": "Edge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    node: list[Node] = field(
        default_factory=list,
        metadata={
            "name": "Node",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    moving_object_status: list[MovingObjectStatus] = field(
        default_factory=list,
        metadata={
            "name": "MovingObjectStatus",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_timeseries: list[CompositeTimeseries] = field(
        default_factory=list,
        metadata={
            "name": "CompositeTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    tabulated_file_timeseries: list[TabulatedFileTimeseries] = field(
        default_factory=list,
        metadata={
            "name": "TabulatedFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    standard_file_timeseries: list[StandardFileTimeseries] = field(
        default_factory=list,
        metadata={
            "name": "StandardFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    generic_timeseries: list[GenericTimeseries] = field(
        default_factory=list,
        metadata={
            "name": "GenericTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    x3_dmaterial: list[X3Dmaterial] = field(
        default_factory=list,
        metadata={
            "name": "X3DMaterial",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    parameterized_texture: list[ParameterizedTexture] = field(
        default_factory=list,
        metadata={
            "name": "ParameterizedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    georeferenced_texture: list[GeoreferencedTexture] = field(
        default_factory=list,
        metadata={
            "name": "GeoreferencedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    address: list[Address2] = field(
        default_factory=list,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    point_cloud: list[PointCloud] = field(
        default_factory=list,
        metadata={
            "name": "PointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )
    city_model: list[CityModel] = field(
        default_factory=list,
        metadata={
            "name": "CityModel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    version_transition: list[VersionTransition] = field(
        default_factory=list,
        metadata={
            "name": "VersionTransition",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    version: list[Version] = field(
        default_factory=list,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    dynamizer: list[Dynamizer] = field(
        default_factory=list,
        metadata={
            "name": "Dynamizer",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    relief_feature: list[ReliefFeature] = field(
        default_factory=list,
        metadata={
            "name": "ReliefFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    tinrelief: list[Tinrelief] = field(
        default_factory=list,
        metadata={
            "name": "TINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    raster_relief: list[RasterRelief] = field(
        default_factory=list,
        metadata={
            "name": "RasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    mass_point_relief: list[MassPointRelief] = field(
        default_factory=list,
        metadata={
            "name": "MassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    breakline_relief: list[BreaklineRelief] = field(
        default_factory=list,
        metadata={
            "name": "BreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    water_surface: list[WaterSurface] = field(
        default_factory=list,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    water_ground_surface: list[WaterGroundSurface] = field(
        default_factory=list,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    traffic_area: list[TrafficArea] = field(
        default_factory=list,
        metadata={
            "name": "TrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    marking: list[Marking] = field(
        default_factory=list,
        metadata={
            "name": "Marking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole_surface: list[HoleSurface] = field(
        default_factory=list,
        metadata={
            "name": "HoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_area: list[AuxiliaryTrafficArea] = field(
        default_factory=list,
        metadata={
            "name": "AuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    land_use: list[LandUse] = field(
        default_factory=list,
        metadata={
            "name": "LandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    generic_thematic_surface: list[GenericThematicSurface] = field(
        default_factory=list,
        metadata={
            "name": "GenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    window_surface: list[WindowSurface] = field(
        default_factory=list,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door_surface: list[DoorSurface] = field(
        default_factory=list,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    wall_surface: list[WallSurface] = field(
        default_factory=list,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    roof_surface: list[RoofSurface] = field(
        default_factory=list,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_floor_surface: list[OuterFloorSurface] = field(
        default_factory=list,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_ceiling_surface: list[OuterCeilingSurface] = field(
        default_factory=list,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    interior_wall_surface: list[InteriorWallSurface] = field(
        default_factory=list,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ground_surface: list[GroundSurface] = field(
        default_factory=list,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    floor_surface: list[FloorSurface] = field(
        default_factory=list,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ceiling_surface: list[CeilingSurface] = field(
        default_factory=list,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    closure_surface: list[ClosureSurface] = field(
        default_factory=list,
        metadata={
            "name": "ClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    hollow_space: list[HollowSpace] = field(
        default_factory=list,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    traffic_space: list[TrafficSpace] = field(
        default_factory=list,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole: list[Hole] = field(
        default_factory=list,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    clearance_space: list[ClearanceSpace] = field(
        default_factory=list,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_space: list[AuxiliaryTrafficSpace] = field(
        default_factory=list,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    waterway: list[Waterway] = field(
        default_factory=list,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    track: list[Track1] = field(
        default_factory=list,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    square: list[Square] = field(
        default_factory=list,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: list[Section] = field(
        default_factory=list,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    road: list[Road] = field(
        default_factory=list,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    railway: list[Railway] = field(
        default_factory=list,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: list[Intersection] = field(
        default_factory=list,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    generic_unoccupied_space: list[GenericUnoccupiedSpace] = field(
        default_factory=list,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    building_room: list[BuildingRoom] = field(
        default_factory=list,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_room: list[BridgeRoom] = field(
        default_factory=list,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    water_body: list[WaterBody] = field(
        default_factory=list,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    solitary_vegetation_object: list[SolitaryVegetationObject] = field(
        default_factory=list,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    plant_cover: list[PlantCover] = field(
        default_factory=list,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    generic_occupied_space: list[GenericOccupiedSpace] = field(
        default_factory=list,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_furniture: list[CityFurniture] = field(
        default_factory=list,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    tunnel_installation: list[TunnelInstallation] = field(
        default_factory=list,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_installation: list[BuildingInstallation] = field(
        default_factory=list,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_installation: list[BridgeInstallation] = field(
        default_factory=list,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_furniture: list[TunnelFurniture] = field(
        default_factory=list,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_furniture: list[BuildingFurniture] = field(
        default_factory=list,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_furniture: list[BridgeFurniture] = field(
        default_factory=list,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    window: list[Window] = field(
        default_factory=list,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door: list[Door] = field(
        default_factory=list,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    tunnel_constructive_element: list[TunnelConstructiveElement] = field(
        default_factory=list,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_constructive_element: list[BuildingConstructiveElement] = field(
        default_factory=list,
        metadata={
            "name": "BuildingConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_constructive_element: list[BridgeConstructiveElement] = field(
        default_factory=list,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_part: list[TunnelPart] = field(
        default_factory=list,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: list[Tunnel] = field(
        default_factory=list,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_part: list[BuildingPart] = field(
        default_factory=list,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: list[Building] = field(
        default_factory=list,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_part: list[BridgePart] = field(
        default_factory=list,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: list[Bridge] = field(
        default_factory=list,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    other_construction: list[OtherConstruction] = field(
        default_factory=list,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    generic_logical_space: list[GenericLogicalSpace] = field(
        default_factory=list,
        metadata={
            "name": "GenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_object_group: list[CityObjectGroup] = field(
        default_factory=list,
        metadata={
            "name": "CityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    storey: list[Storey] = field(
        default_factory=list,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_unit: list[BuildingUnit] = field(
        default_factory=list,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    appearance: list[Appearance] = field(
        default_factory=list,
        metadata={
            "name": "Appearance",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    feature_collection: list[FeatureCollection] = field(
        default_factory=list,
        metadata={
            "name": "FeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation_at_distance: list[DirectedObservationAtDistance] = (
        field(
            default_factory=list,
            metadata={
                "name": "DirectedObservationAtDistance",
                "type": "Element",
                "namespace": "http://www.opengis.net/gml/3.2",
            },
        )
    )
    directed_observation: list[DirectedObservation] = field(
        default_factory=list,
        metadata={
            "name": "DirectedObservation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    observation: list[Observation] = field(
        default_factory=list,
        metadata={
            "name": "Observation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid_coverage: list[RectifiedGridCoverage] = field(
        default_factory=list,
        metadata={
            "name": "RectifiedGridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_coverage: list[GridCoverage] = field(
        default_factory=list,
        metadata={
            "name": "GridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid_coverage: list[MultiSolidCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiSolidCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface_coverage: list[MultiSurfaceCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiSurfaceCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve_coverage: list[MultiCurveCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiCurveCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point_coverage: list[MultiPointCoverage] = field(
        default_factory=list,
        metadata={
            "name": "MultiPointCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature_collection: list[DynamicFeatureCollection] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature: list[DynamicFeature] = field(
        default_factory=list,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_topology_complex: list[TimeTopologyComplex] = field(
        default_factory=list,
        metadata={
            "name": "TimeTopologyComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_edge: list[TimeEdge] = field(
        default_factory=list,
        metadata={
            "name": "TimeEdge",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_node: list[TimeNode] = field(
        default_factory=list,
        metadata={
            "name": "TimeNode",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_period: list[TimePeriod] = field(
        default_factory=list,
        metadata={
            "name": "TimePeriod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_instant: list[TimeInstant] = field(
        default_factory=list,
        metadata={
            "name": "TimeInstant",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid: list[RectifiedGrid] = field(
        default_factory=list,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: list[Grid] = field(
        default_factory=list,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: list[GeometricComplex] = field(
        default_factory=list,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: list[MultiSolid] = field(
        default_factory=list,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: list[MultiSurface] = field(
        default_factory=list,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: list[MultiCurve] = field(
        default_factory=list,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: list[MultiPoint] = field(
        default_factory=list,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: list[MultiGeometry] = field(
        default_factory=list,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: list[CompositeSolid] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: list[Solid] = field(
        default_factory=list,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: list[CompositeSurface] = field(
        default_factory=list,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: list[Shell] = field(
        default_factory=list,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: list[OrientableSurface] = field(
        default_factory=list,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: list[Tin] = field(
        default_factory=list,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: list[TriangulatedSurface] = field(
        default_factory=list,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: list[PolyhedralSurface] = field(
        default_factory=list,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: list[Surface] = field(
        default_factory=list,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: list[Polygon] = field(
        default_factory=list,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: list[CompositeCurve] = field(
        default_factory=list,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: list[OrientableCurve] = field(
        default_factory=list,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: list[Curve] = field(
        default_factory=list,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: list[Ring] = field(
        default_factory=list,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: list[LinearRing] = field(
        default_factory=list,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: list[LineString] = field(
        default_factory=list,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: list[Point] = field(
        default_factory=list,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    definition_proxy: list[DefinitionProxy] = field(
        default_factory=list,
        metadata={
            "name": "DefinitionProxy",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    definition_collection: list[DefinitionCollection] = field(
        default_factory=list,
        metadata={
            "name": "DefinitionCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_ordinal_reference_system: list[TimeOrdinalReferenceSystem] = field(
        default_factory=list,
        metadata={
            "name": "TimeOrdinalReferenceSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_clock: list[TimeClock] = field(
        default_factory=list,
        metadata={
            "name": "TimeClock",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_calendar: list[TimeCalendar] = field(
        default_factory=list,
        metadata={
            "name": "TimeCalendar",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_coordinate_system: list[TimeCoordinateSystem] = field(
        default_factory=list,
        metadata={
            "name": "TimeCoordinateSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_reference_system: list[TimeReferenceSystem] = field(
        default_factory=list,
        metadata={
            "name": "TimeReferenceSystem",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter_group: list[OperationParameterGroup] = field(
        default_factory=list,
        metadata={
            "name": "OperationParameterGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_parameter: list[OperationParameter1] = field(
        default_factory=list,
        metadata={
            "name": "OperationParameter",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    operation_method: list[OperationMethod] = field(
        default_factory=list,
        metadata={
            "name": "OperationMethod",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    concatenated_operation: list[ConcatenatedOperation] = field(
        default_factory=list,
        metadata={
            "name": "ConcatenatedOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    transformation: list[Transformation] = field(
        default_factory=list,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conversion: list[Conversion1] = field(
        default_factory=list,
        metadata={
            "name": "Conversion",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    pass_through_operation: list[PassThroughOperation] = field(
        default_factory=list,
        metadata={
            "name": "PassThroughOperation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    prime_meridian: list[PrimeMeridian1] = field(
        default_factory=list,
        metadata={
            "name": "PrimeMeridian",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoid: list[Ellipsoid1] = field(
        default_factory=list,
        metadata={
            "name": "Ellipsoid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_datum: list[TemporalDatum1] = field(
        default_factory=list,
        metadata={
            "name": "TemporalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_datum: list[VerticalDatum1] = field(
        default_factory=list,
        metadata={
            "name": "VerticalDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_datum: list[ImageDatum1] = field(
        default_factory=list,
        metadata={
            "name": "ImageDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_datum: list[EngineeringDatum1] = field(
        default_factory=list,
        metadata={
            "name": "EngineeringDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_datum: list[GeodeticDatum1] = field(
        default_factory=list,
        metadata={
            "name": "GeodeticDatum",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    oblique_cartesian_cs: list[ObliqueCartesianCs] = field(
        default_factory=list,
        metadata={
            "name": "ObliqueCartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_cs: list[TemporalCs] = field(
        default_factory=list,
        metadata={
            "name": "TemporalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    affine_cs: list[AffineCs1] = field(
        default_factory=list,
        metadata={
            "name": "AffineCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cylindrical_cs: list[CylindricalCs1] = field(
        default_factory=list,
        metadata={
            "name": "CylindricalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polar_cs: list[PolarCs1] = field(
        default_factory=list,
        metadata={
            "name": "PolarCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    spherical_cs: list[SphericalCs1] = field(
        default_factory=list,
        metadata={
            "name": "SphericalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    user_defined_cs: list[UserDefinedCs1] = field(
        default_factory=list,
        metadata={
            "name": "UserDefinedCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_cs: list[LinearCs1] = field(
        default_factory=list,
        metadata={
            "name": "LinearCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    time_cs: list[TimeCs1] = field(
        default_factory=list,
        metadata={
            "name": "TimeCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_cs: list[VerticalCs1] = field(
        default_factory=list,
        metadata={
            "name": "VerticalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    cartesian_cs: list[CartesianCs1] = field(
        default_factory=list,
        metadata={
            "name": "CartesianCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ellipsoidal_cs: list[EllipsoidalCs1] = field(
        default_factory=list,
        metadata={
            "name": "EllipsoidalCS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    coordinate_system_axis: list[CoordinateSystemAxis] = field(
        default_factory=list,
        metadata={
            "name": "CoordinateSystemAxis",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    compound_crs: list[CompoundCrs] = field(
        default_factory=list,
        metadata={
            "name": "CompoundCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geocentric_crs: list[GeocentricCrs] = field(
        default_factory=list,
        metadata={
            "name": "GeocentricCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geographic_crs: list[GeographicCrs] = field(
        default_factory=list,
        metadata={
            "name": "GeographicCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    temporal_crs: list[TemporalCrs] = field(
        default_factory=list,
        metadata={
            "name": "TemporalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    image_crs: list[ImageCrs] = field(
        default_factory=list,
        metadata={
            "name": "ImageCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    engineering_crs: list[EngineeringCrs] = field(
        default_factory=list,
        metadata={
            "name": "EngineeringCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    vertical_crs: list[VerticalCrs] = field(
        default_factory=list,
        metadata={
            "name": "VerticalCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geodetic_crs: list[GeodeticCrs] = field(
        default_factory=list,
        metadata={
            "name": "GeodeticCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_crs: list[DerivedCrs] = field(
        default_factory=list,
        metadata={
            "name": "DerivedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    projected_crs: list[ProjectedCrs] = field(
        default_factory=list,
        metadata={
            "name": "ProjectedCRS",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    conventional_unit: list[ConventionalUnit] = field(
        default_factory=list,
        metadata={
            "name": "ConventionalUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    derived_unit: list[DerivedUnit] = field(
        default_factory=list,
        metadata={
            "name": "DerivedUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    base_unit: list[BaseUnit] = field(
        default_factory=list,
        metadata={
            "name": "BaseUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    unit_definition: list[UnitDefinition] = field(
        default_factory=list,
        metadata={
            "name": "UnitDefinition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dictionary: list[Dictionary] = field(
        default_factory=list,
        metadata={
            "name": "Dictionary",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    definition: list[Definition] = field(
        default_factory=list,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ProcedurePropertyType:
    """
    :ivar composite_timeseries:
    :ivar tabulated_file_timeseries:
    :ivar standard_file_timeseries:
    :ivar generic_timeseries:
    :ivar x3_dmaterial:
    :ivar parameterized_texture:
    :ivar georeferenced_texture:
    :ivar address:
    :ivar point_cloud:
    :ivar city_model:
    :ivar version_transition:
    :ivar version:
    :ivar dynamizer:
    :ivar relief_feature:
    :ivar tinrelief:
    :ivar raster_relief:
    :ivar mass_point_relief:
    :ivar breakline_relief:
    :ivar water_surface:
    :ivar water_ground_surface:
    :ivar traffic_area:
    :ivar marking:
    :ivar hole_surface:
    :ivar auxiliary_traffic_area:
    :ivar land_use:
    :ivar generic_thematic_surface:
    :ivar window_surface:
    :ivar door_surface:
    :ivar wall_surface:
    :ivar roof_surface:
    :ivar outer_floor_surface:
    :ivar outer_ceiling_surface:
    :ivar interior_wall_surface:
    :ivar ground_surface:
    :ivar floor_surface:
    :ivar ceiling_surface:
    :ivar closure_surface:
    :ivar hollow_space:
    :ivar traffic_space:
    :ivar hole:
    :ivar clearance_space:
    :ivar auxiliary_traffic_space:
    :ivar waterway:
    :ivar track:
    :ivar square:
    :ivar section:
    :ivar road:
    :ivar railway:
    :ivar intersection:
    :ivar generic_unoccupied_space:
    :ivar building_room:
    :ivar bridge_room:
    :ivar water_body:
    :ivar solitary_vegetation_object:
    :ivar plant_cover:
    :ivar generic_occupied_space:
    :ivar city_furniture:
    :ivar tunnel_installation:
    :ivar building_installation:
    :ivar bridge_installation:
    :ivar tunnel_furniture:
    :ivar building_furniture:
    :ivar bridge_furniture:
    :ivar window:
    :ivar door:
    :ivar tunnel_constructive_element:
    :ivar building_constructive_element:
    :ivar bridge_constructive_element:
    :ivar tunnel_part:
    :ivar tunnel:
    :ivar building_part:
    :ivar building:
    :ivar bridge_part:
    :ivar bridge:
    :ivar other_construction:
    :ivar generic_logical_space:
    :ivar city_object_group:
    :ivar storey:
    :ivar building_unit:
    :ivar appearance:
    :ivar feature_collection:
    :ivar directed_observation_at_distance:
    :ivar directed_observation:
    :ivar observation:
    :ivar rectified_grid_coverage:
    :ivar grid_coverage:
    :ivar multi_solid_coverage:
    :ivar multi_surface_coverage:
    :ivar multi_curve_coverage:
    :ivar multi_point_coverage:
    :ivar dynamic_feature_collection:
    :ivar dynamic_feature:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_timeseries: Optional[CompositeTimeseries] = field(
        default=None,
        metadata={
            "name": "CompositeTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    tabulated_file_timeseries: Optional[TabulatedFileTimeseries] = field(
        default=None,
        metadata={
            "name": "TabulatedFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    standard_file_timeseries: Optional[StandardFileTimeseries] = field(
        default=None,
        metadata={
            "name": "StandardFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    generic_timeseries: Optional[GenericTimeseries] = field(
        default=None,
        metadata={
            "name": "GenericTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    x3_dmaterial: Optional[X3Dmaterial] = field(
        default=None,
        metadata={
            "name": "X3DMaterial",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    parameterized_texture: Optional[ParameterizedTexture] = field(
        default=None,
        metadata={
            "name": "ParameterizedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    georeferenced_texture: Optional[GeoreferencedTexture] = field(
        default=None,
        metadata={
            "name": "GeoreferencedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    address: Optional[Address2] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    point_cloud: Optional[PointCloud] = field(
        default=None,
        metadata={
            "name": "PointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )
    city_model: Optional[CityModel] = field(
        default=None,
        metadata={
            "name": "CityModel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    version_transition: Optional[VersionTransition] = field(
        default=None,
        metadata={
            "name": "VersionTransition",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    version: Optional[Version] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    dynamizer: Optional[Dynamizer] = field(
        default=None,
        metadata={
            "name": "Dynamizer",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    relief_feature: Optional[ReliefFeature] = field(
        default=None,
        metadata={
            "name": "ReliefFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    tinrelief: Optional[Tinrelief] = field(
        default=None,
        metadata={
            "name": "TINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    raster_relief: Optional[RasterRelief] = field(
        default=None,
        metadata={
            "name": "RasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    mass_point_relief: Optional[MassPointRelief] = field(
        default=None,
        metadata={
            "name": "MassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    breakline_relief: Optional[BreaklineRelief] = field(
        default=None,
        metadata={
            "name": "BreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    water_surface: Optional[WaterSurface] = field(
        default=None,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    water_ground_surface: Optional[WaterGroundSurface] = field(
        default=None,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    traffic_area: Optional[TrafficArea] = field(
        default=None,
        metadata={
            "name": "TrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    marking: Optional[Marking] = field(
        default=None,
        metadata={
            "name": "Marking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole_surface: Optional[HoleSurface] = field(
        default=None,
        metadata={
            "name": "HoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    land_use: Optional[LandUse] = field(
        default=None,
        metadata={
            "name": "LandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    generic_thematic_surface: Optional[GenericThematicSurface] = field(
        default=None,
        metadata={
            "name": "GenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    window_surface: Optional[WindowSurface] = field(
        default=None,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door_surface: Optional[DoorSurface] = field(
        default=None,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    wall_surface: Optional[WallSurface] = field(
        default=None,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    roof_surface: Optional[RoofSurface] = field(
        default=None,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_floor_surface: Optional[OuterFloorSurface] = field(
        default=None,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
        default=None,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    interior_wall_surface: Optional[InteriorWallSurface] = field(
        default=None,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ground_surface: Optional[GroundSurface] = field(
        default=None,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    floor_surface: Optional[FloorSurface] = field(
        default=None,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ceiling_surface: Optional[CeilingSurface] = field(
        default=None,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    closure_surface: Optional[ClosureSurface] = field(
        default=None,
        metadata={
            "name": "ClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    hollow_space: Optional[HollowSpace] = field(
        default=None,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    traffic_space: Optional[TrafficSpace] = field(
        default=None,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole: Optional[Hole] = field(
        default=None,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    clearance_space: Optional[ClearanceSpace] = field(
        default=None,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    waterway: Optional[Waterway] = field(
        default=None,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    track: Optional[Track1] = field(
        default=None,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    square: Optional[Square] = field(
        default=None,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: Optional[Section] = field(
        default=None,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    road: Optional[Road] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    railway: Optional[Railway] = field(
        default=None,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: Optional[Intersection] = field(
        default=None,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    building_room: Optional[BuildingRoom] = field(
        default=None,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_room: Optional[BridgeRoom] = field(
        default=None,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    water_body: Optional[WaterBody] = field(
        default=None,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
        default=None,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    plant_cover: Optional[PlantCover] = field(
        default=None,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    generic_occupied_space: Optional[GenericOccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_furniture: Optional[CityFurniture] = field(
        default=None,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    tunnel_installation: Optional[TunnelInstallation] = field(
        default=None,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_installation: Optional[BuildingInstallation] = field(
        default=None,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_installation: Optional[BridgeInstallation] = field(
        default=None,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_furniture: Optional[TunnelFurniture] = field(
        default=None,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_furniture: Optional[BuildingFurniture] = field(
        default=None,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_furniture: Optional[BridgeFurniture] = field(
        default=None,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    window: Optional[Window] = field(
        default=None,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door: Optional[Door] = field(
        default=None,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    tunnel_constructive_element: Optional[TunnelConstructiveElement] = field(
        default=None,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_constructive_element: Optional[BuildingConstructiveElement] = (
        field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    bridge_constructive_element: Optional[BridgeConstructiveElement] = field(
        default=None,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    other_construction: Optional[OtherConstruction] = field(
        default=None,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    generic_logical_space: Optional[GenericLogicalSpace] = field(
        default=None,
        metadata={
            "name": "GenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_object_group: Optional[CityObjectGroup] = field(
        default=None,
        metadata={
            "name": "CityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    storey: Optional[Storey] = field(
        default=None,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_unit: Optional[BuildingUnit] = field(
        default=None,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    appearance: Optional[Appearance] = field(
        default=None,
        metadata={
            "name": "Appearance",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    feature_collection: Optional[FeatureCollection] = field(
        default=None,
        metadata={
            "name": "FeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation_at_distance: Optional[
        DirectedObservationAtDistance
    ] = field(
        default=None,
        metadata={
            "name": "DirectedObservationAtDistance",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation: Optional[DirectedObservation] = field(
        default=None,
        metadata={
            "name": "DirectedObservation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    observation: Optional[Observation] = field(
        default=None,
        metadata={
            "name": "Observation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid_coverage: Optional[RectifiedGridCoverage] = field(
        default=None,
        metadata={
            "name": "RectifiedGridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_coverage: Optional[GridCoverage] = field(
        default=None,
        metadata={
            "name": "GridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid_coverage: Optional[MultiSolidCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSolidCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface_coverage: Optional[MultiSurfaceCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSurfaceCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve_coverage: Optional[MultiCurveCoverage] = field(
        default=None,
        metadata={
            "name": "MultiCurveCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point_coverage: Optional[MultiPointCoverage] = field(
        default=None,
        metadata={
            "name": "MultiPointCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature_collection: Optional[DynamicFeatureCollection] = field(
        default=None,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature: Optional[DynamicFeature] = field(
        default=None,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class TargetPropertyType:
    """
    :ivar composite_timeseries:
    :ivar tabulated_file_timeseries:
    :ivar standard_file_timeseries:
    :ivar generic_timeseries:
    :ivar x3_dmaterial:
    :ivar parameterized_texture:
    :ivar georeferenced_texture:
    :ivar address:
    :ivar point_cloud:
    :ivar city_model:
    :ivar version_transition:
    :ivar version:
    :ivar dynamizer:
    :ivar relief_feature:
    :ivar tinrelief:
    :ivar raster_relief:
    :ivar mass_point_relief:
    :ivar breakline_relief:
    :ivar water_surface:
    :ivar water_ground_surface:
    :ivar traffic_area:
    :ivar marking:
    :ivar hole_surface:
    :ivar auxiliary_traffic_area:
    :ivar land_use:
    :ivar generic_thematic_surface:
    :ivar window_surface:
    :ivar door_surface:
    :ivar wall_surface:
    :ivar roof_surface:
    :ivar outer_floor_surface:
    :ivar outer_ceiling_surface:
    :ivar interior_wall_surface:
    :ivar ground_surface:
    :ivar floor_surface:
    :ivar ceiling_surface:
    :ivar closure_surface:
    :ivar hollow_space:
    :ivar traffic_space:
    :ivar hole:
    :ivar clearance_space:
    :ivar auxiliary_traffic_space:
    :ivar waterway:
    :ivar track:
    :ivar square:
    :ivar section:
    :ivar road:
    :ivar railway:
    :ivar intersection:
    :ivar generic_unoccupied_space:
    :ivar building_room:
    :ivar bridge_room:
    :ivar water_body:
    :ivar solitary_vegetation_object:
    :ivar plant_cover:
    :ivar generic_occupied_space:
    :ivar city_furniture:
    :ivar tunnel_installation:
    :ivar building_installation:
    :ivar bridge_installation:
    :ivar tunnel_furniture:
    :ivar building_furniture:
    :ivar bridge_furniture:
    :ivar window:
    :ivar door:
    :ivar tunnel_constructive_element:
    :ivar building_constructive_element:
    :ivar bridge_constructive_element:
    :ivar tunnel_part:
    :ivar tunnel:
    :ivar building_part:
    :ivar building:
    :ivar bridge_part:
    :ivar bridge:
    :ivar other_construction:
    :ivar generic_logical_space:
    :ivar city_object_group:
    :ivar storey:
    :ivar building_unit:
    :ivar appearance:
    :ivar feature_collection:
    :ivar directed_observation_at_distance:
    :ivar directed_observation:
    :ivar observation:
    :ivar rectified_grid_coverage:
    :ivar grid_coverage:
    :ivar multi_solid_coverage:
    :ivar multi_surface_coverage:
    :ivar multi_curve_coverage:
    :ivar multi_point_coverage:
    :ivar dynamic_feature_collection:
    :ivar dynamic_feature:
    :ivar rectified_grid:
    :ivar grid:
    :ivar geometric_complex:
    :ivar multi_solid:
    :ivar multi_surface:
    :ivar multi_curve:
    :ivar multi_point:
    :ivar multi_geometry:
    :ivar composite_solid:
    :ivar solid:
    :ivar composite_surface:
    :ivar shell:
    :ivar orientable_surface:
    :ivar tin:
    :ivar triangulated_surface:
    :ivar polyhedral_surface:
    :ivar surface:
    :ivar polygon:
    :ivar composite_curve:
    :ivar orientable_curve:
    :ivar curve:
    :ivar ring:
    :ivar linear_ring:
    :ivar line_string:
    :ivar point:
    :ivar owns:
    :ivar type_value: Enumeration of values for the type attribute
    :ivar href:
    :ivar role: A URI with a minimum length of 1 character.
    :ivar arcrole: A URI with a minimum length of 1 character.
    :ivar title:
    :ivar show: Enumeration of values for the show attribute
    :ivar actuate: Enumeration of values for the actuate attribute
    :ivar nil_reason:
    :ivar remote_schema:
    """

    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    composite_timeseries: Optional[CompositeTimeseries] = field(
        default=None,
        metadata={
            "name": "CompositeTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    tabulated_file_timeseries: Optional[TabulatedFileTimeseries] = field(
        default=None,
        metadata={
            "name": "TabulatedFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    standard_file_timeseries: Optional[StandardFileTimeseries] = field(
        default=None,
        metadata={
            "name": "StandardFileTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    generic_timeseries: Optional[GenericTimeseries] = field(
        default=None,
        metadata={
            "name": "GenericTimeseries",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    x3_dmaterial: Optional[X3Dmaterial] = field(
        default=None,
        metadata={
            "name": "X3DMaterial",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    parameterized_texture: Optional[ParameterizedTexture] = field(
        default=None,
        metadata={
            "name": "ParameterizedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    georeferenced_texture: Optional[GeoreferencedTexture] = field(
        default=None,
        metadata={
            "name": "GeoreferencedTexture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    address: Optional[Address2] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    point_cloud: Optional[PointCloud] = field(
        default=None,
        metadata={
            "name": "PointCloud",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/pointcloud/3.0",
        },
    )
    city_model: Optional[CityModel] = field(
        default=None,
        metadata={
            "name": "CityModel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    version_transition: Optional[VersionTransition] = field(
        default=None,
        metadata={
            "name": "VersionTransition",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    version: Optional[Version] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/versioning/3.0",
        },
    )
    dynamizer: Optional[Dynamizer] = field(
        default=None,
        metadata={
            "name": "Dynamizer",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/dynamizer/3.0",
        },
    )
    relief_feature: Optional[ReliefFeature] = field(
        default=None,
        metadata={
            "name": "ReliefFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    tinrelief: Optional[Tinrelief] = field(
        default=None,
        metadata={
            "name": "TINRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    raster_relief: Optional[RasterRelief] = field(
        default=None,
        metadata={
            "name": "RasterRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    mass_point_relief: Optional[MassPointRelief] = field(
        default=None,
        metadata={
            "name": "MassPointRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    breakline_relief: Optional[BreaklineRelief] = field(
        default=None,
        metadata={
            "name": "BreaklineRelief",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/relief/3.0",
        },
    )
    water_surface: Optional[WaterSurface] = field(
        default=None,
        metadata={
            "name": "WaterSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    water_ground_surface: Optional[WaterGroundSurface] = field(
        default=None,
        metadata={
            "name": "WaterGroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    traffic_area: Optional[TrafficArea] = field(
        default=None,
        metadata={
            "name": "TrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    marking: Optional[Marking] = field(
        default=None,
        metadata={
            "name": "Marking",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole_surface: Optional[HoleSurface] = field(
        default=None,
        metadata={
            "name": "HoleSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_area: Optional[AuxiliaryTrafficArea] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficArea",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    land_use: Optional[LandUse] = field(
        default=None,
        metadata={
            "name": "LandUse",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/landuse/3.0",
        },
    )
    generic_thematic_surface: Optional[GenericThematicSurface] = field(
        default=None,
        metadata={
            "name": "GenericThematicSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    window_surface: Optional[WindowSurface] = field(
        default=None,
        metadata={
            "name": "WindowSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door_surface: Optional[DoorSurface] = field(
        default=None,
        metadata={
            "name": "DoorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    wall_surface: Optional[WallSurface] = field(
        default=None,
        metadata={
            "name": "WallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    roof_surface: Optional[RoofSurface] = field(
        default=None,
        metadata={
            "name": "RoofSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_floor_surface: Optional[OuterFloorSurface] = field(
        default=None,
        metadata={
            "name": "OuterFloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    outer_ceiling_surface: Optional[OuterCeilingSurface] = field(
        default=None,
        metadata={
            "name": "OuterCeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    interior_wall_surface: Optional[InteriorWallSurface] = field(
        default=None,
        metadata={
            "name": "InteriorWallSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ground_surface: Optional[GroundSurface] = field(
        default=None,
        metadata={
            "name": "GroundSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    floor_surface: Optional[FloorSurface] = field(
        default=None,
        metadata={
            "name": "FloorSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    ceiling_surface: Optional[CeilingSurface] = field(
        default=None,
        metadata={
            "name": "CeilingSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    closure_surface: Optional[ClosureSurface] = field(
        default=None,
        metadata={
            "name": "ClosureSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/3.0",
        },
    )
    hollow_space: Optional[HollowSpace] = field(
        default=None,
        metadata={
            "name": "HollowSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    traffic_space: Optional[TrafficSpace] = field(
        default=None,
        metadata={
            "name": "TrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    hole: Optional[Hole] = field(
        default=None,
        metadata={
            "name": "Hole",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    clearance_space: Optional[ClearanceSpace] = field(
        default=None,
        metadata={
            "name": "ClearanceSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    auxiliary_traffic_space: Optional[AuxiliaryTrafficSpace] = field(
        default=None,
        metadata={
            "name": "AuxiliaryTrafficSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    waterway: Optional[Waterway] = field(
        default=None,
        metadata={
            "name": "Waterway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    track: Optional[Track1] = field(
        default=None,
        metadata={
            "name": "Track",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    square: Optional[Square] = field(
        default=None,
        metadata={
            "name": "Square",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    section: Optional[Section] = field(
        default=None,
        metadata={
            "name": "Section",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    road: Optional[Road] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    railway: Optional[Railway] = field(
        default=None,
        metadata={
            "name": "Railway",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    intersection: Optional[Intersection] = field(
        default=None,
        metadata={
            "name": "Intersection",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/transportation/3.0",
        },
    )
    generic_unoccupied_space: Optional[GenericUnoccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericUnoccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    building_room: Optional[BuildingRoom] = field(
        default=None,
        metadata={
            "name": "BuildingRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_room: Optional[BridgeRoom] = field(
        default=None,
        metadata={
            "name": "BridgeRoom",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    water_body: Optional[WaterBody] = field(
        default=None,
        metadata={
            "name": "WaterBody",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/waterbody/3.0",
        },
    )
    solitary_vegetation_object: Optional[SolitaryVegetationObject] = field(
        default=None,
        metadata={
            "name": "SolitaryVegetationObject",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    plant_cover: Optional[PlantCover] = field(
        default=None,
        metadata={
            "name": "PlantCover",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/vegetation/3.0",
        },
    )
    generic_occupied_space: Optional[GenericOccupiedSpace] = field(
        default=None,
        metadata={
            "name": "GenericOccupiedSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_furniture: Optional[CityFurniture] = field(
        default=None,
        metadata={
            "name": "CityFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityfurniture/3.0",
        },
    )
    tunnel_installation: Optional[TunnelInstallation] = field(
        default=None,
        metadata={
            "name": "TunnelInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_installation: Optional[BuildingInstallation] = field(
        default=None,
        metadata={
            "name": "BuildingInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_installation: Optional[BridgeInstallation] = field(
        default=None,
        metadata={
            "name": "BridgeInstallation",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_furniture: Optional[TunnelFurniture] = field(
        default=None,
        metadata={
            "name": "TunnelFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_furniture: Optional[BuildingFurniture] = field(
        default=None,
        metadata={
            "name": "BuildingFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_furniture: Optional[BridgeFurniture] = field(
        default=None,
        metadata={
            "name": "BridgeFurniture",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    window: Optional[Window] = field(
        default=None,
        metadata={
            "name": "Window",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    door: Optional[Door] = field(
        default=None,
        metadata={
            "name": "Door",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    tunnel_constructive_element: Optional[TunnelConstructiveElement] = field(
        default=None,
        metadata={
            "name": "TunnelConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_constructive_element: Optional[BuildingConstructiveElement] = (
        field(
            default=None,
            metadata={
                "name": "BuildingConstructiveElement",
                "type": "Element",
                "namespace": "http://www.opengis.net/citygml/building/3.0",
            },
        )
    )
    bridge_constructive_element: Optional[BridgeConstructiveElement] = field(
        default=None,
        metadata={
            "name": "BridgeConstructiveElement",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    tunnel_part: Optional[TunnelPart] = field(
        default=None,
        metadata={
            "name": "TunnelPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    tunnel: Optional[Tunnel] = field(
        default=None,
        metadata={
            "name": "Tunnel",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/tunnel/3.0",
        },
    )
    building_part: Optional[BuildingPart] = field(
        default=None,
        metadata={
            "name": "BuildingPart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building: Optional[Building] = field(
        default=None,
        metadata={
            "name": "Building",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    bridge_part: Optional[BridgePart] = field(
        default=None,
        metadata={
            "name": "BridgePart",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    bridge: Optional[Bridge] = field(
        default=None,
        metadata={
            "name": "Bridge",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/bridge/3.0",
        },
    )
    other_construction: Optional[OtherConstruction] = field(
        default=None,
        metadata={
            "name": "OtherConstruction",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/construction/3.0",
        },
    )
    generic_logical_space: Optional[GenericLogicalSpace] = field(
        default=None,
        metadata={
            "name": "GenericLogicalSpace",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/generics/3.0",
        },
    )
    city_object_group: Optional[CityObjectGroup] = field(
        default=None,
        metadata={
            "name": "CityObjectGroup",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/cityobjectgroup/3.0",
        },
    )
    storey: Optional[Storey] = field(
        default=None,
        metadata={
            "name": "Storey",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    building_unit: Optional[BuildingUnit] = field(
        default=None,
        metadata={
            "name": "BuildingUnit",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/building/3.0",
        },
    )
    appearance: Optional[Appearance] = field(
        default=None,
        metadata={
            "name": "Appearance",
            "type": "Element",
            "namespace": "http://www.opengis.net/citygml/appearance/3.0",
        },
    )
    feature_collection: Optional[FeatureCollection] = field(
        default=None,
        metadata={
            "name": "FeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation_at_distance: Optional[
        DirectedObservationAtDistance
    ] = field(
        default=None,
        metadata={
            "name": "DirectedObservationAtDistance",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    directed_observation: Optional[DirectedObservation] = field(
        default=None,
        metadata={
            "name": "DirectedObservation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    observation: Optional[Observation] = field(
        default=None,
        metadata={
            "name": "Observation",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid_coverage: Optional[RectifiedGridCoverage] = field(
        default=None,
        metadata={
            "name": "RectifiedGridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid_coverage: Optional[GridCoverage] = field(
        default=None,
        metadata={
            "name": "GridCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid_coverage: Optional[MultiSolidCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSolidCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface_coverage: Optional[MultiSurfaceCoverage] = field(
        default=None,
        metadata={
            "name": "MultiSurfaceCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve_coverage: Optional[MultiCurveCoverage] = field(
        default=None,
        metadata={
            "name": "MultiCurveCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point_coverage: Optional[MultiPointCoverage] = field(
        default=None,
        metadata={
            "name": "MultiPointCoverage",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature_collection: Optional[DynamicFeatureCollection] = field(
        default=None,
        metadata={
            "name": "DynamicFeatureCollection",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    dynamic_feature: Optional[DynamicFeature] = field(
        default=None,
        metadata={
            "name": "DynamicFeature",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    rectified_grid: Optional[RectifiedGrid] = field(
        default=None,
        metadata={
            "name": "RectifiedGrid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    grid: Optional[Grid] = field(
        default=None,
        metadata={
            "name": "Grid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    geometric_complex: Optional[GeometricComplex] = field(
        default=None,
        metadata={
            "name": "GeometricComplex",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_solid: Optional[MultiSolid] = field(
        default=None,
        metadata={
            "name": "MultiSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_surface: Optional[MultiSurface] = field(
        default=None,
        metadata={
            "name": "MultiSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_curve: Optional[MultiCurve] = field(
        default=None,
        metadata={
            "name": "MultiCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_point: Optional[MultiPoint] = field(
        default=None,
        metadata={
            "name": "MultiPoint",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    multi_geometry: Optional[MultiGeometry] = field(
        default=None,
        metadata={
            "name": "MultiGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_solid: Optional[CompositeSolid] = field(
        default=None,
        metadata={
            "name": "CompositeSolid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    solid: Optional[Solid] = field(
        default=None,
        metadata={
            "name": "Solid",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_surface: Optional[CompositeSurface] = field(
        default=None,
        metadata={
            "name": "CompositeSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    shell: Optional[Shell] = field(
        default=None,
        metadata={
            "name": "Shell",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_surface: Optional[OrientableSurface] = field(
        default=None,
        metadata={
            "name": "OrientableSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    tin: Optional[Tin] = field(
        default=None,
        metadata={
            "name": "Tin",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    triangulated_surface: Optional[TriangulatedSurface] = field(
        default=None,
        metadata={
            "name": "TriangulatedSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polyhedral_surface: Optional[PolyhedralSurface] = field(
        default=None,
        metadata={
            "name": "PolyhedralSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    surface: Optional[Surface] = field(
        default=None,
        metadata={
            "name": "Surface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    composite_curve: Optional[CompositeCurve] = field(
        default=None,
        metadata={
            "name": "CompositeCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    orientable_curve: Optional[OrientableCurve] = field(
        default=None,
        metadata={
            "name": "OrientableCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    curve: Optional[Curve] = field(
        default=None,
        metadata={
            "name": "Curve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    ring: Optional[Ring] = field(
        default=None,
        metadata={
            "name": "Ring",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        },
    )
    type_value: TypeValue = field(
        init=False,
        default=TypeValue.SIMPLE,
        metadata={
            "name": "type",
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    href: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    arcrole: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
            "min_length": 1,
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    show: Optional[ShowValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    actuate: Optional[ActuateValue] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/1999/xlink",
        },
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        },
    )
    remote_schema: Optional[str] = field(
        default=None,
        metadata={
            "name": "remoteSchema",
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Members(ArrayAssociationType):
    class Meta:
        name = "members"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Subject(TargetPropertyType):
    class Meta:
        name = "subject"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Target(TargetPropertyType):
    class Meta:
        name = "target"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Using(ProcedurePropertyType):
    class Meta:
        name = "using"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ArrayType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    members: Optional[Members] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class BagType(AbstractGmltype):
    class Meta:
        target_namespace = "http://www.opengis.net/gml/3.2"

    member: list[Member] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )
    members: Optional[Members] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        },
    )


@dataclass
class Array(ArrayType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Bag(BagType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"
